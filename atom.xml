<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vicky的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.devvk.com/"/>
  <updated>2019-01-30T01:58:55.919Z</updated>
  <id>https://blog.devvk.com/</id>
  
  <author>
    <name>Vicky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>property认识</title>
    <link href="https://blog.devvk.com/2019/01/29/property%E8%AE%A4%E8%AF%86/"/>
    <id>https://blog.devvk.com/2019/01/29/property认识/</id>
    <published>2019-01-29T08:36:16.000Z</published>
    <updated>2019-01-30T01:58:55.919Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 style="text-align:center">@property</h1><p>为什么要讨论这些问题?因为这些东西在平常开发是很难用到的,但是在面试和找工作的过程中就会被提及,公司不仅需要实战者,也需要理论和实战相结合的人.所以我们要掌握理论来完成实战.</p><ol><li>@property本质是什么?</li><li>@property为我们做了哪几件事?</li><li>分类如何为类添加属性?能够添加实例变量吗?</li><li>通过编译的类能够添加实例变量?在运行时创建的类能否添加实例变量?</li></ol><p>我们将从这几个方面来查找和解决这个问题?</p><p>property是我们在开发中为某个类来添加属性的声明方式.它为了我们做了三件事情,1.生成带有下划线的实例变量,2.生成getter方法,3.生成setter方法.settet和getter也被称为属性合成方法.平时我们开发过程中不需要写,编译器会帮我们完成这项繁琐的工作.但是如果我们需要自己实现该如何写呢?</p><pre>@implementation MJPerson<br>@synthesize name =_name;<br>- (NSString <em>)name{<br>return @”1111”;<br>}<br>- (void)setName:(NSString </em>)name {<br>_name = name;<br>}</pre><br><p>关键字:@synthesize和@dynamic这个稍后讨论</p><p>分类是不可以添加实例变量的,因为在类经过编译后,类的objc_ivar_list已经确定,并且已经调用了class_setIvarLayout和class_setWeakIvarLayout已经确定了实例变量的布局,所以无法增加实例变量</p><p>那么分类是否可以添加属性呢?答案是肯定的,因为在运行时环境中,我们可以采用关联引用为类动态添加属性</p><pre><br>//设置属性的值<br>OBJC_EXPORT <br>void objc_setAssociatedObject(id _Nonnull object, const void <em> _Nonnull key,<br>id _Nullable value, objc_AssociationPolicy policy)<br><br>//获取属性的值<br>OBJC_EXPORT<br>id_Nullable<br>objc_getAssociatedObject(id _Nonnull object, const void </em> _Nonnull key)<br>OBJC_AVAILABLE<br>(10.6, 3.1, 9.0, 1.0, 2.0);<br>//移除属性<br>OBJC_EXPORT void<br>objc_removeAssociatedObjects(id _Nonnull object)<br>    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);</pre><p>上面第一个方法是设置关联属性的值,必须给定一个object,一个唯一的key,和缓存策略.我们再给定一个唯一的key是要注意,我们再获取时也需要用到这个key所以必须具有唯一性.所以我们一般使用static char来定义这个key,在选择缓存策略时就要考虑这个属性的类型,如果输基础数据类型,就是assign,如果是对象就是retain,如果是字符串或者是block等要选择copy.这个缓存策略中在对象时,会有NONATOMIC和atomic这个的选择和我们声明属性一致.</p><p>第二个方式是获取关联属性的值,参数为关联的属性和唯一的key</p><p>第三个方法是移除所有的关联属性,我们要想移除单个关联属性,应该调用设置关联属性值的函数,并且设置value为nil</p><p>我们无法给通过编译的类,添加实例变量,但是我们可以给运行时创建的类添加实例变量.</p><pre>runtime函数如下:<br>//首先创建类<br>OBJC_EXPORT Class _Nullable<br>objc_allocateClassPair(Class _Nullable superclass, const char <em> _Nonnull name, size_t extraBytes)OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);<br>//为类添加属性<br>参数:创建的类,属性名称,和修饰属性的关键字属性数组,属性数组count<br>OBJC_EXPORT BOOL<br>class_addProperty(Class _Nullable cls, const char </em> _Nonnull name,const objc_property_attribute_t * _Nullable attributes,unsigned int attributeCount)<br>OBJC_AVAILABLE(10.7, 4.3, 9.0, 1.0, 2.0);<br>//注册类<br>objc_registerClassPair(cls);</pre><p>我们可以为这个类添加属性,添加方法,添加协议等等,还可以添加实例变量,但是这个类必须包含一个同名的实例变量</p><p>好了上面的四个小问题说完了,该说刚才说的@synthesize和@dynamic,如果两个都没写就是@ synthesize  property=_property,@synthesize系统会帮我们自动实现setter和getter方法,@dynamic 需要我们自己实现setter和getter方法,如果不实现,就会出现崩溃,因为这个是你告诉系统说,我要自己实现,系统自然不会帮你实现,但是你却没实现,然后就找不到方法了.</p><p>说起属性就要说属性的默认关键字:基础数据类型:内存关键字:assign,读写属性:readwrite,原子性:atomic,对象类型:内存关键字:strong,读写属性:readWrite,原子性:atomic</p><br><b style="color:red">重点:</b><p></p><p>关联引用</p><p>属性的setter和getter的合成方式,@synthesize自动合成,@dynamic手动合成.</p><p>如何为运行时创建的类添加属性,方法等</p><br><p>在上面代码中,由于macdown的编辑器*都被阉割掉了.抱歉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1 style=&quot;text-align:center&quot;&gt;@property&lt;/h1&gt;&lt;p&gt;为什么要讨论这些问题?因为这些东西在平常开发是很难用到的,但是在面试和找工作的过程中就会被提及,公司不仅需要实战者,也需要理论和实战相结合的人.所以我们要掌握理论来完成实战
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="property本质" scheme="https://blog.devvk.com/tags/property%E6%9C%AC%E8%B4%A8/"/>
    
      <category term="property做了哪些事情" scheme="https://blog.devvk.com/tags/property%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
    
      <category term="分类添加属性" scheme="https://blog.devvk.com/tags/%E5%88%86%E7%B1%BB%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
    
      <category term="如何给运行时创建的类添加属性,方法等" scheme="https://blog.devvk.com/tags/%E5%A6%82%E4%BD%95%E7%BB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%9B%E5%BB%BA%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95%E7%AD%89/"/>
    
      <category term="属性的默认关键字" scheme="https://blog.devvk.com/tags/%E5%B1%9E%E6%80%A7%E7%9A%84%E9%BB%98%E8%AE%A4%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="synthesize和dynamic区别" scheme="https://blog.devvk.com/tags/synthesize%E5%92%8Cdynamic%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>runtime方法查找</title>
    <link href="https://blog.devvk.com/2019/01/25/runtime%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE/"/>
    <id>https://blog.devvk.com/2019/01/25/runtime方法查找/</id>
    <published>2019-01-25T02:30:25.000Z</published>
    <updated>2019-01-25T05:54:01.872Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1>runtime是如何查找到一个方法的</h1><p>在iOS开发过程中我们知道OC语言是C语言的超集.并且将SmallTalk的消息传递特性加入了其中,使得Objective-C也具有了消息传递这一特性.</p><h4>Objective-C方法调用的本质</h4><p>既然说Objective-C结合了smallTalk的消息传递,那自然也是将这个特性发挥到了这个方面,而且Objective-C作为一门动态语言,与其他面向对象语言不同,它总是想办法把一些决定工作从编译连接推迟到运行时.Objective-C依赖运行时系统,runtime运行时库提供了很多在运行时过程中操作类和对象的API.而我们的方法调用就是依赖于这个运行时系统.</p><pre>MJPerson <em>person = [[MJPerson alloc] init];<br>person.name=@”1111”;<br>[person print];</em></pre><p>这是我们使用OC语言开发中常见的方法调用,那么它底层做了什么呢?它是怎么用到消息传递机制的?下面我们再看这段代码:</p><pre><br>MJPerson person = objc_msgSend(objc_getClass(“MJPerson”), @selector(alloc));<br><br>objc_msgSend(person, @selector(init));<br><br>objc_msgSend(person, @selector(setName:),@”11111”);<br><br>objc_msgSend(person, @selector(print));</pre><p>系统会在调用方法时都会将方法调用转成消息传递的方式进行.那么就让我们来通过runtime的源代码看一下:</p><h4>alloc方法</h4><ol><li>alloc是NSObject的类方法,而我们大多数的类都继承于NSObject.和不常见的NSProxy.我们也知道通过继承,我们可以继承父类的属性和方法</li><li>那么在调用alloc方法后,系统是如何找到该方法的实现的.</li><li>因为在runtime中关于objc_class的定义中有objc_ivar_list和objc_method_list还有objc_cache还有objc_protocol_list.通过名称我们也能知道一个是成员变量列表,一个是方法列表一个是方法缓存列表,一个是协议列表.查找方法肯定先会找方法缓存列表,别问我为什么?,因为这是系统对方法调用进行的优化,有缓存直接使用缓存,减少查找,增快效率,如果没有缓存,就找方法列表,找到就返回并执行,如果没找到就找父类,一直向上查找,如果找到根类还没有找到,就看有没有转发,如果有转发就执行转发,如果没有那就只能抛出异常.</li><li>上面说到的是怎么寻找方法,alloc做为类方法,我们也知道类方法存在于元类的方法列表当中,然后和上面的步骤相同进行查找</li></ol><p style="color:red;text-indent:0em">alloc方法查找代码:</p><pre><br>//1,查找类方法<br>Method class_getClassMethod(Class cls, SEL sel)<br>{<br>if (!cls  ||  !sel)return nil;<br>return class_getInstanceMethod(cls-&gt;getMeta(), sel);//在这里我们首先获取了cls的元类metaClass,然后查找元类的方法列表}<br>//2.查找类的实例方法<br>Method class_getInstanceMethod(Class cls, SEL sel){<br>if (!cls  ||  !sel) return nil;//判断cls和方法编号是否存在<br><p style="text-indent:0">#warning fixme build and search caches</p><br>lookUpImpOrNil(cls, sel, nil,<br>                   NO/<em>initialize</em>/, NO/<em>cache</em>/, YES/<em>resolver</em>/);//查找方法缓存;在查找方法缓存是会看到cache_getImp这个函数.但是无法查看它的内部实现,但是runtime源码中有这个方法的汇编代码,一会可以通过汇编代码进行大致了解.<br><p style="text-indent:0">#warning fixme build and search caches</p><br>return _class_getMethod(cls, sel);//如果缓存中没有找到,就会查找方法列表,并同时会创建缓存链表,如果找到方法实现就进行方法缓存<br>}<br><br>//3.cache_getImp的汇编代码<br>STATIC_ENTRY _cache_getImp<br>mov    r9, r0 :r0标识要在哪个缓存类中搜索,将r0寄存器的值传递给r9寄存器.在后面解释<p style="color:red">lookUpImpOrForward</p>源代码是会看到,_cache_getImp传入的参数是cls,和方法编号,如果是类方法传入的就是metaClass,如果是实例方法就是当前类.<br>CacheLookup NORMAL //这个宏定义中r0和r1表示消息接收者,r1或r2代表方法编号;方法实现imp在r12中<br>mov    r0, r12 //缓存命中,方法的实现在r12寄存器中,然后传递给r0寄存器;如果没命中就继续执行cacheLookup2<br>bx    lr            // return imp<br>CacheLookup2 GETIMP<br>// 缓存没命中,丢失返回nil<br>mov    r0, #0<br>bx    lr<br>END_ENTRY _cache_getImp<br>//objc_msgSend汇编代码<br>ENTRY _objc_msgSend<br>    MESSENGER_START<br>    cbz    r0, LNilReceiver_f //判断消息接收者是否为nil<br>    ldr    r9, [r0]        // r9 = self-&gt;isa<br>    GetClassFromIsa            // r9 = class<br>    CacheLookup NORMAL //缓存命中,直接调用imp<br>    nonstret forwarding<br>    MESSENGER_END_FAST<br>    bx    r12            // call imp<br>    CacheLookup2 NORMAL //缓存miss<br>    ldr    r9, [r0]        // r9 = self-&gt;isa<br>    GetClassFromIsa            // r9 = class<br>    MESSENGER_END_SLOW<br>    b    __objc_msgSend_uncached //方法未缓存<br><br>    STATIC_ENTRY __objc_msgSend_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup NORMAL    // returns IMP in r12<br>    bx    r12<br>    END_ENTRY __objc_msgSend_uncached<br>    STATIC_ENTRY __objc_msgSend_stret_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup STRET        // returns IMP in r12<br>    bx    r12<br>    END_ENTRY __objc_msgSend_stret_uncached<br>    STATIC_ENTRY __objc_msgLookup_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup NORMAL    // returns IMP in r12<br>    bx    lr<br>    END_ENTRY __objc_msgLookup_uncached<br>    STATIC_ENTRY __objc_msgLookup_stret_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup STRET        // returns IMP in r12<br>    bx    lr<br>    END_ENTRY __objc_msgLookup_stret_uncached<p></p><p></p></pre><p>可能看不懂汇编,而且和我们学的8086汇编不同,但是从它的注释中我们可以看出首先会判断消息接收者是否为nil,然后在缓存方法查找,如果找到直接call imp,如果没找到就表明该方法没缓存就执行__objc_msgSend_uncached 在这个汇编代码中可以看到MethodTableLookup;我们再查看这个到底是什么东西</p><pre><br>.macro MethodTableLookup<br>    stmfd    sp!, {r0-r3,r7,lr}<br>    add    r7, sp, #16<br>    sub    sp, #8            // align stack<br>    FP_SAVE<br>.if $0 == NORMAL<br>    // receiver already in r0<br>    // selector already in r1<br>.else<br>    mov     r0, r1            // receiver<br>    mov     r1, r2            // selector<br>.endif<br>    mov    r2, r9            // class to search<br>    blx    __class_lookupMethodAndLoadCache3<br>    mov    r12, r0            // r12 = IMP<br>.if $0 == NORMAL<br>    cmp    r12, r12        // set eq for nonstret forwarding<br>.else<br>    tst    r12, r12        // set ne for stret forwarding<br>.endif<br>    FP_RESTORE<br>    add    sp, #8            // align stack<br>    ldmfd    sp!, {r0-r3,r7,lr}<br>.endmacro<br></pre><p>在这个宏定义中,我们看到了__class_lookupMethodAndLoadCache3这个方法名,然后在runtime的方法中查找,找到了函数的实现</p><pre><br>IMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)<br>{<br>    return lookUpImpOrForward(cls, sel, obj,<br>                              YES/<em>initialize</em>/, NO/<em>cache</em>/, YES/<em>resolver</em>/);<br>}<br>IMP lookUpImpOrForward(Class cls, SEL sel, id inst,<br>                       bool initialize, bool cache, bool resolver)<br>{<br>    IMP imp = nil;<br>    bool triedResolver = NO;<br>    runtimeLock.assertUnlocked();<br>    // Optimistic cache lookup<br>    if (cache) {<br>        imp = cache_getImp(cls, sel);<br>        if (imp) return imp;<br>    }<br>    // runtimeLock is held during isRealized and isInitialized checking<br>    // to prevent races against concurrent realization.<br>    // runtimeLock is held during method search to make<br>    // method-lookup + cache-fill atomic with respect to method addition.<br>    // Otherwise, a category could be added but ignored indefinitely because<br>    // the cache was re-filled with the old value after the cache flush on<br>    // behalf of the category.<br>    runtimeLock.read();<br>    if (!cls-&gt;isRealized()) {<br>        // Drop the read-lock and acquire the write-lock.<br>        // realizeClass() checks isRealized() again to prevent<br>        // a race while the lock is down.<br>        runtimeLock.unlockRead();<br>        runtimeLock.write();<br>        realizeClass(cls);<br>        runtimeLock.unlockWrite();<br>        runtimeLock.read();<br>    }<br>    if (initialize  &amp;&amp;  !cls-&gt;isInitialized()) {<br>        runtimeLock.unlockRead();<br>        _class_initialize (_class_getNonMetaClass(cls, inst));<br>        runtimeLock.read();<br>        // If sel == initialize, _class_initialize will send +initialize and<br>        // then the messenger will send +initialize again after this<br>        // procedure finishes. Of course, if this is not being called<br>        // from the messenger then it won’t happen. 2778172<br>    }<br> retry:<br>    runtimeLock.assertReading();<br>    // Try this class’s cache.<br>    imp = cache_getImp(cls, sel);<br>    if (imp) goto done;<br>    // Try this class’s method lists.<br>    {<br>        Method meth = getMethodNoSuper_nolock(cls, sel);<br>        if (meth) {<br>            log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);<br>            imp = meth-&gt;imp;<br>            goto done;<br>        }<br>    }<br>    // Try superclass caches and method lists.<br>    {<br>        unsigned attempts = unreasonableClassCount();<br>        for (Class curClass = cls-&gt;superclass;<br>             curClass != nil;<br>             curClass = curClass-&gt;superclass)<br>        {<br>            // Halt if there is a cycle in the superclass chain.<br>            if (–attempts == 0) {<br>                _objc_fatal(“Memory corruption in class list.”);<br>            }<br>            // Superclass cache.<br>            imp = cache_getImp(curClass, sel);<br>            if (imp) {<br>                if (imp != (IMP)_objc_msgForward_impcache) {<br>                    // Found the method in a superclass. Cache it in this class.<br>                    log_and_fill_cache(cls, imp, sel, inst, curClass);<br>                    goto done;<br>                }<br>                else {<br>                    // Found a forward:: entry in a superclass.<br>                    // Stop searching, but don’t cache yet; call method<br>                    // resolver for this class first.<br>                    break;<br>                }<br>            }<br>            // Superclass method list.<br>            Method meth = getMethodNoSuper_nolock(curClass, sel);<br>            if (meth) {<br>                log_and_fill_cache(cls, meth-&gt;imp, sel, inst, curClass);<br>                imp = meth-&gt;imp;<br>                goto done;<br>            }<br>        }<br>    }<br>    // No implementation found. Try method resolver once.<br>    if (resolver  &amp;&amp;  !triedResolver) {<br>        runtimeLock.unlockRead();<br>        _class_resolveMethod(cls, sel, inst);<br>        runtimeLock.read();<br>        // Don’t cache the result; we don’t hold the lock so it may have<br>        // changed already. Re-do the search from scratch instead.<br>        triedResolver = YES;<br>        goto retry;<br>    }<br>    // No implementation found, and method resolver didn’t help.<br>    // Use forwarding.<br>    imp = (IMP)_objc_msgForward_impcache;<br>    cache_fill(cls, sel, imp, inst);<br> done:<br>    runtimeLock.unlockRead();<br>    return imp;<br>}<br></pre><p>通过上面的代码已经很明显能看出了,方法是如何被查找到的.首先我们忽略锁的操作,然后主要看关心的部分,如果cache传入的为yes,就会去类方法缓存列表中去找,如果存在就返回,否则就看有没有被初始化.初始化过的直接查找this class’s method list,如果找到就done,并为imp赋值.如果不存在就查找superclass caches and method lists.如果找到了就done,并为imp赋值.如果还没找到方法实现,然后会判断是否有能处理的对象,也是就是我们刚才提到的走转发,如果没有找到方法,也没有转发那么就会failure.</p><p></p><p></p><p style="color:red;text-indent:0">扩展</p><p></p><p></p><p>下面这段方法就是查找类方法列表是调用的方法,然后都是<b style="color:cyan">循环遍历cls-&gt;data()-&gt;methods.beiginLists到endLists?</b>方法不是放在结构体objc_method_list中的吗?</p><p></p><p></p><p>然后我们一层一层往上找,在objc-runtime-new.h中objc_class:objc_object的定义中看到了data(),他是一个class_rw_t*指针,然后点进去看到了我们看到的methods,properties,protocols,firstSubClass,还有很多函数和成员变量,我们关心的就这三个,方法,属性列表,和协议列表.而且发现runtime.h中的定义和objc-runtime-new中的定义不同了.runtime使用的是结构体,而new中使用的是c++中的类.然后我再看了class_copyProtocolList函数也是通过遍历cls-&gt;data()-&gt;protocols,然后查看objc_getivar也是通过cls-&gt;data()-&gt;ro-&gt;ivars来获取,所以明白runtime中定义的是老的版本,而new中定义的是新版本的.但是对于两者都进行了解比较好</p><p></p><pre>static method_t *getMethodNoSuper_nolock(Class cls, SEL sel){    runtimeLock.assertLocked();    assert(cls->isRealized());    // fixme nil cls?     // fixme nil sel?    for (auto mlists = cls->data()->methods.beginLists(),               end = cls->data()->methods.endLists();          mlists != end;         ++mlists)    {        method_t *m = search_method_list(*mlists, sel);        if (m) return m;    }    return nil;}</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1&gt;runtime是如何查找到一个方法的&lt;/h1&gt;&lt;p&gt;在iOS开发过程中我们知道OC语言是C语言的超集.并且将SmallTalk的消息传递特性加入了其中,使得Objective-C也具有了消息传递这一特性.&lt;/p&gt;&lt;h4&gt;Objective-C方法调用的本质&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="https://blog.devvk.com/2019/01/16/%E6%B1%87%E7%BC%96/"/>
    <id>https://blog.devvk.com/2019/01/16/汇编/</id>
    <published>2019-01-16T02:17:24.000Z</published>
    <updated>2019-01-23T05:57:58.251Z</updated>
    
    <content type="html"><![CDATA[<body><h1>基础知识</h1><h4> 汇编语言的组成</h4><ol><li>汇编指令</li><li>伪指令</li><li>其他符号:如+,-,*,/等</li></ol><h4> 存储器</h4><p>CPU所需要的指令和数据都在存储器中存放,也就是我们所说的内存当中.磁盘不同于内存,磁盘上的数据或程序如果不读到内存中,就无法被CPU使用.</p><h4>指令和数据</h4><p>在内存或磁盘上,指令和数据没有任何区别,都是二进制信息.</p><h4>存储单元</h4><p>存储器被划分成或干戈存储单元,每个存储单元从0开始顺序额编号.微机存储器的容量是以字节为最小单位来计算的.</p><h4>CPU对存储器的读写</h4><p>CPU要从内存中读数据,首先要指定存储单元的地址.在一台微机中不是只有存储器这一种器件,CPU在读写数据时还要指明,他要对哪一个器件进行操作.进行哪种操作,是读出数据还是写入数据.</p><p>CPU读写数据时的必备条件</p><ol><li>存储单元的地址</li><li>器件的选择,读或写的命令</li><li>读或写的数据</li></ol><h4> 总线</h4><p>电子计算机能处理,传输的信息都是电信号,电信号当然要用导线传送,在计算机中专门有链接CPU和其他芯片的导线,通常称为总线</p><ol><li>地址总线</li><li>控制总线</li><li>数据总线</li></ol><h4>地址总线</h4><p>CPU是通过地址总线来指定存储单元的,可见地址总线能传送多少个不同的信息,CPU就可以对多少个存储单元进行寻址.</p><p>一个CPU有N根地址线,则可以说这个CPU的地址总线的宽度为N.这样CPU最多可以寻找2的N次方个内存单元</p><h4>数据总线</h4><p>数据总线的宽度决定了CPU和外界的数据传送速度.8根数据总线一次课传送一个8位二进制数据(一个字节).16根数据总线一次可传送两个字节</p><h4>控制总线</h4><p>有多少根控制总线,就意味着CPU提供了对外部期间的多少种控制.所以控制总线的宽度决定了CPU对外部器件的控制能力</p><p></p><p><b>总结</b></p><ol><li>汇编指令是机器指令的助记符,统计器指令一一对应</li><li>每一种CPU都有自己的汇编指令集</li><li>CPU可以直接使用的信息在存储器中存放</li><li>在存储其中的指令和数据没有任何区别,都是二进制信息</li><li>存储单元从零开始顺序编号</li><li>一个存储单元可以存储8个bit,即8位二进制数(一个字节)</li><li>每一个CPU芯片都有许多管教,这些管脚和总线相连.也可以说这些管教引出总线.一个CPU可以引出3中总线的宽度标志了这个CPU的不同方面的性能,地址总线的宽度决定了CPU的寻址能力,数据总线的宽度决定了CPU与其他部件进行数据传送石的一次数据传送量.控制总线的宽度决定了CPU对系统中其他期间的控制能力</li></ol><h4>内存地址空间</h4><p>一个CPU的地址总线宽度为10,那么可以寻址1024个内存单元(byte,8bit),这个1024个可寻到的内存单元就构成这个CPU的内存地址空间</p><h4>主板</h4><p>主板上有核心器件和一些主要器件,这些器件通过总线(地址,数据,控制总线)相连.这些器件有CPU,存储器,外围芯片组,扩展插槽.扩展插槽上一般由RAM内存条和各类接口卡</p><h4>接口卡</h4><p>CPU对外部设备不能直接控制.直接控制这些设备进行工作的是插在扩展插槽上的接口卡.扩展插槽通过总线和CPU相连,所以接口卡也通过总线同CPU相连.CPU可以直接控制这些接口卡,从而实现CPU对外设的间接控制.CPU通过总线向接口卡发送命令,接口卡根据CPU的命令控制外设进行工作.</p><h4>各类存储器芯片</h4><p>存储器芯片从物理连接上看是独立的.不同的期间.从读写属性分为随机存储器和只读存储器.随机存储器可读可写,但必须带电存储.关机后存储的内容丢失.只读存储器只能读取不能写入.关机后其中的内容不丢失</p><ol><li>随机存储器,用于存放工CPU使用的大部分程序和数据,主随机存储器一般由两个位置的RAM组成,装在主板上的RAM和插在扩展插槽上的RAM</li><li>装有BIOS的ROM</li><li>接口卡上的RAM某些接口卡上需要对大批量输入,输出数据进行暂时存储,在其上装有RAM最典型的就是显示卡上的RAM,一般称为显存.</li></ol><h4>内存地址空间</h4><p>上述的存储器在物理上是独立的期间.但是都与CPU的总线相连接.CPU对他们进行读或写的时候都通过控制总线发出内存读写命令CPU在操作他们的时候,把他们都当做内存来对待,把他们总的看做一个由若干存储单元组成的逻辑存储器,这个逻辑存储器就是我们所说的内存地址空间</p><h2>寄存器</h2><p>一个CPU是由运算器,控制器,寄存器等期间构成,这些期间靠内部总线相连.</p><ol><li>运算器进行信息处理</li><li>寄存器进行信息存储</li><li>控制器控制各种器件进行工作</li><li>内部总线连接各种器件,在它们之间进行数据的传送</li></ol><p>CPU中的主要部件是寄存器,寄存器是CPU中程序员可以用指令读写的部件.程序员通过改变各种寄存器中的内容来实现对CPU的控制</p><h4>通用寄存器</h4><p>8086CPU的所有紧蹙起都是16位的,可以存放两个字节.AX,BX,CX,DX这四个寄存器通常用来存放一般性的数据,被称为通用寄存器</p><p>8086CPU为了兼容上一代寄存器(8位)所以8086CPU的AX,BX,CX,DX这四个寄存器都可分为两个可独立使用的8位寄存器来用:</p><ol><li>AX可分为AH和AL</li><li>BX可分为BH和BL</li><li>CX可分为CH和CL</li><li>DX可分为DH和DL</li></ol><h4>字在寄存器中的存储</h4><ol><li>字节:记为byte,一个字节有8bit组成,可以存放在8位寄存器中</li><li>字:记为word,一个字由两个字节组成,这两个字节分别称为这个字的高位字节和低位字</li></ol><h4>几条汇编指令</h4><p>mov ax,18 将18送入寄存器AX</p><p>mov ah,78 将78送入寄存器AH</p><p>add ax,8  将寄存器AX的值加上8</p><p>mov ax,bx 将寄存器bx中的数据送入寄存器AX</p><p>add ax,bx 将AX和BX的数值相加,结果存在寄存器AX</p><pre>mov ax,4e20h<br>add ax,1406h<br>mov bx,2000h<br>add ax,bx<br>mov bx,ax<br>add ax,bx<br></pre><p>本来ax中的值为1044ch但是由于ax寄存器为16位,只能保存16位数.所以最高位的1,被舍弃,ax的数据为044ch</p><pre>mov ax,001ah<br>mov bx,0026h<br>add al,bl<br>add ah,bl<br>add bh,al<br>mov ah,0<br>add al,85h<br>add al,93h </pre><p><b style="color:red">注意</b></p><p>在进行数据传送和运算时,要注意指令的两个操作对象的位数应当是一致的</p><h4> 物理地址</h4><p>所有的内存单元构成的存储空间是一个一维的线性空间,每一个内存单元在这个空间中都有唯一的地址,我们将这个唯一的地址称为物理地址.CPU通过地址总线送入村塾琦的,必须是一个内存单元的物理地址</p><h4> 16位结构的CPU</h4><p>16位CPU具有下面几方面的结构特性</p><ol><li>运算器一次最多可以处理16位的数据</li><li>寄存器的最大宽度为16位</li><li>寄存器和运算器之间的通路为16位</li></ol><p>8084是16位结构的CPU,这也就是说,在8086内部,能够一次性处理,传输,暂时存储的信息的最大长度是16位的.内存单元的地址在送上地址总线之前,必须在CPU中处理,传输,暂时存放.</p><h4> 8086CPU给出物理地址的方法</h4><p>8086CPU有20位地址总线,可以传送20位地址,达到1MB寻址能力.8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址</p><ol><li>CPU中的相关部件提供两个16位的地址,一个称谓段地址,一个称为偏移地址</li><li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件</li><li>地址加法器将两个16位的地址合成为一个20位的物理地址</li><li></li><li>地址加法器通过内部总线将20位物理地址送入输入输出控制电路</li><li>输入输出控制电路将20位物理地址送上地址总线</li><li>20位物理地址被地址总线传送到存储器</li></ol><p>地址加法器采用物理地址=段地址x16+偏移地址的方法用段地址和偏移地址合成物理地址</p><h4> 段地址x16(16进制向左移一位)+偏移地址=物理地址的本质</h4><p>在CPU访问内存时,用一个基础地址(段地址x16)和一个相对于基础地址的偏移地址相加给出内存单元的物理地址</p><h4> 段的概念</h4><p>内存并没有分段,段的划分来自于CPU,由于8086CPU用”基础地址(段地址x16)+偏移地址=物理地址”的方式给出内存单元的物理地址,使得我们可以用分段的方式来管理内存.</p><pre>物理地址          段地址   偏移地<br>21F60H        2000H      1F60H<br>                2100H    0F60H<br>                21F0H    0060H<br>                21F6H      0000H<br>                1F00H    2F60H</pre><p><b style="color:red">结论</b></p><ul>    <li>CPU可以用不同的段地址和偏移地址形成同一个物理地址</li>    <li>偏移地址为16位的,变化范围为0-FFFFH,仅用偏移地址来寻址最多可寻64kb的内存单元</li></ul><h4>段寄存器</h4><p>8086CPU在访问内存时,要由相关部件提供内存单元的段地址和偏移地址,送入地址加法器合成物理地址.段地址在8086的段寄存器中存放,8086CPU有4个寄存器CS,DS,SS,ES.</p><h4>CS和IP</h4><p>CS和IP是8086CPU中两个最关键的寄存器,他们指示当前要读取指令的地址.CS魏代码段寄存器,IP魏指令指针寄存器.</p><p><b>任意时刻,CPU将CS:IP指向的内容当做指令执行</b></p><p><b style="color:orange">指令执行的步骤</b></p><ol><li>从CS:IP指向的内存单元读取指令,读取的指令进入指令缓冲器</li><li>IP=IP+所读取指令的长度,从而指向下一条指令</li><li>执行指令</li></ol><p>在8086CPU加电启动或复位后(即CPU刚开始工作时)CS和IP被设置为CS=FFFFH,IP=0000H,即在8086CPU机刚启动时,CPU从内存FFF0H单元中读取指令,FFFF0H单元中的指令是8086CPU开机后的第一条指令</p><h4>修改CS,IP的指令</h4><p>可以通过mov指令来改变AX,BX,CX,DX中的值,mov指令被称为传送指令</p><p>mov指令不能用于设置CS,IP的值.8086CPU为CS,IP提供了另外的指令来改变他们的值.能够改变CS,IP的内容的指令被称为转移指令:<b>jmp指令</b></p><p>若想同时修改CS,IP的内容,可用形如jmp段地址:偏移地址的指令完成</p><p></p><p>jmp 2AE3:3执行后:CS=2AE3H,IP=0003H,CPU将从2AE33H处读取指令</p><p></p><p>jmp段地址:偏移地址指令的功能为:用指令中给出的段地址修改CS,偏移地址修改IP</p><p>若想仅修改IP的内容,可用形如jmp某一合法寄存器的指令完成</p><p>jmp ax,指令执行前:1x=1000H,CS=2000H,IP为0003H.指令执行后:ax=1000H,CS=2000H,IP=1000H</p><p>jmp 某一合法寄存器,指令的功能为:用寄存器中的值修改IP</p><h4> 代码段</h4><p><b style="color:red">如何使代码段中的指令被执行</b>将一段内存当做代码段,仅仅是我们再编程时的一种安排,CPU并不会由于这种安排,就自动地将我们定义的代码段中的指令当做指令来执行.CPU只认被CS:IP指向的内存单元中的内容为指令.所以要让CPU执行我们放在代码段中的指令,必须要将CS:IP指向所定义的代码段的第一条指令的首地址.</p><p><b style="color:red">小结</b></p><ol><li>段地址在8086CPU的段寄存器中存放.当8086CPU要访问内存时,由段寄存器提供内存单元的段地址.8086CPU有4个段寄存器,其中CS用来存放指令的段地址</li><li>CS存放指令的段地址,IP存放指令的偏移地址,8086机中,任意时候,CPU将CS:IP指向的内容当做指令执行</li><li>8086CPU的工作过程</li><ol><li>从CS:IP执行的内存单元读取指令,读取的指令进入指令缓冲器</li><li>IP指向下一条指令</li><li>执行指令</li></ol><li>8086CPU提供转移指令修改CS,IP的内容,jmp段地址:偏移地址:修改CS:IP.jmp 某个合法寄存器:修改IP</li></ol><h2>寄存器(内存访问)</h2><h4> 内存中字的存储</h4><p>CPU中,用16位寄存器来存储一个字,高8位存放高位字节,低8位存放低位字节,在内存中存储时,由于内存单元是字节单元(一个单元存放一个字节),则一个字要用两个地址连续的内存单元来存放,这个字的低位字节存放在低地址单元中,高位字节存放在高地址单元中.</p><h4>进制</h4><p><b>十进制</b></p><p>平时使用的数字都是由0~9共10个数字组成的,一个数字最多能表示9,如果要表示十,十一,二十九,一百等,就需要多个数字组合起来</p><p>因为逢十进一,也因为只有0~9共十个数字,所以被叫做十进制;这时进一位相当于十,进两位相当于二十</p><p>进制也就是进位制.进行加法运算时逢X进一,进行减法运算时借一当X,这就是X进制,这种进制也就包含X个数字,基数为X.十进制有0~9共10个数字,基数为10,在加减法运算中,逢十进一,借一当十</p><p><b>二进制</b></p><p>既然可以用0~9共十个数字表示数值,那么也可以用0,1两个数字表示数值,这就是二进制</p><p>二进制加减法和十进制加减法的思想是类似的:</p><ul><li>对于十进制,进行加法运算时逢十进一,进行减法运算时借一当十</li><li>对于二进制,进行加法运算时逢二进一,进行减法运算时借一当二</li></ul><ol><li>二进制加法:1+0=1,1+1=10,11+10=101,111+111=1110</li><img src="/2019/01/16/汇编/1-1F914100916142.png" title="This is an image"><li>二进制减法:1-0=1,10-1=1,101-11=10,1100-111=101</li><img src="/2019/01/16/汇编/1-1F914104043P9.png" title="This is an image"></ol><p><b>八进制</b></p><p>八进制有0~7共8个数字,基数为8,加法运算时逢八进一,减法运算时借一当八</p><ol><li>八进制加法:3+4=7,5+6=13,75+42=137,2427+567-3216</li><img src="/2019/01/16/汇编/1-1F914144329401.png" title="This is an image"><li>八进制减法:6-4=2,52-27=23,307-141=146,7430-1451=5757</li><img src="/2019/01/16/汇编/1-1F914150Q5A4.png" title="This is an image"></ol><p><b>十六进制</b></p><p>十六进制中,用A表示10,B表示11,C表示12,D表示13,E表示14,F表示15,因此有0~F共有16个数字,基数为16,加法运算时逢16进1,减法运算时借1当16.</p><ol><li>十六进制加法:6+7=D,18+BA=D2,595=792=D27,2F87+F8A=3F11</li><img src="/2019/01/16/汇编/1-1F914153254337.png" title="This is an image"><li>十六进制减法:D-3=A,52-2F=23,E07-141=CC6,7CA0-1CB1=5FEF</li><img src="/2019/01/16/汇编/1-1F91416123IP.png" title="This is an image"></ol><p><b>进制转换</b></p><p><b>将二进制、八进制、十六进制转换为十进制</b></p><p style="color:red">二进制,八进制和十六进制向十进制转换都非常容易,就是”按权相加”.</p><p style="color:black">所谓”权”,也即”位权”</p><p></p><p>假设当前数字是N进制,那么</p><ul><li>对于整数部分,从右往左看,第i位的位权等于N<sup>i-1</sup></li><li>对于小数部分,恰好相反,要从左往右看,第j位的位权为N<sup>-j</sup></li></ul><ol><li><b>整数部分</b></li><p>将八进制数字53627转换成十进制:53627=5x8<sup>4</sup>+3x8<sup>3</sup>+6x8<sup>2</sup>+2x8<sup>1</sup>+7x8<sup>0</sup></p><li><b>小数部分</b></li><p>将八进制数字423.5176转换成十进制:423.5176=4x8<sup>2</sup>+2x8<sup>1</sup>+3x8<sup>0</sup>+5x8<sup>-1</sup>+1x8<sup>-2</sup>+7x8<sup>-3</sup>+6x8<sup>-4</sup></p><p>小数部分和证书部分相反,要从左往右看,第一位的位权为8<sup>-1</sup>=1/8</p></ol><p><b>将十进制转换成二进制,八进制、十六进制</b></p><ol><li>整数部分</li><p>将十进制整数转换为N进制整数采用”除N取余,逆序排列”法.具体做法是</p><ul><li>将N作为除数,用十进制整数除以N,可以得到一个商和余数</li><li>保留余数,用商继续除以N,又得到一个新的商和余数</li><li>仍保留余数,用商继续除以N,还会得到一个新的商和余数</li><li>……</li><li>如此反复进行,每次都保留余数,用商接着除以N,直到商为0时停止</li></ul><p>把先得到的余数作为 N 进制数的低位数字，后得到的余数作为 N 进制数的高位数字，依次排列起来，就得到了 N 进制数字。<img src="/2019/01/16/汇编/1-1F9151J30K46.png" title="This is an image"></p><li>小数部分</li><p>十进制小数转换成N进制小数采用”</p><p style="color:red">乘N取整,顺序排列</p>“法.具体做法如下<p></p><ul><li>用N乘以十进制小数,可以得到一个积,这个积包含了整数部分和小数部分;</li><li>将积的整数部分取出,再用N乘以余下的小数部分,又得到一个新的积;</li><li>再将积的整数部分取出,继续用N乘以余下的小数部分;</li><li>……</li><li>如此反复进行,每次都取出整数部分,用N接着乘以小数部分,直到几种的小数部分为0,或者达到所要求的精度为止</li><p>把取出的整数部分按顺序排列起来，先取出的整数作为 N 进制小数的高位数字，后取出的整数作为低位数字，这样就得到了 N 进制小数。</p>1-1F91Q20520335.png<img src="/2019/01/16/汇编/1-1F91Q20520335.png" title="This is an image"></ul></ol><p>如果一个数字既包含了整数部分又包含了小数部分,那么将整数部分和小数部分分开,分别按照上面的方法完成转换,然后再合并在一起即可</p><p><b style="color:red">注意</b></p><p>十进制小数转换成其他进制小数时,结果有可能是一个无限位的小数</p><p><b>二进制和八进制、十六进制的转换</b></p><p>将二进制转换为八进制和十六进制时就有非常简洁的方法，反之亦然</p><ol><li>二进制整数和八进制整数之间的转换</li><p>二进制整数转换成八进制整数时,每三位二进制数字转换为一位八进制数字,运算的顺序是从低位向高位依次进行,高位不足三位用零补齐</p><img src="/2019/01/16/汇编/1-1F919102I0949.png" title="This is an image"><p>八进制整数转换成二进制数时,思路是相反的,每一位八进制数字转换为三位二进制数字,运算的顺序也是从低位向高位依次进行</p><img src="/2019/01/16/汇编/1-1F919103A2R7.png" title="This is an image"><li>二进制整数和十六进制整数之间的转换</li><p>二进制整数转换为十六进制整数时,每四位二进制数字转换为一位十六进制数字,运算的顺序是从低位向高位依次进行,高位不足四位用零补齐.</p><img src="/2019/01/16/汇编/1-1F919104H9539.png" title="This is an image"><p>十六进制整数转换为二进制整数时,思路是相反的,每一位十六进制数字转换为四位二进制数字,运算顺序也是从低位向高位依次进行</p><img src="/2019/01/16/汇编/1-1F91910553H50.png" title="This is an image"></ol><table><tbody><tr><th>十进制</th><td>0</td><td></td><td>1</td><td></td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td></tr><tr><th>二进制</th><td>0</td><td>1</td><td>10</td><td>11</td><td>100</td><td>101</td><td>110</td><td>111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td><td>10000</td></tr><tr><th>八进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>20</td></tr><tr><th>十六进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td></td><td>F</td><td>10</td></tr></tbody></table><h4>内存存储</h4><p>在内存中存储时,由于内存单元是字节单元(一个单元存放一个字节)则一个字要用两个地址连续的内存单元来存放,这个字的低位字节存放在低地址单元中,高位字节存放在高地址单元中</p><p>字单元:即存放一个字型数据(16位)的内存单元,由两个地址连续的内存单元组成.高地址内存单元中存放字型数据的高位自己,低地址内存单元中存放字型数据的低位字节.</p><h4>DS和[address]</h4><p>CPU要读写一个内存单元的时候,必须给出这个内存单元的地址,在8086CPU中,内存地址有段地址和偏移地址组成.8086CPU中有一个DS寄存器,通常用来存放要访问数据的段地址.</p><pre><br>mov bx,1000h<br>mov ds,bx<br>mov al,[0]</pre><p>详细解释mov al,[0].前面我们使用mov指令完成过两种传送.1,将数据直接传送到寄存器,2将一个寄存器中的内容送入另一个寄存器</p><p>也可以使用mov指令将一个内存单元中的内容送入另一个寄存器中.mov 寄存器名,内存单元地址</p><p>“[…]”标识一个内存单元,”[…]”中的0标识内存单元的偏移地址,我们知道只有偏移地址是不能定位一个内存单元的,那么在指令执行时,8086CPU自动取ds中的数据为内存单元的段地址</p><p><b style="color:red">注意</b></p><p>8086CPU不支持将数据直接送入段寄存器的操作,ds是一段寄存器,所以mv ds,1000h这条指令是非法的.</p><h4>字的传送</h4><p style="color:red">因为8086CPU是16位结构,有16根数据线,所以一次性传送16位的数据,也就是说可以一次性传送一个字.只要在mov指令中给出16位寄存器就可以进行16位数据的传送(简单理解就是如果mov指令后面给的是ax就取2个字节数据给ax,如果是al就读一个字节数据给寄存器的al)</p><h4>mov,add,sub指令</h4><p>常见的mov指令形式:mov ax,8(mov 寄存器 数据),mov ax,bx(mov 寄存器 寄存器),mov ax,<a href="mov 寄存器 内存单元">0</a>,mov [0],bx(mov 内存单元 寄存器),mov ds,ax(mov 段寄存器,寄存器),mov ax,ds(mov 寄存器 段寄存器),mov [0],cs(mov 内存单元 段寄存器),mov ds,[0]</p><p>add和sub指令同mov一样,都有两个操作队形</p><h4>数据段</h4><p><b style="color:red">总结</b></p><ol><li>字在内存中存储时,要用两个地址连续的内存单元存放,字的低位字节存放在低地址单元中,高位字节存放在高地址单元中</li><li>用mov指令访问内存单元,可以再mov指令中只给出单元的偏移地址,此时段地址默认在DS寄存器中</li><li>[address]表示一个偏移地址为address的内存单元.</li><li>在内存和寄存器之间传送字型数据时,高地址单元和高8位寄存器,低地址单元和低8位寄存器相对应</li><li>mov,add,sub是具有两个操作对象的指令,jmp是具有一个操作对象的指令</li><li>可以根据自己的推测,在Debug中实验指令的新格式</li></ol><h4>栈</h4><p>栈的基本操作有入栈和出栈,入栈就是将一个新的元素放到栈顶,出栈就是从栈顶取出一个元素.栈顶的元素总是最后入栈,需要出栈时,又最先被从栈中取出.栈的这种操作规则被称为LIFO</p><h4>CPU提供的栈机制</h4><p>8086CPU提供入栈和出栈指令,最基本的两个是PUSH(入栈)和POP(出栈).比如push ax表示将寄存器ax中的数据送入栈中,pop ax表示从栈顶取出数据送入ax,8086CPU的入栈和出栈操作都是以字为单位进行的</p><p style="color:BLUE">8086CPU中,有两个寄存器,段寄存器SS和寄存器SP,栈顶的段地址存放在SS中,偏移地址存放在SP中,任意时候,SS:SP指向栈顶的元素.push指令和pop指令执行时,CPU从SS和SP中得到栈顶的地址</p><h4>栈顶超界问题</h4><p style="color:red">一句话只能自己在编程的时候要自己操心栈顶超姐的问题,要根据可能用到的醉倒栈空间来安排栈的大小,防止入栈的数据太多而导致的超界;执行出栈操作时也要注意,以防栈空的时候继续出栈而导致的超界</p><h4>push,pop指令</h4><p>push和pop指令是可以再寄存器和内存(栈空间当然也是内存空间的一部分,它只是一段可以以一种特殊的方式进行访问的内存空间.)之间传送数据的</p><p style="text-align:center;color:black"><b>栈的综述</b></p><ol><li>8086CPU提供了栈操作的机制,方案如下.<p>在SS,SP中存放栈顶的段地址和偏移地址;提供入栈和出栈指令,他们根据SS:SP指示的地址,按照栈的方式访问内存单元</p></li><li>push指令的执行步骤:<p>SP=SP-2;<br>向SS:SP指向的字单元中送入数据</p></li><li>pop指令的执行步骤:<p>从SS:SP指向的子单元中读取数据;<br>SP=SP+2</p></li><li>任意时刻,SS:SP指向栈顶元素</li><li>8086CPU只记录栈顶,栈空间的大小我们要自己管理</li><li>用栈来暂存以后需要恢复的寄存器的内容时,寄存器出栈的顺序要和入栈的顺序相反</li><li>push,pop实质上是一种内存传送指令,注意它们的灵活应用</li></ol><h2>第一个程序</h2><h4>一个源程序从写出到执行的过程</h4><p>可执行文件包含两部分内容<ul><li>程序(从源程序中的汇编指令翻译过来的机器码)和数据(源程序中定义的数据)</li><li>相关的描述信息(比如,程序有多大,要占用多少内存空间等)</li></ul></p><p>汇编语言程序从写出到最终执行的简要过程<ol><li>编写汇编源程序</li><li>对源程序进行编译链接</li><li>执行可执行文件中的程序</li></ol></p><h4>源程序</h4><b style="color:black">程序4.1</b><pre>assume cs:codesg<br>code segment<br>mov ax,0123h<br>mov bx,0456h<br>add ax,bx<br>add ax,ax<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end</pre><ol><li style="color:black">伪指令</li><p>在汇编语言源程序中,包含两种指令,一种是汇编指令,一种是伪指令.汇编指令是有对应的机器码的指令,可以被编译魏机器指令,最终为CPU所执行.而伪指令没有对应的机器指令,最终不被CPU所执行.那么谁来执行伪指令呢?伪指令是由编译器来执行的指令,编译器根据伪指令来进行相关的编译工作,程序4.1中出现的3中伪指令:XXX segment,:,XXX ends.segment和ends是一对成对使用的伪指令,这是在写可被编译器编译的汇编程序时,必须要用到的一对伪指令.segment和ends的功能是定义一个段,segment说明一个段的开始,ends说明一个段的结束.一个段必须有一个名称来标识</p><p>伪指令:end,end是一个汇编程序的结束标记,编译器在编译汇编程序的过程中,如果碰到了伪指令end,就结束对源程序的编译.</p><p>assume:这条伪指令的含义为假设,它假设某一段的寄存器和程序中的某一个用segment…ends定义的段相关联.</p><li style="color:black">源程序中的”程序”</li><p>源程序中的汇编指令组成了最终有计算机执行的程序,而源程序中的伪指令由编译器来处理的,这里所说的程序就是指源程序中最终由计算机执行,处理的指令和数据</p><li style="color:black">标号</li><p>汇编源程序中,除了汇编指令和伪指令,还有一些标号,一个标号指代一个地址.比如codesg在segment的前面,作为一个段的名称,这个段的名称最终被编译,链接程序处理为一个段的段地址</p><li style="color:black">程序的结构</li><p>源程序是由一些段构成的我们可以在这些断种存放代码,数据或将某个段当做栈中的空间.</p><li style="color:black">程序返回</li><p>一个程序P2在可执行文件中,则必须有一个正在运行的程序P1,将P2从可执行文件中加载入内存后,将CPU的控制权交给P2,P2才能得以运行.P2开始运行后,P1暂停运行.而当P2运行完毕后,应该将CPU的控制权交还给使它得以运行的程序,我们称这个过程为:程序返回.<pre>mov ax,4c00h<br>int 21h</pre></p><li style="color:black">语法错误和逻辑错误</li></ol><h4>编辑源程序</h4><p>可以用任意的文本编辑器来编辑源程序,只要最终将其存储为.asm即可</p><h4>编译</h4><h4>连接</h4><h4>以简化的方式进行编译和连接</h4><h4>1.exe的执行</h4><h4>谁将可执行文件中的程序装载入内存并使它运行?</h4><p style="text-align:center">操作系统的外壳</p><p>操作系统是由多个功能模块组成的庞大,复杂的软件系统.任何通用的操作系统,都要提供一个称为shell(外壳)的程序,用户(操作人员)使用这个程序来操作计算机系统进行工作</p><p>DOS中有一个程序command.com,这个程序在DOS中称为命令解释器,也就是DOS系统的shell</p><p>DOS启动时,先完成其他重要的初始化工作,然后运行command.com,command.com运行后,执行完其他的相关任务后,在屏幕上显示出由当前盘符和当前路径组成的提示符,然后等待用户输入</p><p>用户可以输入所以执行的命令,比如,cd,dir,type等,这些命令由command执行,command执行完这些命令后,再次显示由当前盘符和当前路径组成的提示符,等待用户的输入</p><p>如果用户要执行一个程序,则输入该程序的可执行文件的名称,command首先根据文件名找到可执行文件,然后将这个可执行文件中的程序加载如内存,设置CS:IP指向程序的入口.此后,command暂停运行,CPU运行程序,程序运行结束后,返回到command中,command再次显示由当前盘符和当前路径组成的提示符,等待用户的输入</p><p>在DOS中,command处理各种输入:命令或要执行的程序的文件名.我们就是通过command来进行工作的</p><ol><li>在DOS中直接执行1.exe时,是正在运行的command,将1.exe中程序加载入内存;</li><li>command设置CPU的CS:IP指向程序的第一条指令(即程序的入口),从而使程序得以运行;</li><li>程序运行结束后,返回到command中,CPU继续运行command</li></ol><p style="text-align:center">汇编程序从写出到执行的过程</p><p>编程-&gt;1.asm-&gt;编译-&gt;1.obj-&gt;连接-&gt;1.exe-&gt;记载-&gt;内存中的程序-&gt;运行</p><h2>第五章[BX]和loop指令</h2><br><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/miku.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":false},"log":false,"pluginJsPath":"lib/","pluginRootPath":"live2dw/","tagMode":false});</script></body>]]></content>
    
    <summary type="html">
    
      
      
        &lt;body&gt;&lt;h1&gt;基础知识&lt;/h1&gt;&lt;h4&gt; 汇编语言的组成&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;汇编指令&lt;/li&gt;&lt;li&gt;伪指令&lt;/li&gt;&lt;li&gt;其他符号:如+,-,*,/等&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt; 存储器&lt;/h4&gt;&lt;p&gt;CPU所需要的指令和数据都在存储器中存放,也就是我们所说的内存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>KVO原理和自定义</title>
    <link href="https://blog.devvk.com/2019/01/07/KVO%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://blog.devvk.com/2019/01/07/KVO原理和自定义/</id>
    <published>2019-01-07T08:38:07.000Z</published>
    <updated>2019-02-13T08:03:51.717Z</updated>
    
    <content type="html"><![CDATA[<h1>KVO的自定义和原理分析</h1><p></p><h2>KVO的触发模式</h2><p></p><p>kvo的触发方式分为<b>手动</b>和<b>自动触发</b></p><br><p>自动触发:</p><br><p>添加观察,实现监听方法</p><br><pre><br>[_p addObserver:self forKeyPath:@”name” options:(NSKeyValueObservingOptionNew) context:nil];<br><br>- (void)observeValueForKeyPath:(NSString <em>)keyPath ofObject:(id)object change:(NSDictionary<nskeyvaluechangekey,id> </nskeyvaluechangekey,id></em>)change context:(void <em>)context {<br>    NSLog(@”%@,%@”,change,_p.name);<br>}<br></em></pre><br><p>手动观察</p><br><p>实现automaticallyNotifiesObserversForKey:(NSString )key 方法,判断key值是否开启手动观察</p><br><pre><br>@implementation Person<br><br>//返回一个bool值,该值指示所观察的对象是否支持对给定的键值自动观察<br>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString <em>)key {<br>    if ([key isEqualToString:@”name”]) {<br>        return NO;<br>    }<br>    return YES;<br>}<br>@end<br><br></em></pre><br><p>当开启手动观察后,如果需要监听值的改变,必须调用willChangeValueForKey:和didChangeValueForKey:</p><br><pre><br> [_p willChangeValueForKey:@”name”];<br> _p.name = [NSString stringWithFormat:@”%d”,a++];<br> [_p didChangeValueForKey:@”name”];<br></pre><br><br><h2>KVO的属性依赖</h2><br><pre><br>@interface Dog : NSObject<br>@property(nonatomic, assign) int age;<br>@property(nonatomic, assign) int level;<br>@end<br><br>@interface Person : NSObject<br>@property(nonatomic, copy) NSString name;<br>@property(nonatomic, strong)Dog <em>dog;<br>@end<br><br>+ (NSSet&lt;NSString </em>&gt; <em>)keyPathsForValuesAffectingValueForKey:(NSString </em>)key {<br>    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];;<br>    if ([key isEqualToString:@”dog”]) {<br>        keyPaths = [[NSSet alloc] initWithObjects:@”_dog.age”,@”_dog._level”, nil];<br>    }<br>    return keyPaths;<br>}<br><br> _p = [[Person alloc] init];<br>[_p addObserver:self forKeyPath:@”dog” options:(NSKeyValueObservingOptionNew) context:nil];<br></pre><br><br><p>当我们需要监听属性的属性的变化,如果只有一个属性可以直接使用keypath,但是如果有多个属性时,我们要么添加多个addObserver,要不就是使用属性依赖</p><p></p><h2>KVO的原理</h2><p></p><ol><li>创建子类NSKVONotyfing_Person</li><li>重写setter方法</li><li>将isa指针指向子类</li><li>保存观察者</li><li>通知观察者,并调用父类的set方法</li></ol><p></p><h2>自定义KVO</h2><p></p><p>我在思考上面的步骤,并在完成时进行了扩展和封装,并取消掉了4和5的部分步骤,而是使用了imp的block的方法,使代码看起来更加简单和清晰</p><br><pre><br>- (void)WQ<em>addObserver:(NSObject <em>)observer forKeyPath:(NSString </em>)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void <em>)context {<br>    //子类名称<br>    NSString </em>className = [[@”WQ” stringByAppendingString:@”KVONotyfing</em>“] stringByAppendingString:NSStringFromClass([self class])];<br>    //创建子类<br>    Class myClass = objc_allocateClassPair([self class], [className UTF8String], 0);<br>    //注册子类<br>    objc_registerClassPair(myClass);<br>    //将keyPath的首字母大写<br>    NSString <em>propertyName = [keyPath capitalizedString];<br>    //完成setter方法名拼接<br>    NSString </em>methodName = [[@”set” stringByAppendingString:propertyName] stringByAppendingString:@”:”];<br>    //获取方法的SEL<br>    SEL methodSel = NSSelectorFromString(methodName);<br>    //添加方法实现<br>    IMP methodImp = imp_implementationWithBlock(^(id self, id value) {<br>    //创建objc_super结构体,结构体有两个成员变量,一个是receiver,一个是super<em>class,reciver是指定类的实例,在本利中就是Person类的实例,但是这个实例对象的类型经过更改isa指针指向时已经变为子类类型(WQ</em> KVONotyfing_ Person),第二个参数是父类,也就是Person类.<br>        struct objc_super * reciver = malloc(sizeof(struct objc_super));<br>        reciver-&gt;receiver = self;<br>        reciver-&gt;super_class = [self superclass];<br>        //调用objc_msgSendSuper,向父类发送消息,第一个参数就是objc_super结构体,第二个参数就是SEL,后面的参数就是sel的参数<br>        objc_msgSendSuper(reciver, methodSel,value);<br>        //判断observer是否存在,如果存在就调用objc_msgSend,告诉观察者,值发生了改变<br>        if (observer) {<br>          objc_msgSend(observer, @selector(observeValueForKeyPath:ofObject:change:context:),keyPath,nil,@{@”new:”:value,@”kind”:@1},context);<br>        }<br>    });<br> //为子类添加setter方法<br> class_addMethod(myClass,methodSel,methodImp,”v@:@”);<br> //将父类的isa指针,指向子类<br> object_setClass(self, myClass);<br>}<br><br></pre><br><p>在我研究的过程中,我本来也是创建了函数来实现setter方法,最后看到IMP的方法可以传入block作为方法实现,如果是使用函数的话,函数默认有两个参数(id self,SEL _cmd).而使用imp的block的话(有一个默认参数id self,去除了SEL _cmd).</p><br><p>还有就是在调用父类的setter方法时,一直调用不了,我也一直在想到底是什么问题,检查了几次代码发现没有问题,然后在其他文件夹中找到了一个Person的分类,重写了setter方法,这个错误也让我明白了,如果分类重写了某个方法,如果一旦调用该方法,会执行分类的方法,而不会再调用类本身的方法(因为这个方法已经失效)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;KVO的自定义和原理分析&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;&lt;h2&gt;KVO的触发模式&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;kvo的触发方式分为&lt;b&gt;手动&lt;/b&gt;和&lt;b&gt;自动触发&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;自动触发:&lt;/p&gt;&lt;br&gt;&lt;p&gt;添加观察,实现监听方法&lt;/p&gt;&lt;br&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="KVO分析" scheme="https://blog.devvk.com/tags/KVO%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CFNetwork</title>
    <link href="https://blog.devvk.com/2018/12/19/CFNetwork/"/>
    <id>https://blog.devvk.com/2018/12/19/CFNetwork/</id>
    <published>2018-12-19T02:13:46.000Z</published>
    <updated>2018-12-19T08:19:37.282Z</updated>
    
    <content type="html"><![CDATA[<h1 style="text-align:center">CFNetwork</h1><h2>引言</h2><p style="text-indent:2em">在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有<a href="https://developer.apple.com/documentation/foundation/nsurlsession" target="_blank" rel="noopener">NSURLSession</a>,&nbsp;<a href="https://developer.apple.com/documentation/foundation/nsurlconnection" title="NSURLConnect在iOS9之后,已经被苹果废弃取而代之的是NSURLSession" target="_blank" rel="noopener">NSURLConnect</a>,和底层的<a href="https://developer.apple.com/documentation/cfnetwork" target="_blank" rel="noopener">CFNetwork</a></p><br><p style="text-indent:2em">在目前我做过的项目中一直在使用<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a>,这个框架在3.0版本时放弃了NSURLConnect,开始采用了苹果推荐的NSURLSession.主要使用提升了网络连接速度,Session采用了共享,而非每次新建.使用共享就是避免每次发送请求时都会进行tcp的三次握手,session共享就是复用这个tcp连接.</p><h2>使用CFNetwork进行网络请求</h2><br><p style="text-indent:2em">CFNetwork是基于C语言实现的一套网络请求框架,所以它的使用难度是比NSURLSession和NSURLConnect大的.示例代码如下</p><br><pre><br>//创建请求URL字符串<br>    NSURL <em>url = [NSURL URLWithString:URLString];<br>//创建HTTP消息<br>    CFHTTPMessageRef request = CFHTTPMessageCreateRequest(kCFAllocatorDefault, CFSTR(“GET”),(<strong>bridge CFURLRef)url, kCFHTTPVersion1_1);<br>//设置请求头content-type<br>    for (id object in self.networkResponseContentType) {<br>        if ([object isKindOfClass: [NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, CFSTR(“Content-type”), (</strong>bridge CFStringRef )object);<br>        }<br>        else {<br>            NSAssert([object isKindOfClass:[NSString class]], @”content-type value must be string”);<br>        }<br>    }<br> //设置请求头<br>    [self.allHttpHeaders enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL </em> _Nonnull stop) {<br>        if ([key isKindOfClass:[NSString class]] &amp;&amp; [obj isKindOfClass:[NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, (<strong>bridge CFStringRef)key, (</strong>bridge CFStringRef )obj);<br>        }<br>        else {<br>            NSAssert([obj isKindOfClass:[NSString class]] &amp;&amp; [key isKindOfClass:[NSString class]], @”http header key and value must be string”);<br>        }<br>    }];<br>   //HTTP返回消息<br>    CFHTTPMessageRef reponse = [self performHTTPRequest:request];<br>    NSData <em>data = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:nil];<br>    CFHTTPMessageSetBody(request, (__bridge CFDataRef)data);<br><br>    CFIndex statusCode;<br>    statusCode = CFHTTPMessageGetResponseStatusCode(reponse);<br>    if (statusCode == 200) {<br>        CFDataRef responseDataRef = CFHTTPMessageCopyBody(reponse);<br>        NSDictionary </em>dic = [NSJSONSerialization JSONObjectWithData:(<strong>bridge NSData <em>)responseDataRef options:NSJSONReadingAllowFragments error:nil];<br>        success(reponse,dic);<br>    }<br>    else {<br>        NSError </em>error = [NSError errorWithDomain:NSCocoaErrorDomain code:statusCode userInfo:@{@”url”:url.absoluteString,@”errorDesc”:(</strong>bridge NSString <em>)CFHTTPMessageCopyResponseStatusLine(reponse)}];<br>        failure(reponse,error);<br><br>    }<br></em></pre><br><p style="text-indemt:2em">下面的方法是接收到数据流后,然后将流数据拼接起来返回</p><br><pre><br>- (CFHTTPMessageRef)performHTTPRequest:(CFHTTPMessageRef)request<br>{<br>//从请求中读取流<br>    CFReadStreamRef requestStream = CFReadStreamCreateForHTTPRequest(NULL, request);<br>//打开流<br>    CFReadStreamOpen(requestStream);<br>//拼接流<br>    NSMutableData responseBytes = [NSMutableData data];<br><br>    CFIndex numBytesRead = 0;<br>    do {<br>        UInt8 buf[1024];<br>        numBytesRead = CFReadStreamRead(requestStream, buf, sizeof(buf));<br><br>        if (numBytesRead &gt; 0) {<br>            [responseBytes appendBytes:buf length:numBytesRead];<br>        }<br>    } while (numBytesRead &gt; 0);<br> //<br>    CFHTTPMessageRef response = (CFHTTPMessageRef) CFReadStreamCopyProperty(requestStream, kCFStreamPropertyHTTPResponseHeader);<br>    CFHTTPMessageSetBody(response, (__bridge CFDataRef)responseBytes);<br><br>    CFReadStreamClose(requestStream);<br>    CFRelease(requestStream);<br><br>    return ((CFHTTPMessageRef) CFAutorelease(response));<br>}<br><br></pre><br><br><h2>CFHTTPMessageRef详解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 style=&quot;text-align:center&quot;&gt;CFNetwork&lt;/h1&gt;

&lt;h2&gt;引言&lt;/h2&gt;

&lt;p style=&quot;text-indent:2em&quot;&gt;在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有&lt;a href=&quot;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c语言操作符</title>
    <link href="https://blog.devvk.com/2018/12/06/c%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://blog.devvk.com/2018/12/06/c语言操作符/</id>
    <published>2018-12-06T02:59:26.000Z</published>
    <updated>2018-12-06T05:18:28.988Z</updated>
    
    <content type="html"><![CDATA[<p>#####操作符</p><ol><li><p>算术操作符</p><p>+,  -,  *,  /,  %<br>除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作符魏整数的情况,返回值不是两个操作符的商而是两数进行整除后的余数.</p></li><li><p>移位操作符<br>(以下都是以8位二进制讨论10010110)<br>分为左移位和右移位,移位操作简单的理解就是将一个值向左或者向右移动指定的位数.</p></li></ol><p>左移位:将指定的数向左移动若干位,但是最左边的几位会被抛弃,右边不足的几位由0补齐.这样又可以形成一个完整的二进制.</p><p>右移位:将指定的数向右移动若干位,但是在右移位当中分为两种情况,一种是逻辑移位,一种是算术移位,逻辑移位是指将指定的数向右移动若干位,左边移入的位用0补齐.然后最右边的会被抛弃.算术移位是指,将指定的数移动若干位,左边移入的位不是用0来补齐而是用符号位来补齐.如果符号位为0就用0补齐,如果是1就用1补齐.</p><p>左移三位:10110000<br>右移三位:逻辑:00010010,算术:11110010</p><p>左移的操作符为&lt;&lt;,右移操作符为&gt;&gt;,左操作数的值将移动右操作数的位数,两个操作数都必须魏整型类型</p><p><strong>警告</strong></p><p>标准说明所有无符号的移位操作都是逻辑移位,但是有符号的移位操作到底是采用逻辑移位还是算术移位取决于编译器.</p><ol><li>位操作符<br>位操作符对他们的操作数的各个位执行AND.OR和XOR等逻辑操作.</li></ol><p>&amp; | ^<br>AND OR XOR</p><p>当两个位进行AND操作时,如果<strong>两个位都是1结果为1</strong>,否则都为0.当两个位进行OR操作时,如果<strong>两个位都是0,结果为0</strong>,否则结果为1.当两个位进行XOR操作时,如果<strong>两个位不同则为1</strong>,否则为0.</p><p>举例:<br>a 为00101110<br>b 为01011011</p><p>a &amp; b = 00001010<br>a | b = 01111111<br>a ^ b = 01110101</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####操作符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;算术操作符&lt;/p&gt;
&lt;p&gt;+,  -,  *,  /,  %&lt;br&gt;除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作
      
    
    </summary>
    
      <category term="C和指针" scheme="https://blog.devvk.com/categories/C%E5%92%8C%E6%8C%87%E9%92%88/"/>
    
    
      <category term="算术操作符" scheme="https://blog.devvk.com/tags/%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="移位操作符" scheme="https://blog.devvk.com/tags/%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="位操作符" scheme="https://blog.devvk.com/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="赋值" scheme="https://blog.devvk.com/tags/%E8%B5%8B%E5%80%BC/"/>
    
      <category term="单目运算" scheme="https://blog.devvk.com/tags/%E5%8D%95%E7%9B%AE%E8%BF%90%E7%AE%97/"/>
    
      <category term="关系操作符" scheme="https://blog.devvk.com/tags/%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逻辑操作符" scheme="https://blog.devvk.com/tags/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="条件操作符" scheme="https://blog.devvk.com/tags/%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逗号操作符" scheme="https://blog.devvk.com/tags/%E9%80%97%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="下标引用,函数调用和结构成员" scheme="https://blog.devvk.com/tags/%E4%B8%8B%E6%A0%87%E5%BC%95%E7%94%A8-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%92%8C%E7%BB%93%E6%9E%84%E6%88%90%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>调试</title>
    <link href="https://blog.devvk.com/2018/12/05/%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.devvk.com/2018/12/05/调试/</id>
    <published>2018-12-05T07:12:00.000Z</published>
    <updated>2019-02-12T03:44:46.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><h5 id="dSYM文件"><a href="#dSYM文件" class="headerlink" title="dSYM文件"></a>dSYM文件</h5><p>调试信息文件</p><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p>断点目前分为swift error ,exception,symbolic,opne gl error,constraint error,Test faliure error.</p><ol><li>异常断点</li></ol><p>首先介绍异常断点(在开发中也被称为全局断点),在代码运行过程中抛出异常后,断点会阻止程序运行,如果不设置异常断点,只看控制台也不知道到底发生了什么.设置了异常断点后,我们经常会看到程序会在抛出异常的瞬间,停止程序.然后在调用栈中我们可以找到导致程序抛出异常的代码.从而帮助我们解决问题,在这里我建议大家在创建完项目后,就打上异常断点,这样在抛出异常的时候就能快速查阅调用堆栈,方便解决问题.</p><ol><li>符号断点</li></ol><p>我们可以设置符号断点,符号可以使方法名,类方法名,c函数的方法名等.(不常用)</p><ol><li>open gl (没用过) </li><li>编辑断点</li></ol><p>我们滚动到需要添加断点的代码时,添加完断点,可以点击鼠标右键选择edit breakpoint,来编辑断点.这个在日常开发中也是很有用的.可以设置condition,来终止程序继续执行,也可以添加action(apple script,sound,shell,log,debug command,GPU frame)等.</p><ol><li>共享断点</li></ol><p>我们可以在断点导航面板,点击断点,然后鼠标右键,然后点击share,就可以将断点保存到工程文件包的xcshareddata中.然后提交到代码版本库中.</p><h5 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h5><p>我们在开发过程中经常会使用po和p来调试</p><p>p主要用来在控制台输出基础数据类型</p><p>po主要用来在控制要输出对象</p><p>还可以使用register read来查看寄存器信息,我们知道使用register关键字申明的变量不是保存在内存上的,而是保存在寄存器上的.所有不能使用取地址符来方法这些变量.因为取地址符是用来访问内存的.</p><p>如果你是一名python的开发者,或者说熟悉python,也可以在控制台输入script来引入python脚本来进行调试</p><h5 id="NSZombieEnabled"><a href="#NSZombieEnabled" class="headerlink" title="NSZombieEnabled"></a>NSZombieEnabled</h5><p>NSZombieEnabled,它会用一个僵尸实现来替换默认的dealloc实现.当引用计数降到0时,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LLDB&quot;&gt;&lt;a href=&quot;#LLDB&quot; class=&quot;headerlink&quot; title=&quot;LLDB&quot;&gt;&lt;/a&gt;LLDB&lt;/h3&gt;&lt;h5 id=&quot;dSYM文件&quot;&gt;&lt;a href=&quot;#dSYM文件&quot; class=&quot;headerlink&quot; title=&quot;dSYM文
      
    
    </summary>
    
    
      <category term="LLDB调试" scheme="https://blog.devvk.com/tags/LLDB%E8%B0%83%E8%AF%95/"/>
    
      <category term="断点" scheme="https://blog.devvk.com/tags/%E6%96%AD%E7%82%B9/"/>
    
      <category term="控制台" scheme="https://blog.devvk.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
      <category term="NSZombieEnabled" scheme="https://blog.devvk.com/tags/NSZombieEnabled/"/>
    
      <category term="崩溃类型" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="断言" scheme="https://blog.devvk.com/tags/%E6%96%AD%E8%A8%80/"/>
    
      <category term="异常" scheme="https://blog.devvk.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="崩溃报告收集" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%94%B6%E9%9B%86/"/>
    
      <category term="第三方崩溃报告服务" scheme="https://blog.devvk.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView/WKWebview</title>
    <link href="https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/"/>
    <id>https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/</id>
    <published>2018-12-04T02:34:26.000Z</published>
    <updated>2018-12-05T07:09:55.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebview-WKWebview"><a href="#UIWebview-WKWebview" class="headerlink" title="UIWebview/WKWebview"></a>UIWebview/WKWebview</h1><h2 id="事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决"><a href="#事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决" class="headerlink" title="事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决."></a>事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决.</h2><p>问题: 本来的项目是使用的UIWebview,但是苹果推荐在iOS8以后希望开发者使用WKWebview,不仅是在内存消耗释放等方面做出了优化,更是在其他性能发面做出了巨大的改变和优化.(具体哪些后面再说),所以在客户提出说要优化webview的加载速度时,首先想到的是将UIWebview替换成WKWebview.不换不知道,一换吓一跳.然后就是我和测试的锅了,没有进行全面的测试,因为有些链接会去下载利用企业证书签名的app.但是在点击时却下载不了,客户那边很着急,然后我连上测试机,打开safari开始调试,发现在js文件的下载方法中进行了判断,会对浏览器的标识进行判断.因为h5页面也不是我们公司写的.所以不能修改,只能自己换回UIWebview.没想到的是UIWebview是可以的.那么UIWeb和WKWeb到底什么地方不同啦?</p><h2 id="UIWebview"><a href="#UIWebview" class="headerlink" title="UIWebview"></a>UIWebview</h2><p>在官方文档中明确指出,当你的apps运行在iOS 8及以后的使用应该使用WKWeb来代替UIWeb.如果你不想呈现可以不运行js文件,可以设置WKPreferences的属性javaScriptEnabled为false.(只需要记住在iOS 8以后尽量使用WKWeb).</p><p>注意点:</p><p>一个iOSapp如果运行在iOS10以后必须在info.plist文件中使用 那些权限的描述key.如果没添加可能会出现crash的情况.例如NSPhotoLibraryUsageDescription 和 NSCameraUsageDescription.</p><p>loadHTMLString(<em>:baseURL:)这个方法被用来loading 本地的html 文件.<br>loadRequest(</em>:)则是用来加载web content<br>stopLoading() 可以停止加载<br>isLoading property可以查看web是否正在加载<br>goback(),可以返回到webpage history,<br>goForward(),可以前进到webpage history<br>canGoBack 和canGoForward属性判断是否可以回退和前进<br>UIDataDetectorTypes:<br>在默认情况下web view自动转换手机号码.当一个phone lonks出现在web conten中.当这个phone linkl 被点击.就会拨打电话.如果想关闭该默认的行为,可以设置dataDetectorTypes.让它不包含phone number flag</p><p>scalesPageToFit设置这个属性可以在web content显示在web view上时,调整大小.用户可以使用手势调整scale</p><p>delegate:代理(UIWebviewDelegate)</p><p>注意点:<br>你不应该将webview或者是tableview对象内嵌到scollview中,如果你这样做了.可能会在造成意想不到的结果</p><p>然后剩下的就是我们调试的问题,可以通过Safari调试webview的内容.</p><p>uiwebview还可有显示其他的内容例如:keynote,pdf,page doct .但是如果要显示富文本尽量使用UITextview</p><p>在iOS6以后,设置restorationIdentifier 属性可以尝试保存url 历史.当缩放和滑动到其他页面时.再恢复期间,驶入将恢复这些值.以便web的内容和之前的一样</p><p>看完文档再看UIWebview的头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UIKIT_EXTERN API_DEPRECATED(&quot;No longer supported; please adopt WKWebView.&quot;, ios(2.0, 12.0)) API_UNAVAILABLE(tvos, macos) @interface UIWebView : UIView &lt;NSCoding, UIScrollViewDelegate&gt;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus 在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line">#define UIKIT_EXTERNextern &quot;C&quot; __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#else</span><br><span class="line">#define UIKIT_EXTERN        extern __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line"></span><br><span class="line">__attribute__设置函数属性(变量,类型)</span><br><span class="line"></span><br><span class="line">visibility属性是否设置将本项目的函数作为库使用时的可见性,g++编译时, 加入-fvisibility=hidden参数, 会将所有默认public属性设为hidden, 导致库外文件不可见</span><br><span class="line">但是如果设置了__attribute__((visibility (&quot;default&quot;)))的函数, 其public属性仍能对外可见, 而不是hidden。可见编译指令 -fvisibility是对所有属性符号进行处理, 而__attribute__((visibility (&quot;default&quot;)))是对特定函数可见性进行设置, 避免冲突</span><br><span class="line"></span><br><span class="line">第二个就是说这个api废弃了.然后说让你使用WKWeb.然后他还是支持从iOS2.0到iOS12</span><br><span class="line">第三个宏定义就是说这个api不支持tvos,macos.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@property (nullable, nonatomic, assign) id &lt;UIWebViewDelegate&gt; delegate;</span><br><span class="line">//通过这个代理方法可以决定是否加在网页中的链接,也可以在该方法中拦截加载和完成与js交互</span><br><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 开始加载</span><br><span class="line">- (void)webViewDidStartLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 加载完成</span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//加载失败出现错误</span><br><span class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//我们创建一个满屏的webview时,发现它是可以拖动的,我们也知道能拖动的view在iOS开发中都是继承或者是内嵌了uiscollview.</span><br><span class="line">//第二点这里声明属性时,使用了只读属性,在我们以后的开发中,外部只是访问属性的值时,也可以参考苹果的这种做法,在.h声明为只读,在.m声明为可读写.这样可以防止外部写入,防止外部修改.</span><br><span class="line">@property (nonatomic, readonly, strong) UIScrollView *scrollView NS_AVAILABLE_IOS(5_0);</span><br><span class="line">//加载web content</span><br><span class="line">- (void)loadRequest:(NSURLRequest *)request;</span><br><span class="line">//加载本地html文件</span><br><span class="line">- (void)loadHTMLString:(NSString *)string baseURL:(nullable NSURL *)baseURL;</span><br><span class="line">//加载其他类型的文件.例如keynote,pdf等</span><br><span class="line">- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;</span><br><span class="line">//当我们在调试webview时,经常会webview.request.url.发现这个url是会变的.所以在uiwebview的内部.当没加载一个新的页面时,这个request会被重新赋值.</span><br><span class="line">@property (nullable, nonatomic, readonly, strong) NSURLRequest *request;</span><br><span class="line">//刷新</span><br><span class="line">- (void)reload;</span><br><span class="line">//停止加载</span><br><span class="line">- (void)stopLoading;</span><br><span class="line">//返回</span><br><span class="line">- (void)goBack;</span><br><span class="line">//前进</span><br><span class="line">- (void)goForward;</span><br><span class="line">//能否后退</span><br><span class="line">@property (nonatomic, readonly, getter=canGoBack) BOOL canGoBack;</span><br><span class="line">//能否前进</span><br><span class="line">@property (nonatomic, readonly, getter=canGoForward) BOOL canGoForward;</span><br><span class="line">//是否正在加载</span><br><span class="line">@property (nonatomic, readonly, getter=isLoading) BOOL loading;</span><br><span class="line">//注入js的方法(交互方法)</span><br><span class="line">- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</span><br><span class="line">//调整页面首次加载时的规模,后期可以通过手势修改比例</span><br><span class="line">@property (nonatomic) BOOL scalesPageToFit;</span><br><span class="line"></span><br><span class="line">//NS_DEPRECATED_IOS(2_0, 3_0),3.0就废弃了,跳过</span><br><span class="line">@property (nonatomic) BOOL detectsPhoneNumbers NS_DEPRECATED_IOS(2_0, 3_0);</span><br><span class="line">//从3.0开始可用(这是就是设置当web content中出现手机号,邮箱等信息时,如果点击这些会自动进行打电话和发邮件等,可以通过设置该属性进行修改)</span><br><span class="line">@property (nonatomic) UIDataDetectorTypes dataDetectorTypes NS_AVAILABLE_IOS(3_0);</span><br><span class="line"></span><br><span class="line">//下面这三个是媒体播放的相关设置</span><br><span class="line">@property (nonatomic) BOOL allowsInlineMediaPlayback NS_AVAILABLE_IOS(4_0); // iPhone Safari defaults to NO. iPad Safari defaults to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackRequiresUserAction NS_AVAILABLE_IOS(4_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay NS_AVAILABLE_IOS(5_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">//增量</span><br><span class="line">@property (nonatomic) BOOL suppressesIncrementalRendering NS_AVAILABLE_IOS(6_0); // iPhone and iPad Safari both default to NO</span><br><span class="line">//键盘的显示设置</span><br><span class="line">@property (nonatomic) BOOL keyboardDisplayRequiresUserAction NS_AVAILABLE_IOS(6_0); // default is YES</span><br><span class="line">//编页码方式</span><br><span class="line">@property (nonatomic) UIWebPaginationMode paginationMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//分页模式</span><br><span class="line">@property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页长</span><br><span class="line">@property (nonatomic) CGFloat pageLength NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页间距</span><br><span class="line">@property (nonatomic) CGFloat gapBetweenPages NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页数</span><br><span class="line">@property (nonatomic, readonly) NSUInteger pageCount NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//图片在媒体中播放</span><br><span class="line">@property (nonatomic) BOOL allowsPictureInPictureMediaPlayback NS_AVAILABLE_IOS(9_0);</span><br><span class="line">//允许链接预览</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL allowsLinkPreview NS_AVAILABLE_IOS(9_0); // default is NO</span><br></pre></td></tr></table></figure><p>头文件也看完了.现在就说一下平时可能遇到的问题.</p><p>1.由于h5页面不只是放在app中的webview,也有可能在多个app中使用,那么怎么区分到底是哪个app的流量带入更大啦.我们可以设置user-agent.可以拼接上每个app的名称来进行区分.还可以进行拦截.比如说你的h5页面有下载,或者是其他需要保证流量正确性的时候,可以判断非该user-agent的不能进行该操作.<br>2.返回退出和进入,内存持续增长.得不到有效释放.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UIWebview-WKWebview&quot;&gt;&lt;a href=&quot;#UIWebview-WKWebview&quot; class=&quot;headerlink&quot; title=&quot;UIWebview/WKWebview&quot;&gt;&lt;/a&gt;UIWebview/WKWebview&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="UIWebview" scheme="https://blog.devvk.com/tags/UIWebview/"/>
    
      <category term="WKWebview" scheme="https://blog.devvk.com/tags/WKWebview/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理三</title>
    <link href="https://blog.devvk.com/2018/10/17/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%89/"/>
    <id>https://blog.devvk.com/2018/10/17/iOS内存管理三/</id>
    <published>2018-10-17T07:34:53.000Z</published>
    <updated>2019-01-29T08:39:40.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-内存管理的思考方式"><a href="#3-1-内存管理的思考方式" class="headerlink" title="3.1 内存管理的思考方式"></a>3.1 内存管理的思考方式</h2><p>自己生成的对象,自己持有<br>非自己生成的对象,自己也能持有<br>不再需要自己持有的对象时释放<br>非自己持有的对象不能释放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-内存管理的思考方式&quot;&gt;&lt;a href=&quot;#3-1-内存管理的思考方式&quot; class=&quot;headerlink&quot; title=&quot;3.1 内存管理的思考方式&quot;&gt;&lt;/a&gt;3.1 内存管理的思考方式&lt;/h2&gt;&lt;p&gt;自己生成的对象,自己持有&lt;br&gt;非自己生成的对象,自
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="内存管理的思考方式" scheme="https://blog.devvk.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/"/>
    
      <category term="所有权修饰符" scheme="https://blog.devvk.com/tags/%E6%89%80%E6%9C%89%E6%9D%83%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
      <category term="规则" scheme="https://blog.devvk.com/tags/%E8%A7%84%E5%88%99/"/>
    
      <category term="属性" scheme="https://blog.devvk.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="数组" scheme="https://blog.devvk.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>rxswift学习(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/rxswift%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.devvk.com/2018/10/12/rxswift学习/</id>
    <published>2018-10-12T06:49:10.000Z</published>
    <updated>2018-10-15T08:17:48.724Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="swift" scheme="https://blog.devvk.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 52个方法</title>
    <link href="https://blog.devvk.com/2018/10/12/52%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.devvk.com/2018/10/12/52个方法/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T06:21:03.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一条-了解Objective-C的语言的起源"><a href="#第一条-了解Objective-C的语言的起源" class="headerlink" title="第一条:了解Objective-C的语言的起源?"></a>第一条:了解Objective-C的语言的起源?</h1><p>Objective-C和C++、Java 等都是面向对象的语言。但是在面向对象的语言中Objective-C采用的是消息结构语言，而其他的面向语言采用的还是函数调用的方式。消息结构语言来自于SmallTalk。</p><p>消息结构和函数调用的区别</p><p>消息结构决定其运行过程中所需要执行的代码由运行时环境决定，而其他面向对象语言则是由编译器决定。我们都知道 OC 是在运行时才会确定对象类型。而调用方法亦是如此，在运行时才回去查找到底该执行哪个方法。而且在 OC 中接收消息的对象可以为 nil 这是其他面向对象语言所不具有的。其他的语言都会先进行判断。</p><p>OC 作为 C 的超集在很多方面还是沿用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一条-了解Objective-C的语言的起源&quot;&gt;&lt;a href=&quot;#第一条-了解Objective-C的语言的起源&quot; class=&quot;headerlink&quot; title=&quot;第一条:了解Objective-C的语言的起源?&quot;&gt;&lt;/a&gt;第一条:了解Objective-
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="52个方法" scheme="https://blog.devvk.com/tags/52%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HomeBrew VS Wegt</title>
    <link href="https://blog.devvk.com/2018/10/12/HomeBrew%E4%B8%8ERuby%E6%9B%B4%E6%96%B0/"/>
    <id>https://blog.devvk.com/2018/10/12/HomeBrew与Ruby更新/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:05:33.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeBrew-与-wegt"><a href="#HomeBrew-与-wegt" class="headerlink" title="HomeBrew 与 wegt"></a>HomeBrew 与 wegt</h1><p>HomeBrew 是一款自由及开放源代码的软件包管理系统,用以简化Mac OS X系统上的软件安装过程.它使用Ruby语言写成,针对Mac OS X操作系统自带的Ruby版本,默认安装在/usr/local下.由一个核心的git版本库构成,以使用户能更新HomeBrew.包管理器使用一种称为”公式”的DSL脚本来管理依赖,下载源代码及配置和编译软件,从源代码中构建软件</p><p>安装需求</p><p>Xcode</p><p>安装方式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><p>相关指令</p><p>搜索:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search 套件名称</span><br></pre></td></tr></table></figure><p>查询套件信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info 套件名称</span><br></pre></td></tr></table></figure><p>安装套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install 套件名称</span><br></pre></td></tr></table></figure><p>查询目前已经安装的套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>更新HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>卸载HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd <span class="string">`brew --prefix`</span></span><br><span class="line">$ rm -rf Cellar$ brew prune</span><br><span class="line">$ rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew</span><br><span class="line">$ rm -rf ~<span class="regexp">/Library/</span>Caches/Homebrew</span><br></pre></td></tr></table></figure><p>wegt 是linux的一个命令用来下载文件的工具<br>我只有在虚拟机上使用过这个命令,主要作用是用来下载文件.比如说做后台的同学想下载tomcat,就可以通过这个来下载,过多的内容接不介绍了</p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>Mac OS X 系统自带了ruby环境,所以我们一般是不需要管理ruby环境的,今天说这个问题是在过年期间我在更新mac系统时出错了缺少系统启动文件,然后我就恢复系统了,知道今天才发现我pod install执行不了,提示ruby的版本过低,而我的pod版本是最新版,所以我就想通过更新ruby来解决问题,但是更新ruby时又发现brew出错了.所以很生气,后果很严重.下载brew,更新ruby,pod就好了<br>卸载和安装上面都有讲述.更新ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade ruby</span><br></pre></td></tr></table></figure><h1 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h1><p>对于iOS开发的同学,使用cocoapods是在所难免的,所以不再过多讲述,网上的文章一搜一大堆.<br><a href="https://www.jianshu.com/p/edd9dbd35576" target="_blank" rel="noopener">pod入门到放弃</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HomeBrew-与-wegt&quot;&gt;&lt;a href=&quot;#HomeBrew-与-wegt&quot; class=&quot;headerlink&quot; title=&quot;HomeBrew 与 wegt&quot;&gt;&lt;/a&gt;HomeBrew 与 wegt&lt;/h1&gt;&lt;p&gt;HomeBrew 是一款自由及开放源
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="HomeBrew" scheme="https://blog.devvk.com/tags/HomeBrew/"/>
    
      <category term="wegt" scheme="https://blog.devvk.com/tags/wegt/"/>
    
  </entry>
  
  <entry>
    <title>HTTP/DNS解析与DNS劫持</title>
    <link href="https://blog.devvk.com/2018/10/12/HTTP-DNS%E8%A7%A3%E6%9E%90-DNS%E5%8A%AB%E6%8C%81/"/>
    <id>https://blog.devvk.com/2018/10/12/HTTP-DNS解析-DNS劫持/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:06:41.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-DNS解析-DNS劫持"><a href="#HTTP-DNS解析-DNS劫持" class="headerlink" title="HTTP/DNS解析/DNS劫持"></a>HTTP/DNS解析/DNS劫持</h1><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>HTTP全名超文本传输协议，是一种用于分布式，协作式的超媒体信息系统的应用层协议。</p><p>HTTP请求行：请求地址和协议版本</p><p>HTTP请求头：</p><p>请求头中包含：Accept(能够接受的回应内容类型)，Accept-Charset(能够接受的字符集)，Cache-Control(缓存机制)，Connenct(连接类型)，Cookie，Content-Length(请求体的长度)，Content-Type（请求体的多媒体类型），Host(端口)等</p><p>HTTP请求体：</p><ul><li>任意类型：服务器不会解析请求体，请求体的处理需要后台同学自己处理解析</li><li>application/json 使得请求体结构化，序列化可以方便提交复杂的数据结构，也适合在调试接口阶段进行抓包等行为。</li><li>text/xml：以XML的方式提交，因为XML支持各种语言使用广泛。但是XML相对于JSON较为臃肿。目前大多数场景都是使用JSON提交</li><li>表单提交：application/x-www-form-urlencoded，使得参数必须以键值对的形式并用&amp;链接。</li><li>文件提交：multipart/form-data 在上传图片时或者其他类型文件时，都是将文件分成多个部分。每一个部分都是以boundary分割</li></ul><p>HTTP请求方法：</p><ul><li>POST 向指定资源提交数据，数据放在请求本文中，这个请求可以修改现有资源也可以创建新资源</li><li>GET  获取指定资源，使用GET请求只用于读取数据。</li><li>HEAD 向服务器放出指定资源的请求(目前我还没用到)</li><li>DELETE 删除服务器上Request-URL标记的资源</li><li>PUT 向服务器指定资源位置上传最新内容</li><li>TRACE (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li><li>OPTIONS (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li><li>CONNECT (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li></ul><p>HTTP请求过程：<br>当我们手机，pc等网络设备请求<a href="www.baidu.com">百度</a>的域名时分为三步：</p><h5 id="1-请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址"><a href="#1-请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址" class="headerlink" title="1.请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址"></a>1.请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址</h5><h5 id="2-根据IP地址查找对应的服务器，向服务器发起一个HTTP请求"><a href="#2-根据IP地址查找对应的服务器，向服务器发起一个HTTP请求" class="headerlink" title="2.根据IP地址查找对应的服务器，向服务器发起一个HTTP请求"></a>2.根据IP地址查找对应的服务器，向服务器发起一个HTTP请求</h5><h5 id="3-服务器收到请求后，将所需资源包装后原路返回给网络设备"><a href="#3-服务器收到请求后，将所需资源包装后原路返回给网络设备" class="headerlink" title="3.服务器收到请求后，将所需资源包装后原路返回给网络设备"></a>3.服务器收到请求后，将所需资源包装后原路返回给网络设备</h5><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>就在前一段时间我刚自己买了一个VPS服务器，然后自己买了域名，目的就是为了搭建属于自己的博客，买完服务器后，服务器有对应的IP地址，我为了使用我买的域名访问我的博客，我就必须将服务器的IP和域名进行映射(DNS解析)</p><p>DNS解析：就是讲域名指向网站空间的IP上，让用户可以通过域名访问到网站的一种服务。域名解析就是域名到IP地址的转换过程。这个过程由DNS服务器完成。</p><p>DNS解析的过程：</p><h5 id="1-用户主机上运行着DNS的客户端"><a href="#1-用户主机上运行着DNS的客户端" class="headerlink" title="1.用户主机上运行着DNS的客户端"></a>1.用户主机上运行着DNS的客户端</h5><h5 id="2-浏览器将输入的URL中抽出域名字段"><a href="#2-浏览器将输入的URL中抽出域名字段" class="headerlink" title="2.浏览器将输入的URL中抽出域名字段"></a>2.浏览器将输入的URL中抽出域名字段</h5><h5 id="3-DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。"><a href="#3-DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。" class="headerlink" title="3.DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。"></a>3.DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。</h5><h5 id="4-DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。"><a href="#4-DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。" class="headerlink" title="4.DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。"></a>4.DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。</h5><h5 id="5-DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址"><a href="#5-DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址" class="headerlink" title="5.DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址"></a>5.DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址</h5><h5 id="6-浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。"><a href="#6-浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。" class="headerlink" title="6.浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。"></a>6.浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。</h5><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><p>在发生请求时，当运营商收到用户主机请求后，获取到域名，然后通过DNS服务器进行解析，在解析的过程中可能DNS服务器受到第三方攻击。就是第三方攻击解析服务器，使得服务器无法正常解析，然后修改解析后的IP地址指向一个虚假的服务器。如图所示<br><img src="/2018/10/12/HTTP-DNS解析-DNS劫持/http.png" title="This is an image"></p><p>解决办法：可以使用自己的解析服务器自行解析，或者在APP内部使用解析好的域名以IP的形式访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-DNS解析-DNS劫持&quot;&gt;&lt;a href=&quot;#HTTP-DNS解析-DNS劫持&quot; class=&quot;headerlink&quot; title=&quot;HTTP/DNS解析/DNS劫持&quot;&gt;&lt;/a&gt;HTTP/DNS解析/DNS劫持&lt;/h1&gt;&lt;h2 id=&quot;HTTP请求&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="网络基础" scheme="https://blog.devvk.com/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="HTTP/DNS解析" scheme="https://blog.devvk.com/tags/HTTP-DNS%E8%A7%A3%E6%9E%90/"/>
    
      <category term="DNS劫持" scheme="https://blog.devvk.com/tags/DNS%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>细说IBoutlet</title>
    <link href="https://blog.devvk.com/2018/10/12/IBoutlet%E6%9D%82%E8%B0%88/"/>
    <id>https://blog.devvk.com/2018/10/12/IBoutlet杂谈/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:07:18.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="细说IBoutlet"><a href="#细说IBoutlet" class="headerlink" title="细说IBoutlet"></a>细说IBoutlet</h1><p>当我们在XIb文件或者SB文件中添加空间后,需要与对应属性关联时就会产生</p><pre><code>@property(nonatomic,weak) IBoutlet UIbutton *button</code></pre><p>那么 IBoutlet到底有什么作用啦.<br>首先IBoutlet不是系统关键字,只是位于系统头文件中的一组预处理命令</p><pre><code>#ifdef IBoutlet#define IBoutlet#endif</code></pre><p>对于编译器来说,它没有任何作用.它只是告诉Xcode,它和Xib文件中的对象关联.</p><p>在古老的OC语言中.我们声明属性是,都需要声明相对应的实例变量</p><pre><code>@interface ViewController : UIViewController {    IBoutlet UIbutton *button;}@property(nonatomic,weak) IBoutlet UIbutton *button;@end</code></pre><p>那为什么要这么做,因为当时采用GCC的编译器.最后苹果开发出了自己的编译器LLVM.在声明属性时,就不需要声明实例变量了.因为LLVM在编译过程中如果没有找到对应属性的实例变量,会自己创建.所以就不需要声明了.就将IBoutlet迁移到了属性声明上.区别于自己声明的属性和与XIB文件中对象关联的属性.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;细说IBoutlet&quot;&gt;&lt;a href=&quot;#细说IBoutlet&quot; class=&quot;headerlink&quot; title=&quot;细说IBoutlet&quot;&gt;&lt;/a&gt;细说IBoutlet&lt;/h1&gt;&lt;p&gt;当我们在XIb文件或者SB文件中添加空间后,需要与对应属性关联时就会产生&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="IBoutlet" scheme="https://blog.devvk.com/tags/IBoutlet/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C对象的构造模式</title>
    <link href="https://blog.devvk.com/2018/10/12/Objective-C%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.devvk.com/2018/10/12/Objective-C的对象构造模式/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:46:44.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈对象的构造模式"><a href="#谈对象的构造模式" class="headerlink" title="谈对象的构造模式"></a>谈对象的构造模式</h1><p>Objective-C语言在创建对象的时候需要先调用alloc,然后实例对象调用init方法完成初始化.</p><h1 id="alloc究竟干了什么"><a href="#alloc究竟干了什么" class="headerlink" title="alloc究竟干了什么"></a>alloc究竟干了什么</h1><p>为了能够看到alloc到底干了什么,我们可以下载GNUStep开源的libs-base工程然后找到NSObject.m文件.<br>为什么用GNUStep来查看源码?</p><p>GNUstep，GNU计划的项目之一。它将Cocoa（前身为NeXT的OpenStep）Objective-C软件库，部件工具箱（widget toolkits）以及其上的应用软件，以自由软件方式重新实现。它能够运行在类Unix操作系统上，也能运作在Microsoft Windows上。<a href="https://zh.wikipedia.org/wiki/GNUstep" target="_blank" rel="noopener">GNUStep</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (id) alloc</span><br><span class="line">&#123;</span><br><span class="line">  return [self allocWithZone: NSDefaultMallocZone()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它调用了allocWithZone方法,具体作用就是给当前创建的实例对象开辟内存空间.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSZone*</span><br><span class="line">NSDefaultMallocZone (void)</span><br><span class="line">&#123;</span><br><span class="line">  return &amp;default_zone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道oc对象的本质其实就是结构体,在开辟内存空间函数内部,他会遍历当前结构体的所有成员变量,然后根据成员变量的数据类型计算内存大小.</p><p>当alloc函数调用完成后会返回一个未初始化的实例,在这里cocoa不仅为这个实例申请了足够大的内存空间还做了以下几件事:<br>1.将该对象的引用计数加1<br>2.将该对象的isa指针指向类<br>3.为成员变量初始化值nil/0</p><h1 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h1><p>init方法是该对象的初始化方法,目的是初始化该对象的成员变量.</p><h1 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h1><p>类方法new的出现是苹果对java等程序员的照顾,而new方法的内部和调用alloc、init是一致的。可以从GNUStep的源代码中得出结论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (id) new</span><br><span class="line">&#123;</span><br><span class="line">  return [[self alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>alloc和init的定位不同：</p><p><strong>alloc旨在为实例对象在虚拟内存上申请足够大的内存空间。而且将对象的retainCount+1.帮助系统完成内存管理。将isa指针指向该类，是为了在运行时环境中完成对该类的检查。</strong></p><p><strong>init方法旨在完成该对象成员变量的初始化。在内存方面并没有什么处理。</strong></p><p>这样设计的结果可以使苹果开发者更加清晰的了解这两个函数的作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谈对象的构造模式&quot;&gt;&lt;a href=&quot;#谈对象的构造模式&quot; class=&quot;headerlink&quot; title=&quot;谈对象的构造模式&quot;&gt;&lt;/a&gt;谈对象的构造模式&lt;/h1&gt;&lt;p&gt;Objective-C语言在创建对象的时候需要先调用alloc,然后实例对象调用init方法
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="alloc" scheme="https://blog.devvk.com/tags/alloc/"/>
    
      <category term="构造模式" scheme="https://blog.devvk.com/tags/%E6%9E%84%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="init" scheme="https://blog.devvk.com/tags/init/"/>
    
      <category term="设计原则" scheme="https://blog.devvk.com/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
      <category term="new" scheme="https://blog.devvk.com/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>React(三)</title>
    <link href="https://blog.devvk.com/2018/10/12/React%E7%AC%AC%E4%B8%89%E8%AF%BE/"/>
    <id>https://blog.devvk.com/2018/10/12/React第三课/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:14:43.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数组件和类定义组件"><a href="#函数组件和类定义组件" class="headerlink" title="函数组件和类定义组件"></a>函数组件和类定义组件</h1><p>组件:在react和react-native中通常会把可复用的部件封装起来,构建成一个单独的组件.<br>组件从概念上看上去就像一个函数,他可以接收任意输入的值称之为(props)属性.并返回一个需要在页面上显示的React元素</p><ul><li>函数定义组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Student(props) &#123;</span><br><span class="line">return &lt;h1&gt;hello, &#123;props.name&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&lt;Student name = &quot;vicky&quot;/&gt;</span><br><span class="line">&lt;/span&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的函数就是一个有效的React组件,它接收一个props的对象参数,并返回一个有效的React元素.我们称之为函数定义组件</p><ul><li>类定义组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Student extends React.Component &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return &lt;h1&gt;hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&lt;Student name = &quot;weiqi&quot;/&gt;</span><br><span class="line">&lt;/span&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>看到Class这个关键字,我们很清楚的知道这个是一个类,不论是在java,oc,还是swift他都指代一个类.所以我们通过创建一个类来完成定义在类的render()函数中返回一个React元素,然后将元素添加到界面上显示.在render函数中我们看到了this.props.name,this代表是这个类本身.而props是这个类的属性,那么是具体属性的名称.</p><p>以一个上边为图片下边为文字的button来用oc的语言特征进行解释解释(强行扯上关系):比如封装一个上图下文的button</p><ul><li>函数形式:</li></ul><p>我们可以通过在需要用到的地方以函数的形式构建,然后通过函数返回值返回需要的结果,添加到页面上显示代码在这里就不写了,没什么技术含量.</p><ul><li>类形式</li></ul><p>创建一个继承自UIbutton的子类,然后在init方法中构建自己需要的页面样式.在需要使用的地方初始化,加载.</p><p>上面我举的是一个很微不足道的例子,只是为了做解释说明,方便大家记忆理解,同时也是为了方便我记忆理解.可能让你单独记忆这个概念,可能记不住,但是你一旦把他和你的生活上经常干的事扯上关系,那就不算记忆,只是做一些扩展而已.就变得简单多了.</p><h1 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h1><p>从上面的函数定义组件分析组件渲染:</p><ul><li>组件<student name="vicky"> 元素调用的ReactDom的render函数</student></li><li>React将{name:”vicky”}作为Student的props传递给了Student组件</li><li>在Student组件将函数结果返回.</li><li>ReactDom将Dom更新为组件返回的结果</li></ul><p>介绍俩个概念:</p><ul><li>Dom标签:我们前面使用过的在ReactDom.render函数中直接使用的<h1>标签,作为React的元素</h1></li><li>自定义组件:通过函数或类来自定义的组件</li></ul><h1 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Student extends React.Component &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return &lt;h1&gt;hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class App extends  React.Component &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Student name = &quot;vicky&quot;/&gt;</span><br><span class="line">&lt;Student name = &quot;张三&quot;/&gt;</span><br><span class="line">&lt;Student name = &quot;李四&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&lt;App /&gt;</span><br><span class="line">&lt;/span&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>理解:就是在一个组件内部可已使用另外的一个组件.工程中中就是在一个自定义的子视图中使用另外的一个自定义子视图控件</p><p>重点:一个新的React程序的顶部一般都是App组件,如果要讲React集成到现有的应用程序中,则可以从下而上使用小组件作为开始,然后逐渐向顶层扩展.</p><p>警告:组件的返回值只能有一个根元素.</p><h1 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Comment(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;Comment&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;UserInfo&quot;&gt;</span><br><span class="line">        &lt;img className=&quot;Avatar&quot;</span><br><span class="line">          src=&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt=&#123;props.author.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div className=&quot;UserInfo-name&quot;&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=&quot;Comment-text&quot;&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=&quot;Comment-date&quot;&gt;</span><br><span class="line">        &#123;formatDate(props.date)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到上面的代码有什么感受,好多div啊,而且嵌套了好多层啊.现在让我们一起讲上面的代码进行提取组件,然后使代码变得清晰.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">function Avatar(props) &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;img className=&quot;Avatar&quot; </span><br><span class="line"> src=&#123;props.author.url&#125;</span><br><span class="line"> alt=&#123;props.author.name&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function UserInfo(props) &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;UserInfU&quot;&gt;</span><br><span class="line">&#123;props.author.name&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function CommentText(props) &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;Comment-text&quot;&gt;</span><br><span class="line">&#123;props.text&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function CommentDate(props) &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;Comment-date&quot;&gt;</span><br><span class="line">&#123;formatDate(props.date)&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Comment(props) &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;Comment&quot;&gt;</span><br><span class="line">&lt;div className=&quot;UserInfo&quot;&gt;</span><br><span class="line">&lt;Avatar user = &#123;props.author&#125; /&gt;</span><br><span class="line">&lt;UserInfo user = &#123;props.author&#125;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;CommentText text = &#123;props.text&#125;/&gt;</span><br><span class="line">&lt;CommentDate date = &#123;props.date&#125;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拆解之后有什么好处:</p><p>1.代码的可读性较高</p><p>2.拆解出来的组件可以进行复用</p><p>3.可以分别拆解到不同的文件,减少单独文件的代码量</p><h1 id="props属性和只读属性"><a href="#props属性和只读属性" class="headerlink" title="props属性和只读属性"></a>props属性和只读属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum(a,b) &#123;</span><br><span class="line"> return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数并没有修改输入值得本身,当传入值相同时结果是相同的<br>这种函数较重纯函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(account, amount) &#123;</span><br><span class="line">  account.total -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数对它自身输入的值进行了-=操作,输入值本身发生了变化.</p><p>##重点:所有的React组件必须(必须)(必须)像纯函数那样使用它们的props</p><h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><p>初级类定义:刚开始学就这样了,后面学习到了慢慢改进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">//首先引入React和PropTypes</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line"></span><br><span class="line">//开始定义Student类</span><br><span class="line"></span><br><span class="line">class Student extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;</span><br><span class="line">            name,</span><br><span class="line">            age,</span><br><span class="line">            star,</span><br><span class="line">            sex,</span><br><span class="line">            phone,</span><br><span class="line">            account,</span><br><span class="line">            headImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; = this.props;</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    name:&#123;name&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                   age: &#123;age&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    star:&#123;star&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    sex:&#123;sex&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                   phone: &#123;phone&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    account:&#123;account&#125;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">                &lt;img src= &#123;headImage&#125;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//到底我们需要哪些属性啦?按需求来定</span><br><span class="line"></span><br><span class="line">Student.defaultProps = &#123;</span><br><span class="line">    name: &quot;vicky&quot;,</span><br><span class="line">    age: 25,</span><br><span class="line">    star: &quot;摩羯座&quot;,</span><br><span class="line">    sex: 1, //1:男性,2:女性,3:未知</span><br><span class="line">    phone: 119110120,</span><br><span class="line">    account: 513961360,</span><br><span class="line">    headImage:&quot;https://www.baidu.com/img/bd_logo1.png&quot;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//检查数据类型,如果数据类型不匹配会进行报错提醒</span><br><span class="line">Student.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">    age: PropTypes.number.isRequired,</span><br><span class="line">    star: PropTypes.string.isRequired,</span><br><span class="line">    sex: PropTypes.number.isRequired,</span><br><span class="line">    phone: PropTypes.number.isRequired,</span><br><span class="line">    account: PropTypes.number.isRequired,</span><br><span class="line">    headImage: PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//export  default Student;</span><br></pre></td></tr></table></figure><p>然后在index.js引入文件并渲染组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line"></span><br><span class="line">&lt;Student name=&quot;李四&quot; age=&quot;56&quot; star=&quot;白羊&quot; sex=&quot;2&quot; phone=&quot;122222222&quot; account=&quot;2222222&quot; headImag=&quot;https://www.baidu.com/img/bd_logo1.png&quot;/&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后运行发现报错了<br>报错大概是这样的 export default was not found ./Stundet到底什么意思啦就是在类定义组件并且分文件之后要将自己暴露出来,在类定义的最后一行引入这行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export  default Student;</span><br></pre></td></tr></table></figure><p>然后在运行发现还有报错:<br>这次就不展示什么报错了,就是类型检查报错,因为我们声明了很多属性的类型为number类型,但是我们用string赋值肯定会报错的.</p><p>修改完后的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line"></span><br><span class="line">&lt;Student name=&quot;李四&quot; age=&#123;56&#125; star=&quot;白羊&quot; sex=&#123;2&#125; phone=&#123;122222222&#125; account=&#123;2222222&#125; headImag=&quot;https://www.baidu.com/img/bd_logo1.png&quot;/&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>报错是消失了,但是图片和名字还是没有显示,原来是属性名写错了,sorry低级失误.</p><ul><li>添加属性的方法</li></ul><p>可以再使用组件时直接添加,例如<student name="张三">,然后在组件内部return是用this.props.name来获取属性值</student></p><ul><li>添加属性默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student.defaultProps = &#123;</span><br><span class="line">    name: &quot;vicky&quot;,</span><br><span class="line">    age: 25,</span><br><span class="line">    star: &quot;摩羯座&quot;,</span><br><span class="line">    sex: 1, //1:男性,2:女性,3:未知</span><br><span class="line">    phone: 119110120,</span><br><span class="line">    account: 513961360,</span><br><span class="line">    headImage:&quot;https://www.baidu.com/img/bd_logo1.png&quot;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查数据类型,如果数据类型不匹配会进行报错提醒</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Student.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">    age: PropTypes.number.isRequired,</span><br><span class="line">    star: PropTypes.string.isRequired,</span><br><span class="line">    sex: PropTypes.number.isRequired,</span><br><span class="line">    phone: PropTypes.number.isRequired,</span><br><span class="line">    account: PropTypes.number.isRequired,</span><br><span class="line">    headImage: PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>render函数的使用属性的多种方法,常见的就是this.props.name这种,还有在一些人的代码中经常会看到这样的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">            name,</span><br><span class="line">            age,</span><br><span class="line">            star,</span><br><span class="line">            sex,</span><br><span class="line">            phone,</span><br><span class="line">            account,</span><br><span class="line">            headImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; = this.props;</span><br></pre></td></tr></table></figure><p>简化赋值操作.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数组件和类定义组件&quot;&gt;&lt;a href=&quot;#函数组件和类定义组件&quot; class=&quot;headerlink&quot; title=&quot;函数组件和类定义组件&quot;&gt;&lt;/a&gt;函数组件和类定义组件&lt;/h1&gt;&lt;p&gt;组件:在react和react-native中通常会把可复用的部件封装起来,
      
    
    </summary>
    
      <category term="react" scheme="https://blog.devvk.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Objective-C视频学习资源</title>
    <link href="https://blog.devvk.com/2018/10/12/Objective-C%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%92%8C%E5%A4%A7%E7%A5%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.devvk.com/2018/10/12/Objective-C学习资源和大神博客/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:13:22.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C视频学习资源"><a href="#Objective-C视频学习资源" class="headerlink" title="Objective-C视频学习资源"></a>Objective-C视频学习资源</h1><p>因为iOS的开发者Objective-C和Swift不分家，所以下面的有关资源既包含Swift资源又包含Objective-C 资源，博主并没有细分内容还请各位看官见谅。</p><h3 id="视频教程-英文"><a href="#视频教程-英文" class="headerlink" title="视频教程(英文)"></a>视频教程(英文)</h3><ul><li><a href="https://www.lynda.com/search?q=ios" target="_blank" rel="noopener">Lynda</a> Lynda上面iOS和Objective-C的学习资料比较丰富，从初级到高级都涉及，无论你目前处于什么层次，都有你适合的视频教学。</li><li><a href="https://www.udemy.com/courses/development/mobile-apps/learn-objective-c/all-courses/" target="_blank" rel="noopener">Udemy</a> Udemy帮助初学者规划视频学习路线，从新手到高级分的很详尽。</li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li><a href="https://www.amazon.com/dp/032194206X/ref=cm_sw_r_tw_dp_fWrPub0BGRHJ3" target="_blank" rel="noopener">Objective-C Programming</a> 内容不多, 却都是精华, 有了一点 C 语言基础可以快速阅读此书, 大概一天时间就可以看完, 看完后对 iOS 开发能够有个基本的印象。</li><li><a href="https://book.douban.com/subject/24538384/" target="_blank" rel="noopener">iOS Programming</a> 这本书在 Quora 上被评为 iOS 入门最佳书籍, 具体评价可见豆瓣下方该书籍的评论</li><li><a href="https://book.douban.com/subject/3688896/" target="_blank" rel="noopener">Cocoa Design Patterns</a> 适合打算深入了解 Cocoa 的人看</li><li><a href="http://cocoadevcentral.com/d/learn_objectivec/" target="_blank" rel="noopener">Learn Objective-C</a> 短小精练, 适合有编程基础的人在半小时内对 Objective-C 有个一定了解</li><li><a href="https://www.amazon.cn/dp/B00COG40Y0/ref=cm_sw_r_qz_2_dp_l2OPub0N45R0Q" target="_blank" rel="noopener">Objective-C 基础教程</a> 该书作者 Scott Knaster 是 Mac 开发界的传奇人物, 目前在 Google 出过多数书籍都广受许多程序员好评, 此书适合从初级跳到中级的 iOS 开发者阅读</li><li><a href="https://www.amazon.cn/dp/B00R43XG9S/ref=cm_sw_r_qz_pi_T2A_jdp_fCPPub0VBF67T" target="_blank" rel="noopener">iOS 开发进阶</a> 该书作者唐巧是国内 iOS 开发界的名人, 曾参与多个知名软件的开发, 目前该书作者已经不再推荐本书，因为内容已经比较老了，但是在学习的过程中还是可以翻阅一下的, 书本内容由浅入深, 将读者一步一步引入到 iOS 中去, 同样适合初级跳到中级的 iOS 开发者阅读</li><li><a href="https://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/0321967607" target="_blank" rel="noopener">Programming in Objective-C</a>  Programming in Objective-C   这本书在亚马逊上面深受欢迎, 有关 Objective-C 的东西讲得非常详细</li><li><a href="https://www.amazon.cn/dp/B00JPVNFKM/ref=cm_sw_r_qz_4_dp_tdPPub14X59PV" target="_blank" rel="noopener">iOS 测试指南</a> 该书作者是豆瓣的员工, 书中写的多数内容都是作者在平时的工作实践当中提炼出来的测试经验, 重点讲述了各个测试阶段的具体实践方法, 并且通过持续集成串联了各个测试阶段的活动。</li><li><a href="https://book.douban.com/subject/6920082/" target="_blank" rel="noopener">Objective-C 编程之道</a> 解析 iOS 的开山之作, 详细介绍了 MVC 在 Cocoa Touch 上的运作过程, 该书适用于 iOS 中级开发者阅读</li><li><a href="https://www.amazon.cn/dp/B00DE60G3S/ref=cm_sw_r_qz_2_dp_hdPPub11MFE6G" target="_blank" rel="noopener">Objective-C 高级编程</a> 本书主要介绍 iOS 与 OS X 多线程和内存管理, 深入破析了苹果官方公布的源代码, 告诉你一些苹果公司官方文档中不会出现的知识, 适合中级以上 iOS 开发人员阅读</li><li><a href="https://www.amazon.cn/dp/B00IDSGY06/ref=cm_sw_r_qz_2_dp_A2OPub0CH96YH" target="_blank" rel="noopener">Effective Objective C 2.0</a> 书里写了编写高质量 iOS 与 OS X 代码的 52 个有效方法, 适合 iOS 开发的进阶使用</li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html" target="_blank" rel="noopener">The Swift Programming Language 中文版</a> 学习Swift基础的中文文档，目前更新到Swift3.0文档</li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="https://onevcat.com/#blog" target="_blank" rel="noopener">OneV’s Den</a></li><li><a href="http://blog.devtang.com/" target="_blank" rel="noopener">唐巧的技术博客</a></li><li><a href="https://blog.ibireme.com" target="_blank" rel="noopener">ibireme</a></li><li><a href="http://blog.cnbang.net" target="_blank" rel="noopener">bang</a></li><li><a href="http://blog.sunnyxx.com" target="_blank" rel="noopener">孙源的技术博客</a></li><li><a href="http://beyondvincent.com/" target="_blank" rel="noopener">破船之家</a></li><li><a href="http://nshipster.cn/" target="_blank" rel="noopener">NSHipster</a></li><li><a href="http://limboy.me/" target="_blank" rel="noopener">Limboy 无网不剩</a></li><li><a href="http://zhowkev.in/" target="_blank" rel="noopener">Kevin Blog</a></li><li><a href="https://imtx.me/" target="_blank" rel="noopener">IMTX</a></li><li><a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰</a></li><li><a href="http://www.iosxxx.com" target="_blank" rel="noopener">向晨宇的技术博客</a></li><li><a href="http://blog.leichunfeng.com" target="_blank" rel="noopener">雷纯锋的技术博客</a></li><li><a href="http://www.tanhao.me" target="_blank" rel="noopener">老谭笔记</a></li><li><a href="http://www.cnblogs.com/kenshincui/" target="_blank" rel="noopener">Kenshin Cui’s Blog</a></li><li><a href="https://casatwy.com" target="_blank" rel="noopener">Casa Taloyum</a></li><li><a href="http://www.olinone.com" target="_blank" rel="noopener">庞海礁的个人空间</a></li><li><a href="http://tutuge.me" target="_blank" rel="noopener">土土哥的技术blog</a></li><li><a href="http://yulingtianxia.com" target="_blank" rel="noopener">玉令天下的博客</a></li><li><a href="http://www.iiiyu.com" target="_blank" rel="noopener">萧宸宇</a></li><li><a href="http://www.cnblogs.com/biosli" target="_blank" rel="noopener">摇滚诗人</a></li><li><a href="http://foggry.com" target="_blank" rel="noopener">王中周的技术博客</a></li><li><a href="https://blog.nswebfrog.com" target="_blank" rel="noopener">Blog | nswebfrog</a></li><li><a href="http://limboy.me" target="_blank" rel="noopener">limboy</a></li></ul><h3 id="社区论坛"><a href="#社区论坛" class="headerlink" title="社区论坛"></a>社区论坛</h3><ul><li><a href="https://objccn.io/" target="_blank" rel="noopener">objc中国</a></li><li><a href="http://www.cocoachina.com/" target="_blank" rel="noopener">cocoachina</a></li><li><a href="https://www.objc.io/" target="_blank" rel="noopener">objc</a></li><li><a href="http://www.code4app.com/" target="_blank" rel="noopener">code4App</a></li><li><a href="http://discuss.cocos2d-x.org/" target="_blank" rel="noopener">Cocos2d-x</a></li><li><a href="http://iphonedevsdk.com/" target="_blank" rel="noopener">iPhone Dev SDK</a></li></ul><h3 id="国内知名程序员开发日报"><a href="#国内知名程序员开发日报" class="headerlink" title="国内知名程序员开发日报"></a>国内知名程序员开发日报</h3><ul><li><a href="https://juejin.im/#/tag/iOS" target="_blank" rel="noopener">掘金</a></li><li><a href="http://geek.csdn.net/" target="_blank" rel="noopener">极客头条</a></li><li><a href="https://toutiao.io/" target="_blank" rel="noopener">开发者头条</a></li><li><a href="http://weekly.manong.io/" target="_blank" rel="noopener">码农周刊</a></li><li><a href="http://top.jobbole.com/" target="_blank" rel="noopener">伯乐头条</a></li><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a></li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Objective-C视频学习资源&quot;&gt;&lt;a href=&quot;#Objective-C视频学习资源&quot; class=&quot;headerlink&quot; title=&quot;Objective-C视频学习资源&quot;&gt;&lt;/a&gt;Objective-C视频学习资源&lt;/h1&gt;&lt;p&gt;因为iOS的开发者O
      
    
    </summary>
    
      <category term="资源" scheme="https://blog.devvk.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>SDWebImage源码阅读(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/SDWebImage%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://blog.devvk.com/2018/10/12/SDWebImage源码阅读/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:16:29.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDWebImage的目录层级"><a href="#SDWebImage的目录层级" class="headerlink" title="SDWebImage的目录层级"></a>SDWebImage的目录层级</h1><p>都说技术的成长要不断的学习和不断的练习.学习可以有很多方法<br>For example 读书,阅读博客,阅读源代码,还有就是我们观看一些技术讨论会,分享会和开发者大会.而我们今天要讲的是从阅读源码开始.从事iOS开发三年来,有读过源码,但是都不完整.所以我目前的长进还只是停留在某个层面.所以从现在开始养成阅读源码的习惯.但是好的源码有很多,到底该如何入手.那么先从加载图片框架开始!</p><p>我们要阅读一份源码,首先会看到这份源码的层级结构,包含哪些文件根据文件名判断其主要功能和作用.SD目录层级如下:</p><img src="/2018/10/12/SDWebImage源码阅读/sdwebimage.gif" title="This is an image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SDWebImage的目录层级&quot;&gt;&lt;a href=&quot;#SDWebImage的目录层级&quot; class=&quot;headerlink&quot; title=&quot;SDWebImage的目录层级&quot;&gt;&lt;/a&gt;SDWebImage的目录层级&lt;/h1&gt;&lt;p&gt;都说技术的成长要不断的学习和不断的练
      
    
    </summary>
    
      <category term="源码阅读" scheme="https://blog.devvk.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="sdwebimage" scheme="https://blog.devvk.com/tags/sdwebimage/"/>
    
  </entry>
  
  <entry>
    <title>React(二)</title>
    <link href="https://blog.devvk.com/2018/10/12/React%E7%AC%AC%E4%BA%8C%E8%AF%BE/"/>
    <id>https://blog.devvk.com/2018/10/12/React第二课/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:14:12.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染:"></a>元素渲染:</h2><p>元素是React中的最小单位,是用来描述你再屏幕上所看到的内容.与浏览器的Dom元素不同,ReactDom可以保证浏览器的数据内容和React的保持一致</p><p>浏览器中的Dom元素:</p><p>元素和组件:元素是组件的一个组成部分,而组件更加广义,在下一课中我们一起学习组件</p><p>元素举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const element = &lt;h1&gt;hello world!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="将元素渲染到Dom中"><a href="#将元素渲染到Dom中" class="headerlink" title="将元素渲染到Dom中"></a>将元素渲染到Dom中</h2><p>在学习完元素之后,我们应该如何将元素显示并渲染到界面上就是这个问题所要研究的内容.<br>大家是否还记得在创建完项目后,我们打开看过index.html的源码在body中有一行这样的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id= &quot;root&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果还没有回忆起来那就打开项目看一下,而且在上一课中我按照我的理解已经解释过为什么屏幕上会出现hello world!的原理.这里在说一次<br>在index.js的代码中又这样几行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const element = &lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">ReactDom.render(</span><br><span class="line">element,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也就是说在这个div中的所有内容将有ReactDom来管理,render只是一个渲染函数,这个div也被称为根Dom节点.做过手机App开发的也可以这样理解他就是父视图,后续所有的元素和子视图都是在他上面添加和渲染的.<br>我们会将我们需要渲染的内容通过id获取到根dom节点,然后将其填充到根dom节点中,渲染到页面上.这一切的操作都是由ReactDom来完成的.</p><h2 id="更新Dom元素"><a href="#更新Dom元素" class="headerlink" title="更新Dom元素"></a>更新Dom元素</h2><p>重点:React元素都是不可变的,做过App的都知道不可变的类型有很多在iOS 中常见的NSString,NSArray,NSDictionary,NSSet等.,所以React也是不可以修改其内容和属性的.那么到目前为止我们应该怎样去更新这个元素啦?<br>就是通过创建一个新的元素然后重新渲染到界面上.(is only,not is only)只是针对目前知识浅薄而已.后面应该会有办法更新的,后面我们一起学到了再说.<br>说到这里就举一个例子吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let tick = () =&gt; &#123;</span><br><span class="line">const element = (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">hello world</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">Is is Time &#123;new Date().toLocaleString()&#125;.</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">element,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">setInterval(tick,1000);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function tick() &#123;</span><br><span class="line">const element = (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">hello world</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">Is is Time &#123;new Date().toLocaleString()&#125;.</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">element,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中我们通过定时器不断的调用ReactDom的render函数来更新h2这个标签的内容.效果大家可以自己在自己代码中尝试一下(两端代码都可以,一个是箭头函数,一个是常规的js),并且使用检查来观察h2的变化.</p><p>重点:在实际项目中render函数只会被调用一次.这次只是为了在目前学习到的基础上看到更新的效果才不得已而为之,如果在以后的开发中,你们使用了这样的方式调用render函数,那么你就要考虑代码的设计问题了.</p><h2 id="React只会更新必要的部分"><a href="#React只会更新必要的部分" class="headerlink" title="React只会更新必要的部分"></a>React只会更新必要的部分</h2><p>在开发中又用过数据库的同学应该了解数据库的update操作,当一条记录需要被更新时,他会拿到这条记录的主见然后查找到这条记录,进行字段比对,当有某一个值更新时,才会更新.所以React的更新也是这样的,只会更新发生变化的部分,其他的东西我不会主动更新.</p><p>在上一个例子中,我们使用定时器不断的创建描述整个界面的元素,但是当你使用检查检测时会发现,只有h2在不断变化,其他的都是不会发生变化的.在开发中我们会将界面视为一帧一帧的动画,不是随时变化的.我们在发生更新时只需要更新那一帧动画即可,并不需要将更段动画全部更新.</p><p>在很多时候都是这样的.基本上所有的开发中只关注我们需要更新的内容,其余的内容我们不需要理会.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元素渲染&quot;&gt;&lt;a href=&quot;#元素渲染&quot; class=&quot;headerlink&quot; title=&quot;元素渲染:&quot;&gt;&lt;/a&gt;元素渲染:&lt;/h2&gt;&lt;p&gt;元素是React中的最小单位,是用来描述你再屏幕上所看到的内容.与浏览器的Dom元素不同,ReactDom可以保证浏览器
      
    
    </summary>
    
      <category term="react" scheme="https://blog.devvk.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode常用命令</title>
    <link href="https://blog.devvk.com/2018/10/12/Xcode%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E5%92%8C%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://blog.devvk.com/2018/10/12/Xcode调试技巧和常用快捷键/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:18:22.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xcode常用命令"><a href="#Xcode常用命令" class="headerlink" title="Xcode常用命令"></a>Xcode常用命令</h1><p>p :常用来输出基础数据类型</p><p>po :常用来输出oc对象类型</p><p>expr :可以在调试时动态的执行表达式，同时打印出结果。常用来动态修改变量的值。</p><p>call :常用来动态调用函数</p><p>image: image命令可以列出当前App中的所有模块</p><p>po [view recursiveDescription] 查看view的层级关系</p><h1 id="Xcode常用快捷键"><a href="#Xcode常用快捷键" class="headerlink" title="Xcode常用快捷键"></a>Xcode常用快捷键</h1><p>shift+command+o :快速打开文件</p><p>Command+1~9:导航面版切换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xcode常用命令&quot;&gt;&lt;a href=&quot;#Xcode常用命令&quot; class=&quot;headerlink&quot; title=&quot;Xcode常用命令&quot;&gt;&lt;/a&gt;Xcode常用命令&lt;/h1&gt;&lt;p&gt;p :常用来输出基础数据类型&lt;/p&gt;
&lt;p&gt;po :常用来输出oc对象类型&lt;/p&gt;

      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="常用命令" scheme="https://blog.devvk.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
