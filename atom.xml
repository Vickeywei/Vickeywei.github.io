<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vicky的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.devvk.com/"/>
  <updated>2019-01-30T01:58:55.919Z</updated>
  <id>https://blog.devvk.com/</id>
  
  <author>
    <name>Vicky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>property认识</title>
    <link href="https://blog.devvk.com/2019/01/29/property%E8%AE%A4%E8%AF%86/"/>
    <id>https://blog.devvk.com/2019/01/29/property认识/</id>
    <published>2019-01-29T08:36:16.000Z</published>
    <updated>2019-01-30T01:58:55.919Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 style="text-align:center">@property</h1><p>为什么要讨论这些问题?因为这些东西在平常开发是很难用到的,但是在面试和找工作的过程中就会被提及,公司不仅需要实战者,也需要理论和实战相结合的人.所以我们要掌握理论来完成实战.</p><ol><li>@property本质是什么?</li><li>@property为我们做了哪几件事?</li><li>分类如何为类添加属性?能够添加实例变量吗?</li><li>通过编译的类能够添加实例变量?在运行时创建的类能否添加实例变量?</li></ol><p>我们将从这几个方面来查找和解决这个问题?</p><p>property是我们在开发中为某个类来添加属性的声明方式.它为了我们做了三件事情,1.生成带有下划线的实例变量,2.生成getter方法,3.生成setter方法.settet和getter也被称为属性合成方法.平时我们开发过程中不需要写,编译器会帮我们完成这项繁琐的工作.但是如果我们需要自己实现该如何写呢?</p><pre>@implementation MJPerson<br>@synthesize name =_name;<br>- (NSString <em>)name{<br>return @”1111”;<br>}<br>- (void)setName:(NSString </em>)name {<br>_name = name;<br>}</pre><br><p>关键字:@synthesize和@dynamic这个稍后讨论</p><p>分类是不可以添加实例变量的,因为在类经过编译后,类的objc_ivar_list已经确定,并且已经调用了class_setIvarLayout和class_setWeakIvarLayout已经确定了实例变量的布局,所以无法增加实例变量</p><p>那么分类是否可以添加属性呢?答案是肯定的,因为在运行时环境中,我们可以采用关联引用为类动态添加属性</p><pre><br>//设置属性的值<br>OBJC_EXPORT <br>void objc_setAssociatedObject(id _Nonnull object, const void <em> _Nonnull key,<br>id _Nullable value, objc_AssociationPolicy policy)<br><br>//获取属性的值<br>OBJC_EXPORT<br>id_Nullable<br>objc_getAssociatedObject(id _Nonnull object, const void </em> _Nonnull key)<br>OBJC_AVAILABLE<br>(10.6, 3.1, 9.0, 1.0, 2.0);<br>//移除属性<br>OBJC_EXPORT void<br>objc_removeAssociatedObjects(id _Nonnull object)<br>    OBJC_AVAILABLE(10.6, 3.1, 9.0, 1.0, 2.0);</pre><p>上面第一个方法是设置关联属性的值,必须给定一个object,一个唯一的key,和缓存策略.我们再给定一个唯一的key是要注意,我们再获取时也需要用到这个key所以必须具有唯一性.所以我们一般使用static char来定义这个key,在选择缓存策略时就要考虑这个属性的类型,如果输基础数据类型,就是assign,如果是对象就是retain,如果是字符串或者是block等要选择copy.这个缓存策略中在对象时,会有NONATOMIC和atomic这个的选择和我们声明属性一致.</p><p>第二个方式是获取关联属性的值,参数为关联的属性和唯一的key</p><p>第三个方法是移除所有的关联属性,我们要想移除单个关联属性,应该调用设置关联属性值的函数,并且设置value为nil</p><p>我们无法给通过编译的类,添加实例变量,但是我们可以给运行时创建的类添加实例变量.</p><pre>runtime函数如下:<br>//首先创建类<br>OBJC_EXPORT Class _Nullable<br>objc_allocateClassPair(Class _Nullable superclass, const char <em> _Nonnull name, size_t extraBytes)OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);<br>//为类添加属性<br>参数:创建的类,属性名称,和修饰属性的关键字属性数组,属性数组count<br>OBJC_EXPORT BOOL<br>class_addProperty(Class _Nullable cls, const char </em> _Nonnull name,const objc_property_attribute_t * _Nullable attributes,unsigned int attributeCount)<br>OBJC_AVAILABLE(10.7, 4.3, 9.0, 1.0, 2.0);<br>//注册类<br>objc_registerClassPair(cls);</pre><p>我们可以为这个类添加属性,添加方法,添加协议等等,还可以添加实例变量,但是这个类必须包含一个同名的实例变量</p><p>好了上面的四个小问题说完了,该说刚才说的@synthesize和@dynamic,如果两个都没写就是@ synthesize  property=_property,@synthesize系统会帮我们自动实现setter和getter方法,@dynamic 需要我们自己实现setter和getter方法,如果不实现,就会出现崩溃,因为这个是你告诉系统说,我要自己实现,系统自然不会帮你实现,但是你却没实现,然后就找不到方法了.</p><p>说起属性就要说属性的默认关键字:基础数据类型:内存关键字:assign,读写属性:readwrite,原子性:atomic,对象类型:内存关键字:strong,读写属性:readWrite,原子性:atomic</p><br><b style="color:red">重点:</b><p></p><p>关联引用</p><p>属性的setter和getter的合成方式,@synthesize自动合成,@dynamic手动合成.</p><p>如何为运行时创建的类添加属性,方法等</p><br><p>在上面代码中,由于macdown的编辑器*都被阉割掉了.抱歉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1 style=&quot;text-align:center&quot;&gt;@property&lt;/h1&gt;&lt;p&gt;为什么要讨论这些问题?因为这些东西在平常开发是很难用到的,但是在面试和找工作的过程中就会被提及,公司不仅需要实战者,也需要理论和实战相结合的人.所以我们要掌握理论来完成实战
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="property本质" scheme="https://blog.devvk.com/tags/property%E6%9C%AC%E8%B4%A8/"/>
    
      <category term="property做了哪些事情" scheme="https://blog.devvk.com/tags/property%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
    
      <category term="分类添加属性" scheme="https://blog.devvk.com/tags/%E5%88%86%E7%B1%BB%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
    
      <category term="如何给运行时创建的类添加属性,方法等" scheme="https://blog.devvk.com/tags/%E5%A6%82%E4%BD%95%E7%BB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%9B%E5%BB%BA%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95%E7%AD%89/"/>
    
      <category term="属性的默认关键字" scheme="https://blog.devvk.com/tags/%E5%B1%9E%E6%80%A7%E7%9A%84%E9%BB%98%E8%AE%A4%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="synthesize和dynamic区别" scheme="https://blog.devvk.com/tags/synthesize%E5%92%8Cdynamic%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>runtime方法查找</title>
    <link href="https://blog.devvk.com/2019/01/25/runtime%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE/"/>
    <id>https://blog.devvk.com/2019/01/25/runtime方法查找/</id>
    <published>2019-01-25T02:30:25.000Z</published>
    <updated>2019-01-25T05:54:01.872Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1>runtime是如何查找到一个方法的</h1><p>在iOS开发过程中我们知道OC语言是C语言的超集.并且将SmallTalk的消息传递特性加入了其中,使得Objective-C也具有了消息传递这一特性.</p><h4>Objective-C方法调用的本质</h4><p>既然说Objective-C结合了smallTalk的消息传递,那自然也是将这个特性发挥到了这个方面,而且Objective-C作为一门动态语言,与其他面向对象语言不同,它总是想办法把一些决定工作从编译连接推迟到运行时.Objective-C依赖运行时系统,runtime运行时库提供了很多在运行时过程中操作类和对象的API.而我们的方法调用就是依赖于这个运行时系统.</p><pre>MJPerson <em>person = [[MJPerson alloc] init];<br>person.name=@”1111”;<br>[person print];</em></pre><p>这是我们使用OC语言开发中常见的方法调用,那么它底层做了什么呢?它是怎么用到消息传递机制的?下面我们再看这段代码:</p><pre><br>MJPerson person = objc_msgSend(objc_getClass(“MJPerson”), @selector(alloc));<br><br>objc_msgSend(person, @selector(init));<br><br>objc_msgSend(person, @selector(setName:),@”11111”);<br><br>objc_msgSend(person, @selector(print));</pre><p>系统会在调用方法时都会将方法调用转成消息传递的方式进行.那么就让我们来通过runtime的源代码看一下:</p><h4>alloc方法</h4><ol><li>alloc是NSObject的类方法,而我们大多数的类都继承于NSObject.和不常见的NSProxy.我们也知道通过继承,我们可以继承父类的属性和方法</li><li>那么在调用alloc方法后,系统是如何找到该方法的实现的.</li><li>因为在runtime中关于objc_class的定义中有objc_ivar_list和objc_method_list还有objc_cache还有objc_protocol_list.通过名称我们也能知道一个是成员变量列表,一个是方法列表一个是方法缓存列表,一个是协议列表.查找方法肯定先会找方法缓存列表,别问我为什么?,因为这是系统对方法调用进行的优化,有缓存直接使用缓存,减少查找,增快效率,如果没有缓存,就找方法列表,找到就返回并执行,如果没找到就找父类,一直向上查找,如果找到根类还没有找到,就看有没有转发,如果有转发就执行转发,如果没有那就只能抛出异常.</li><li>上面说到的是怎么寻找方法,alloc做为类方法,我们也知道类方法存在于元类的方法列表当中,然后和上面的步骤相同进行查找</li></ol><p style="color:red;text-indent:0em">alloc方法查找代码:</p><pre><br>//1,查找类方法<br>Method class_getClassMethod(Class cls, SEL sel)<br>{<br>if (!cls  ||  !sel)return nil;<br>return class_getInstanceMethod(cls-&gt;getMeta(), sel);//在这里我们首先获取了cls的元类metaClass,然后查找元类的方法列表}<br>//2.查找类的实例方法<br>Method class_getInstanceMethod(Class cls, SEL sel){<br>if (!cls  ||  !sel) return nil;//判断cls和方法编号是否存在<br><p style="text-indent:0">#warning fixme build and search caches</p><br>lookUpImpOrNil(cls, sel, nil,<br>                   NO/<em>initialize</em>/, NO/<em>cache</em>/, YES/<em>resolver</em>/);//查找方法缓存;在查找方法缓存是会看到cache_getImp这个函数.但是无法查看它的内部实现,但是runtime源码中有这个方法的汇编代码,一会可以通过汇编代码进行大致了解.<br><p style="text-indent:0">#warning fixme build and search caches</p><br>return _class_getMethod(cls, sel);//如果缓存中没有找到,就会查找方法列表,并同时会创建缓存链表,如果找到方法实现就进行方法缓存<br>}<br><br>//3.cache_getImp的汇编代码<br>STATIC_ENTRY _cache_getImp<br>mov    r9, r0 :r0标识要在哪个缓存类中搜索,将r0寄存器的值传递给r9寄存器.在后面解释<p style="color:red">lookUpImpOrForward</p>源代码是会看到,_cache_getImp传入的参数是cls,和方法编号,如果是类方法传入的就是metaClass,如果是实例方法就是当前类.<br>CacheLookup NORMAL //这个宏定义中r0和r1表示消息接收者,r1或r2代表方法编号;方法实现imp在r12中<br>mov    r0, r12 //缓存命中,方法的实现在r12寄存器中,然后传递给r0寄存器;如果没命中就继续执行cacheLookup2<br>bx    lr            // return imp<br>CacheLookup2 GETIMP<br>// 缓存没命中,丢失返回nil<br>mov    r0, #0<br>bx    lr<br>END_ENTRY _cache_getImp<br>//objc_msgSend汇编代码<br>ENTRY _objc_msgSend<br>    MESSENGER_START<br>    cbz    r0, LNilReceiver_f //判断消息接收者是否为nil<br>    ldr    r9, [r0]        // r9 = self-&gt;isa<br>    GetClassFromIsa            // r9 = class<br>    CacheLookup NORMAL //缓存命中,直接调用imp<br>    nonstret forwarding<br>    MESSENGER_END_FAST<br>    bx    r12            // call imp<br>    CacheLookup2 NORMAL //缓存miss<br>    ldr    r9, [r0]        // r9 = self-&gt;isa<br>    GetClassFromIsa            // r9 = class<br>    MESSENGER_END_SLOW<br>    b    __objc_msgSend_uncached //方法未缓存<br><br>    STATIC_ENTRY __objc_msgSend_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup NORMAL    // returns IMP in r12<br>    bx    r12<br>    END_ENTRY __objc_msgSend_uncached<br>    STATIC_ENTRY __objc_msgSend_stret_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup STRET        // returns IMP in r12<br>    bx    r12<br>    END_ENTRY __objc_msgSend_stret_uncached<br>    STATIC_ENTRY __objc_msgLookup_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup NORMAL    // returns IMP in r12<br>    bx    lr<br>    END_ENTRY __objc_msgLookup_uncached<br>    STATIC_ENTRY __objc_msgLookup_stret_uncached<br>    // THIS IS NOT A CALLABLE C FUNCTION<br>    // Out-of-band r9 is the class to search<br>    MethodTableLookup STRET        // returns IMP in r12<br>    bx    lr<br>    END_ENTRY __objc_msgLookup_stret_uncached<p></p><p></p></pre><p>可能看不懂汇编,而且和我们学的8086汇编不同,但是从它的注释中我们可以看出首先会判断消息接收者是否为nil,然后在缓存方法查找,如果找到直接call imp,如果没找到就表明该方法没缓存就执行__objc_msgSend_uncached 在这个汇编代码中可以看到MethodTableLookup;我们再查看这个到底是什么东西</p><pre><br>.macro MethodTableLookup<br>    stmfd    sp!, {r0-r3,r7,lr}<br>    add    r7, sp, #16<br>    sub    sp, #8            // align stack<br>    FP_SAVE<br>.if $0 == NORMAL<br>    // receiver already in r0<br>    // selector already in r1<br>.else<br>    mov     r0, r1            // receiver<br>    mov     r1, r2            // selector<br>.endif<br>    mov    r2, r9            // class to search<br>    blx    __class_lookupMethodAndLoadCache3<br>    mov    r12, r0            // r12 = IMP<br>.if $0 == NORMAL<br>    cmp    r12, r12        // set eq for nonstret forwarding<br>.else<br>    tst    r12, r12        // set ne for stret forwarding<br>.endif<br>    FP_RESTORE<br>    add    sp, #8            // align stack<br>    ldmfd    sp!, {r0-r3,r7,lr}<br>.endmacro<br></pre><p>在这个宏定义中,我们看到了__class_lookupMethodAndLoadCache3这个方法名,然后在runtime的方法中查找,找到了函数的实现</p><pre><br>IMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)<br>{<br>    return lookUpImpOrForward(cls, sel, obj,<br>                              YES/<em>initialize</em>/, NO/<em>cache</em>/, YES/<em>resolver</em>/);<br>}<br>IMP lookUpImpOrForward(Class cls, SEL sel, id inst,<br>                       bool initialize, bool cache, bool resolver)<br>{<br>    IMP imp = nil;<br>    bool triedResolver = NO;<br>    runtimeLock.assertUnlocked();<br>    // Optimistic cache lookup<br>    if (cache) {<br>        imp = cache_getImp(cls, sel);<br>        if (imp) return imp;<br>    }<br>    // runtimeLock is held during isRealized and isInitialized checking<br>    // to prevent races against concurrent realization.<br>    // runtimeLock is held during method search to make<br>    // method-lookup + cache-fill atomic with respect to method addition.<br>    // Otherwise, a category could be added but ignored indefinitely because<br>    // the cache was re-filled with the old value after the cache flush on<br>    // behalf of the category.<br>    runtimeLock.read();<br>    if (!cls-&gt;isRealized()) {<br>        // Drop the read-lock and acquire the write-lock.<br>        // realizeClass() checks isRealized() again to prevent<br>        // a race while the lock is down.<br>        runtimeLock.unlockRead();<br>        runtimeLock.write();<br>        realizeClass(cls);<br>        runtimeLock.unlockWrite();<br>        runtimeLock.read();<br>    }<br>    if (initialize  &amp;&amp;  !cls-&gt;isInitialized()) {<br>        runtimeLock.unlockRead();<br>        _class_initialize (_class_getNonMetaClass(cls, inst));<br>        runtimeLock.read();<br>        // If sel == initialize, _class_initialize will send +initialize and<br>        // then the messenger will send +initialize again after this<br>        // procedure finishes. Of course, if this is not being called<br>        // from the messenger then it won’t happen. 2778172<br>    }<br> retry:<br>    runtimeLock.assertReading();<br>    // Try this class’s cache.<br>    imp = cache_getImp(cls, sel);<br>    if (imp) goto done;<br>    // Try this class’s method lists.<br>    {<br>        Method meth = getMethodNoSuper_nolock(cls, sel);<br>        if (meth) {<br>            log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);<br>            imp = meth-&gt;imp;<br>            goto done;<br>        }<br>    }<br>    // Try superclass caches and method lists.<br>    {<br>        unsigned attempts = unreasonableClassCount();<br>        for (Class curClass = cls-&gt;superclass;<br>             curClass != nil;<br>             curClass = curClass-&gt;superclass)<br>        {<br>            // Halt if there is a cycle in the superclass chain.<br>            if (–attempts == 0) {<br>                _objc_fatal(“Memory corruption in class list.”);<br>            }<br>            // Superclass cache.<br>            imp = cache_getImp(curClass, sel);<br>            if (imp) {<br>                if (imp != (IMP)_objc_msgForward_impcache) {<br>                    // Found the method in a superclass. Cache it in this class.<br>                    log_and_fill_cache(cls, imp, sel, inst, curClass);<br>                    goto done;<br>                }<br>                else {<br>                    // Found a forward:: entry in a superclass.<br>                    // Stop searching, but don’t cache yet; call method<br>                    // resolver for this class first.<br>                    break;<br>                }<br>            }<br>            // Superclass method list.<br>            Method meth = getMethodNoSuper_nolock(curClass, sel);<br>            if (meth) {<br>                log_and_fill_cache(cls, meth-&gt;imp, sel, inst, curClass);<br>                imp = meth-&gt;imp;<br>                goto done;<br>            }<br>        }<br>    }<br>    // No implementation found. Try method resolver once.<br>    if (resolver  &amp;&amp;  !triedResolver) {<br>        runtimeLock.unlockRead();<br>        _class_resolveMethod(cls, sel, inst);<br>        runtimeLock.read();<br>        // Don’t cache the result; we don’t hold the lock so it may have<br>        // changed already. Re-do the search from scratch instead.<br>        triedResolver = YES;<br>        goto retry;<br>    }<br>    // No implementation found, and method resolver didn’t help.<br>    // Use forwarding.<br>    imp = (IMP)_objc_msgForward_impcache;<br>    cache_fill(cls, sel, imp, inst);<br> done:<br>    runtimeLock.unlockRead();<br>    return imp;<br>}<br></pre><p>通过上面的代码已经很明显能看出了,方法是如何被查找到的.首先我们忽略锁的操作,然后主要看关心的部分,如果cache传入的为yes,就会去类方法缓存列表中去找,如果存在就返回,否则就看有没有被初始化.初始化过的直接查找this class’s method list,如果找到就done,并为imp赋值.如果不存在就查找superclass caches and method lists.如果找到了就done,并为imp赋值.如果还没找到方法实现,然后会判断是否有能处理的对象,也是就是我们刚才提到的走转发,如果没有找到方法,也没有转发那么就会failure.</p><p></p><p></p><p style="color:red;text-indent:0">扩展</p><p></p><p></p><p>下面这段方法就是查找类方法列表是调用的方法,然后都是<b style="color:cyan">循环遍历cls-&gt;data()-&gt;methods.beiginLists到endLists?</b>方法不是放在结构体objc_method_list中的吗?</p><p></p><p></p><p>然后我们一层一层往上找,在objc-runtime-new.h中objc_class:objc_object的定义中看到了data(),他是一个class_rw_t*指针,然后点进去看到了我们看到的methods,properties,protocols,firstSubClass,还有很多函数和成员变量,我们关心的就这三个,方法,属性列表,和协议列表.而且发现runtime.h中的定义和objc-runtime-new中的定义不同了.runtime使用的是结构体,而new中使用的是c++中的类.然后我再看了class_copyProtocolList函数也是通过遍历cls-&gt;data()-&gt;protocols,然后查看objc_getivar也是通过cls-&gt;data()-&gt;ro-&gt;ivars来获取,所以明白runtime中定义的是老的版本,而new中定义的是新版本的.但是对于两者都进行了解比较好</p><p></p><pre>static method_t *getMethodNoSuper_nolock(Class cls, SEL sel){    runtimeLock.assertLocked();    assert(cls->isRealized());    // fixme nil cls?     // fixme nil sel?    for (auto mlists = cls->data()->methods.beginLists(),               end = cls->data()->methods.endLists();          mlists != end;         ++mlists)    {        method_t *m = search_method_list(*mlists, sel);        if (m) return m;    }    return nil;}</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h1&gt;runtime是如何查找到一个方法的&lt;/h1&gt;&lt;p&gt;在iOS开发过程中我们知道OC语言是C语言的超集.并且将SmallTalk的消息传递特性加入了其中,使得Objective-C也具有了消息传递这一特性.&lt;/p&gt;&lt;h4&gt;Objective-C方法调用的本质&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="https://blog.devvk.com/2019/01/16/%E6%B1%87%E7%BC%96/"/>
    <id>https://blog.devvk.com/2019/01/16/汇编/</id>
    <published>2019-01-16T02:17:24.000Z</published>
    <updated>2019-01-23T05:57:58.251Z</updated>
    
    <content type="html"><![CDATA[<body><h1>基础知识</h1><h4> 汇编语言的组成</h4><ol><li>汇编指令</li><li>伪指令</li><li>其他符号:如+,-,*,/等</li></ol><h4> 存储器</h4><p>CPU所需要的指令和数据都在存储器中存放,也就是我们所说的内存当中.磁盘不同于内存,磁盘上的数据或程序如果不读到内存中,就无法被CPU使用.</p><h4>指令和数据</h4><p>在内存或磁盘上,指令和数据没有任何区别,都是二进制信息.</p><h4>存储单元</h4><p>存储器被划分成或干戈存储单元,每个存储单元从0开始顺序额编号.微机存储器的容量是以字节为最小单位来计算的.</p><h4>CPU对存储器的读写</h4><p>CPU要从内存中读数据,首先要指定存储单元的地址.在一台微机中不是只有存储器这一种器件,CPU在读写数据时还要指明,他要对哪一个器件进行操作.进行哪种操作,是读出数据还是写入数据.</p><p>CPU读写数据时的必备条件</p><ol><li>存储单元的地址</li><li>器件的选择,读或写的命令</li><li>读或写的数据</li></ol><h4> 总线</h4><p>电子计算机能处理,传输的信息都是电信号,电信号当然要用导线传送,在计算机中专门有链接CPU和其他芯片的导线,通常称为总线</p><ol><li>地址总线</li><li>控制总线</li><li>数据总线</li></ol><h4>地址总线</h4><p>CPU是通过地址总线来指定存储单元的,可见地址总线能传送多少个不同的信息,CPU就可以对多少个存储单元进行寻址.</p><p>一个CPU有N根地址线,则可以说这个CPU的地址总线的宽度为N.这样CPU最多可以寻找2的N次方个内存单元</p><h4>数据总线</h4><p>数据总线的宽度决定了CPU和外界的数据传送速度.8根数据总线一次课传送一个8位二进制数据(一个字节).16根数据总线一次可传送两个字节</p><h4>控制总线</h4><p>有多少根控制总线,就意味着CPU提供了对外部期间的多少种控制.所以控制总线的宽度决定了CPU对外部器件的控制能力</p><p></p><p><b>总结</b></p><ol><li>汇编指令是机器指令的助记符,统计器指令一一对应</li><li>每一种CPU都有自己的汇编指令集</li><li>CPU可以直接使用的信息在存储器中存放</li><li>在存储其中的指令和数据没有任何区别,都是二进制信息</li><li>存储单元从零开始顺序编号</li><li>一个存储单元可以存储8个bit,即8位二进制数(一个字节)</li><li>每一个CPU芯片都有许多管教,这些管脚和总线相连.也可以说这些管教引出总线.一个CPU可以引出3中总线的宽度标志了这个CPU的不同方面的性能,地址总线的宽度决定了CPU的寻址能力,数据总线的宽度决定了CPU与其他部件进行数据传送石的一次数据传送量.控制总线的宽度决定了CPU对系统中其他期间的控制能力</li></ol><h4>内存地址空间</h4><p>一个CPU的地址总线宽度为10,那么可以寻址1024个内存单元(byte,8bit),这个1024个可寻到的内存单元就构成这个CPU的内存地址空间</p><h4>主板</h4><p>主板上有核心器件和一些主要器件,这些器件通过总线(地址,数据,控制总线)相连.这些器件有CPU,存储器,外围芯片组,扩展插槽.扩展插槽上一般由RAM内存条和各类接口卡</p><h4>接口卡</h4><p>CPU对外部设备不能直接控制.直接控制这些设备进行工作的是插在扩展插槽上的接口卡.扩展插槽通过总线和CPU相连,所以接口卡也通过总线同CPU相连.CPU可以直接控制这些接口卡,从而实现CPU对外设的间接控制.CPU通过总线向接口卡发送命令,接口卡根据CPU的命令控制外设进行工作.</p><h4>各类存储器芯片</h4><p>存储器芯片从物理连接上看是独立的.不同的期间.从读写属性分为随机存储器和只读存储器.随机存储器可读可写,但必须带电存储.关机后存储的内容丢失.只读存储器只能读取不能写入.关机后其中的内容不丢失</p><ol><li>随机存储器,用于存放工CPU使用的大部分程序和数据,主随机存储器一般由两个位置的RAM组成,装在主板上的RAM和插在扩展插槽上的RAM</li><li>装有BIOS的ROM</li><li>接口卡上的RAM某些接口卡上需要对大批量输入,输出数据进行暂时存储,在其上装有RAM最典型的就是显示卡上的RAM,一般称为显存.</li></ol><h4>内存地址空间</h4><p>上述的存储器在物理上是独立的期间.但是都与CPU的总线相连接.CPU对他们进行读或写的时候都通过控制总线发出内存读写命令CPU在操作他们的时候,把他们都当做内存来对待,把他们总的看做一个由若干存储单元组成的逻辑存储器,这个逻辑存储器就是我们所说的内存地址空间</p><h2>寄存器</h2><p>一个CPU是由运算器,控制器,寄存器等期间构成,这些期间靠内部总线相连.</p><ol><li>运算器进行信息处理</li><li>寄存器进行信息存储</li><li>控制器控制各种器件进行工作</li><li>内部总线连接各种器件,在它们之间进行数据的传送</li></ol><p>CPU中的主要部件是寄存器,寄存器是CPU中程序员可以用指令读写的部件.程序员通过改变各种寄存器中的内容来实现对CPU的控制</p><h4>通用寄存器</h4><p>8086CPU的所有紧蹙起都是16位的,可以存放两个字节.AX,BX,CX,DX这四个寄存器通常用来存放一般性的数据,被称为通用寄存器</p><p>8086CPU为了兼容上一代寄存器(8位)所以8086CPU的AX,BX,CX,DX这四个寄存器都可分为两个可独立使用的8位寄存器来用:</p><ol><li>AX可分为AH和AL</li><li>BX可分为BH和BL</li><li>CX可分为CH和CL</li><li>DX可分为DH和DL</li></ol><h4>字在寄存器中的存储</h4><ol><li>字节:记为byte,一个字节有8bit组成,可以存放在8位寄存器中</li><li>字:记为word,一个字由两个字节组成,这两个字节分别称为这个字的高位字节和低位字</li></ol><h4>几条汇编指令</h4><p>mov ax,18 将18送入寄存器AX</p><p>mov ah,78 将78送入寄存器AH</p><p>add ax,8  将寄存器AX的值加上8</p><p>mov ax,bx 将寄存器bx中的数据送入寄存器AX</p><p>add ax,bx 将AX和BX的数值相加,结果存在寄存器AX</p><pre>mov ax,4e20h<br>add ax,1406h<br>mov bx,2000h<br>add ax,bx<br>mov bx,ax<br>add ax,bx<br></pre><p>本来ax中的值为1044ch但是由于ax寄存器为16位,只能保存16位数.所以最高位的1,被舍弃,ax的数据为044ch</p><pre>mov ax,001ah<br>mov bx,0026h<br>add al,bl<br>add ah,bl<br>add bh,al<br>mov ah,0<br>add al,85h<br>add al,93h </pre><p><b style="color:red">注意</b></p><p>在进行数据传送和运算时,要注意指令的两个操作对象的位数应当是一致的</p><h4> 物理地址</h4><p>所有的内存单元构成的存储空间是一个一维的线性空间,每一个内存单元在这个空间中都有唯一的地址,我们将这个唯一的地址称为物理地址.CPU通过地址总线送入村塾琦的,必须是一个内存单元的物理地址</p><h4> 16位结构的CPU</h4><p>16位CPU具有下面几方面的结构特性</p><ol><li>运算器一次最多可以处理16位的数据</li><li>寄存器的最大宽度为16位</li><li>寄存器和运算器之间的通路为16位</li></ol><p>8084是16位结构的CPU,这也就是说,在8086内部,能够一次性处理,传输,暂时存储的信息的最大长度是16位的.内存单元的地址在送上地址总线之前,必须在CPU中处理,传输,暂时存放.</p><h4> 8086CPU给出物理地址的方法</h4><p>8086CPU有20位地址总线,可以传送20位地址,达到1MB寻址能力.8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址</p><ol><li>CPU中的相关部件提供两个16位的地址,一个称谓段地址,一个称为偏移地址</li><li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件</li><li>地址加法器将两个16位的地址合成为一个20位的物理地址</li><li></li><li>地址加法器通过内部总线将20位物理地址送入输入输出控制电路</li><li>输入输出控制电路将20位物理地址送上地址总线</li><li>20位物理地址被地址总线传送到存储器</li></ol><p>地址加法器采用物理地址=段地址x16+偏移地址的方法用段地址和偏移地址合成物理地址</p><h4> 段地址x16(16进制向左移一位)+偏移地址=物理地址的本质</h4><p>在CPU访问内存时,用一个基础地址(段地址x16)和一个相对于基础地址的偏移地址相加给出内存单元的物理地址</p><h4> 段的概念</h4><p>内存并没有分段,段的划分来自于CPU,由于8086CPU用”基础地址(段地址x16)+偏移地址=物理地址”的方式给出内存单元的物理地址,使得我们可以用分段的方式来管理内存.</p><pre>物理地址          段地址   偏移地<br>21F60H        2000H      1F60H<br>                2100H    0F60H<br>                21F0H    0060H<br>                21F6H      0000H<br>                1F00H    2F60H</pre><p><b style="color:red">结论</b></p><ul>    <li>CPU可以用不同的段地址和偏移地址形成同一个物理地址</li>    <li>偏移地址为16位的,变化范围为0-FFFFH,仅用偏移地址来寻址最多可寻64kb的内存单元</li></ul><h4>段寄存器</h4><p>8086CPU在访问内存时,要由相关部件提供内存单元的段地址和偏移地址,送入地址加法器合成物理地址.段地址在8086的段寄存器中存放,8086CPU有4个寄存器CS,DS,SS,ES.</p><h4>CS和IP</h4><p>CS和IP是8086CPU中两个最关键的寄存器,他们指示当前要读取指令的地址.CS魏代码段寄存器,IP魏指令指针寄存器.</p><p><b>任意时刻,CPU将CS:IP指向的内容当做指令执行</b></p><p><b style="color:orange">指令执行的步骤</b></p><ol><li>从CS:IP指向的内存单元读取指令,读取的指令进入指令缓冲器</li><li>IP=IP+所读取指令的长度,从而指向下一条指令</li><li>执行指令</li></ol><p>在8086CPU加电启动或复位后(即CPU刚开始工作时)CS和IP被设置为CS=FFFFH,IP=0000H,即在8086CPU机刚启动时,CPU从内存FFF0H单元中读取指令,FFFF0H单元中的指令是8086CPU开机后的第一条指令</p><h4>修改CS,IP的指令</h4><p>可以通过mov指令来改变AX,BX,CX,DX中的值,mov指令被称为传送指令</p><p>mov指令不能用于设置CS,IP的值.8086CPU为CS,IP提供了另外的指令来改变他们的值.能够改变CS,IP的内容的指令被称为转移指令:<b>jmp指令</b></p><p>若想同时修改CS,IP的内容,可用形如jmp段地址:偏移地址的指令完成</p><p></p><p>jmp 2AE3:3执行后:CS=2AE3H,IP=0003H,CPU将从2AE33H处读取指令</p><p></p><p>jmp段地址:偏移地址指令的功能为:用指令中给出的段地址修改CS,偏移地址修改IP</p><p>若想仅修改IP的内容,可用形如jmp某一合法寄存器的指令完成</p><p>jmp ax,指令执行前:1x=1000H,CS=2000H,IP为0003H.指令执行后:ax=1000H,CS=2000H,IP=1000H</p><p>jmp 某一合法寄存器,指令的功能为:用寄存器中的值修改IP</p><h4> 代码段</h4><p><b style="color:red">如何使代码段中的指令被执行</b>将一段内存当做代码段,仅仅是我们再编程时的一种安排,CPU并不会由于这种安排,就自动地将我们定义的代码段中的指令当做指令来执行.CPU只认被CS:IP指向的内存单元中的内容为指令.所以要让CPU执行我们放在代码段中的指令,必须要将CS:IP指向所定义的代码段的第一条指令的首地址.</p><p><b style="color:red">小结</b></p><ol><li>段地址在8086CPU的段寄存器中存放.当8086CPU要访问内存时,由段寄存器提供内存单元的段地址.8086CPU有4个段寄存器,其中CS用来存放指令的段地址</li><li>CS存放指令的段地址,IP存放指令的偏移地址,8086机中,任意时候,CPU将CS:IP指向的内容当做指令执行</li><li>8086CPU的工作过程</li><ol><li>从CS:IP执行的内存单元读取指令,读取的指令进入指令缓冲器</li><li>IP指向下一条指令</li><li>执行指令</li></ol><li>8086CPU提供转移指令修改CS,IP的内容,jmp段地址:偏移地址:修改CS:IP.jmp 某个合法寄存器:修改IP</li></ol><h2>寄存器(内存访问)</h2><h4> 内存中字的存储</h4><p>CPU中,用16位寄存器来存储一个字,高8位存放高位字节,低8位存放低位字节,在内存中存储时,由于内存单元是字节单元(一个单元存放一个字节),则一个字要用两个地址连续的内存单元来存放,这个字的低位字节存放在低地址单元中,高位字节存放在高地址单元中.</p><h4>进制</h4><p><b>十进制</b></p><p>平时使用的数字都是由0~9共10个数字组成的,一个数字最多能表示9,如果要表示十,十一,二十九,一百等,就需要多个数字组合起来</p><p>因为逢十进一,也因为只有0~9共十个数字,所以被叫做十进制;这时进一位相当于十,进两位相当于二十</p><p>进制也就是进位制.进行加法运算时逢X进一,进行减法运算时借一当X,这就是X进制,这种进制也就包含X个数字,基数为X.十进制有0~9共10个数字,基数为10,在加减法运算中,逢十进一,借一当十</p><p><b>二进制</b></p><p>既然可以用0~9共十个数字表示数值,那么也可以用0,1两个数字表示数值,这就是二进制</p><p>二进制加减法和十进制加减法的思想是类似的:</p><ul><li>对于十进制,进行加法运算时逢十进一,进行减法运算时借一当十</li><li>对于二进制,进行加法运算时逢二进一,进行减法运算时借一当二</li></ul><ol><li>二进制加法:1+0=1,1+1=10,11+10=101,111+111=1110</li><img src="/2019/01/16/汇编/1-1F914100916142.png" title="This is an image"><li>二进制减法:1-0=1,10-1=1,101-11=10,1100-111=101</li><img src="/2019/01/16/汇编/1-1F914104043P9.png" title="This is an image"></ol><p><b>八进制</b></p><p>八进制有0~7共8个数字,基数为8,加法运算时逢八进一,减法运算时借一当八</p><ol><li>八进制加法:3+4=7,5+6=13,75+42=137,2427+567-3216</li><img src="/2019/01/16/汇编/1-1F914144329401.png" title="This is an image"><li>八进制减法:6-4=2,52-27=23,307-141=146,7430-1451=5757</li><img src="/2019/01/16/汇编/1-1F914150Q5A4.png" title="This is an image"></ol><p><b>十六进制</b></p><p>十六进制中,用A表示10,B表示11,C表示12,D表示13,E表示14,F表示15,因此有0~F共有16个数字,基数为16,加法运算时逢16进1,减法运算时借1当16.</p><ol><li>十六进制加法:6+7=D,18+BA=D2,595=792=D27,2F87+F8A=3F11</li><img src="/2019/01/16/汇编/1-1F914153254337.png" title="This is an image"><li>十六进制减法:D-3=A,52-2F=23,E07-141=CC6,7CA0-1CB1=5FEF</li><img src="/2019/01/16/汇编/1-1F91416123IP.png" title="This is an image"></ol><p><b>进制转换</b></p><p><b>将二进制、八进制、十六进制转换为十进制</b></p><p style="color:red">二进制,八进制和十六进制向十进制转换都非常容易,就是”按权相加”.</p><p style="color:black">所谓”权”,也即”位权”</p><p></p><p>假设当前数字是N进制,那么</p><ul><li>对于整数部分,从右往左看,第i位的位权等于N<sup>i-1</sup></li><li>对于小数部分,恰好相反,要从左往右看,第j位的位权为N<sup>-j</sup></li></ul><ol><li><b>整数部分</b></li><p>将八进制数字53627转换成十进制:53627=5x8<sup>4</sup>+3x8<sup>3</sup>+6x8<sup>2</sup>+2x8<sup>1</sup>+7x8<sup>0</sup></p><li><b>小数部分</b></li><p>将八进制数字423.5176转换成十进制:423.5176=4x8<sup>2</sup>+2x8<sup>1</sup>+3x8<sup>0</sup>+5x8<sup>-1</sup>+1x8<sup>-2</sup>+7x8<sup>-3</sup>+6x8<sup>-4</sup></p><p>小数部分和证书部分相反,要从左往右看,第一位的位权为8<sup>-1</sup>=1/8</p></ol><p><b>将十进制转换成二进制,八进制、十六进制</b></p><ol><li>整数部分</li><p>将十进制整数转换为N进制整数采用”除N取余,逆序排列”法.具体做法是</p><ul><li>将N作为除数,用十进制整数除以N,可以得到一个商和余数</li><li>保留余数,用商继续除以N,又得到一个新的商和余数</li><li>仍保留余数,用商继续除以N,还会得到一个新的商和余数</li><li>……</li><li>如此反复进行,每次都保留余数,用商接着除以N,直到商为0时停止</li></ul><p>把先得到的余数作为 N 进制数的低位数字，后得到的余数作为 N 进制数的高位数字，依次排列起来，就得到了 N 进制数字。<img src="/2019/01/16/汇编/1-1F9151J30K46.png" title="This is an image"></p><li>小数部分</li><p>十进制小数转换成N进制小数采用”</p><p style="color:red">乘N取整,顺序排列</p>“法.具体做法如下<p></p><ul><li>用N乘以十进制小数,可以得到一个积,这个积包含了整数部分和小数部分;</li><li>将积的整数部分取出,再用N乘以余下的小数部分,又得到一个新的积;</li><li>再将积的整数部分取出,继续用N乘以余下的小数部分;</li><li>……</li><li>如此反复进行,每次都取出整数部分,用N接着乘以小数部分,直到几种的小数部分为0,或者达到所要求的精度为止</li><p>把取出的整数部分按顺序排列起来，先取出的整数作为 N 进制小数的高位数字，后取出的整数作为低位数字，这样就得到了 N 进制小数。</p>1-1F91Q20520335.png<img src="/2019/01/16/汇编/1-1F91Q20520335.png" title="This is an image"></ul></ol><p>如果一个数字既包含了整数部分又包含了小数部分,那么将整数部分和小数部分分开,分别按照上面的方法完成转换,然后再合并在一起即可</p><p><b style="color:red">注意</b></p><p>十进制小数转换成其他进制小数时,结果有可能是一个无限位的小数</p><p><b>二进制和八进制、十六进制的转换</b></p><p>将二进制转换为八进制和十六进制时就有非常简洁的方法，反之亦然</p><ol><li>二进制整数和八进制整数之间的转换</li><p>二进制整数转换成八进制整数时,每三位二进制数字转换为一位八进制数字,运算的顺序是从低位向高位依次进行,高位不足三位用零补齐</p><img src="/2019/01/16/汇编/1-1F919102I0949.png" title="This is an image"><p>八进制整数转换成二进制数时,思路是相反的,每一位八进制数字转换为三位二进制数字,运算的顺序也是从低位向高位依次进行</p><img src="/2019/01/16/汇编/1-1F919103A2R7.png" title="This is an image"><li>二进制整数和十六进制整数之间的转换</li><p>二进制整数转换为十六进制整数时,每四位二进制数字转换为一位十六进制数字,运算的顺序是从低位向高位依次进行,高位不足四位用零补齐.</p><img src="/2019/01/16/汇编/1-1F919104H9539.png" title="This is an image"><p>十六进制整数转换为二进制整数时,思路是相反的,每一位十六进制数字转换为四位二进制数字,运算顺序也是从低位向高位依次进行</p><img src="/2019/01/16/汇编/1-1F91910553H50.png" title="This is an image"></ol><table><tbody><tr><th>十进制</th><td>0</td><td></td><td>1</td><td></td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td></tr><tr><th>二进制</th><td>0</td><td>1</td><td>10</td><td>11</td><td>100</td><td>101</td><td>110</td><td>111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td><td>10000</td></tr><tr><th>八进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>20</td></tr><tr><th>十六进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td></td><td>F</td><td>10</td></tr></tbody></table><h4>内存存储</h4><p>在内存中存储时,由于内存单元是字节单元(一个单元存放一个字节)则一个字要用两个地址连续的内存单元来存放,这个字的低位字节存放在低地址单元中,高位字节存放在高地址单元中</p><p>字单元:即存放一个字型数据(16位)的内存单元,由两个地址连续的内存单元组成.高地址内存单元中存放字型数据的高位自己,低地址内存单元中存放字型数据的低位字节.</p><h4>DS和[address]</h4><p>CPU要读写一个内存单元的时候,必须给出这个内存单元的地址,在8086CPU中,内存地址有段地址和偏移地址组成.8086CPU中有一个DS寄存器,通常用来存放要访问数据的段地址.</p><pre><br>mov bx,1000h<br>mov ds,bx<br>mov al,[0]</pre><p>详细解释mov al,[0].前面我们使用mov指令完成过两种传送.1,将数据直接传送到寄存器,2将一个寄存器中的内容送入另一个寄存器</p><p>也可以使用mov指令将一个内存单元中的内容送入另一个寄存器中.mov 寄存器名,内存单元地址</p><p>“[…]”标识一个内存单元,”[…]”中的0标识内存单元的偏移地址,我们知道只有偏移地址是不能定位一个内存单元的,那么在指令执行时,8086CPU自动取ds中的数据为内存单元的段地址</p><p><b style="color:red">注意</b></p><p>8086CPU不支持将数据直接送入段寄存器的操作,ds是一段寄存器,所以mv ds,1000h这条指令是非法的.</p><h4>字的传送</h4><p style="color:red">因为8086CPU是16位结构,有16根数据线,所以一次性传送16位的数据,也就是说可以一次性传送一个字.只要在mov指令中给出16位寄存器就可以进行16位数据的传送(简单理解就是如果mov指令后面给的是ax就取2个字节数据给ax,如果是al就读一个字节数据给寄存器的al)</p><h4>mov,add,sub指令</h4><p>常见的mov指令形式:mov ax,8(mov 寄存器 数据),mov ax,bx(mov 寄存器 寄存器),mov ax,<a href="mov 寄存器 内存单元">0</a>,mov [0],bx(mov 内存单元 寄存器),mov ds,ax(mov 段寄存器,寄存器),mov ax,ds(mov 寄存器 段寄存器),mov [0],cs(mov 内存单元 段寄存器),mov ds,[0]</p><p>add和sub指令同mov一样,都有两个操作队形</p><h4>数据段</h4><p><b style="color:red">总结</b></p><ol><li>字在内存中存储时,要用两个地址连续的内存单元存放,字的低位字节存放在低地址单元中,高位字节存放在高地址单元中</li><li>用mov指令访问内存单元,可以再mov指令中只给出单元的偏移地址,此时段地址默认在DS寄存器中</li><li>[address]表示一个偏移地址为address的内存单元.</li><li>在内存和寄存器之间传送字型数据时,高地址单元和高8位寄存器,低地址单元和低8位寄存器相对应</li><li>mov,add,sub是具有两个操作对象的指令,jmp是具有一个操作对象的指令</li><li>可以根据自己的推测,在Debug中实验指令的新格式</li></ol><h4>栈</h4><p>栈的基本操作有入栈和出栈,入栈就是将一个新的元素放到栈顶,出栈就是从栈顶取出一个元素.栈顶的元素总是最后入栈,需要出栈时,又最先被从栈中取出.栈的这种操作规则被称为LIFO</p><h4>CPU提供的栈机制</h4><p>8086CPU提供入栈和出栈指令,最基本的两个是PUSH(入栈)和POP(出栈).比如push ax表示将寄存器ax中的数据送入栈中,pop ax表示从栈顶取出数据送入ax,8086CPU的入栈和出栈操作都是以字为单位进行的</p><p style="color:BLUE">8086CPU中,有两个寄存器,段寄存器SS和寄存器SP,栈顶的段地址存放在SS中,偏移地址存放在SP中,任意时候,SS:SP指向栈顶的元素.push指令和pop指令执行时,CPU从SS和SP中得到栈顶的地址</p><h4>栈顶超界问题</h4><p style="color:red">一句话只能自己在编程的时候要自己操心栈顶超姐的问题,要根据可能用到的醉倒栈空间来安排栈的大小,防止入栈的数据太多而导致的超界;执行出栈操作时也要注意,以防栈空的时候继续出栈而导致的超界</p><h4>push,pop指令</h4><p>push和pop指令是可以再寄存器和内存(栈空间当然也是内存空间的一部分,它只是一段可以以一种特殊的方式进行访问的内存空间.)之间传送数据的</p><p style="text-align:center;color:black"><b>栈的综述</b></p><ol><li>8086CPU提供了栈操作的机制,方案如下.<p>在SS,SP中存放栈顶的段地址和偏移地址;提供入栈和出栈指令,他们根据SS:SP指示的地址,按照栈的方式访问内存单元</p></li><li>push指令的执行步骤:<p>SP=SP-2;<br>向SS:SP指向的字单元中送入数据</p></li><li>pop指令的执行步骤:<p>从SS:SP指向的子单元中读取数据;<br>SP=SP+2</p></li><li>任意时刻,SS:SP指向栈顶元素</li><li>8086CPU只记录栈顶,栈空间的大小我们要自己管理</li><li>用栈来暂存以后需要恢复的寄存器的内容时,寄存器出栈的顺序要和入栈的顺序相反</li><li>push,pop实质上是一种内存传送指令,注意它们的灵活应用</li></ol><h2>第一个程序</h2><h4>一个源程序从写出到执行的过程</h4><p>可执行文件包含两部分内容<ul><li>程序(从源程序中的汇编指令翻译过来的机器码)和数据(源程序中定义的数据)</li><li>相关的描述信息(比如,程序有多大,要占用多少内存空间等)</li></ul></p><p>汇编语言程序从写出到最终执行的简要过程<ol><li>编写汇编源程序</li><li>对源程序进行编译链接</li><li>执行可执行文件中的程序</li></ol></p><h4>源程序</h4><b style="color:black">程序4.1</b><pre>assume cs:codesg<br>code segment<br>mov ax,0123h<br>mov bx,0456h<br>add ax,bx<br>add ax,ax<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end</pre><ol><li style="color:black">伪指令</li><p>在汇编语言源程序中,包含两种指令,一种是汇编指令,一种是伪指令.汇编指令是有对应的机器码的指令,可以被编译魏机器指令,最终为CPU所执行.而伪指令没有对应的机器指令,最终不被CPU所执行.那么谁来执行伪指令呢?伪指令是由编译器来执行的指令,编译器根据伪指令来进行相关的编译工作,程序4.1中出现的3中伪指令:XXX segment,:,XXX ends.segment和ends是一对成对使用的伪指令,这是在写可被编译器编译的汇编程序时,必须要用到的一对伪指令.segment和ends的功能是定义一个段,segment说明一个段的开始,ends说明一个段的结束.一个段必须有一个名称来标识</p><p>伪指令:end,end是一个汇编程序的结束标记,编译器在编译汇编程序的过程中,如果碰到了伪指令end,就结束对源程序的编译.</p><p>assume:这条伪指令的含义为假设,它假设某一段的寄存器和程序中的某一个用segment…ends定义的段相关联.</p><li style="color:black">源程序中的”程序”</li><p>源程序中的汇编指令组成了最终有计算机执行的程序,而源程序中的伪指令由编译器来处理的,这里所说的程序就是指源程序中最终由计算机执行,处理的指令和数据</p><li style="color:black">标号</li><p>汇编源程序中,除了汇编指令和伪指令,还有一些标号,一个标号指代一个地址.比如codesg在segment的前面,作为一个段的名称,这个段的名称最终被编译,链接程序处理为一个段的段地址</p><li style="color:black">程序的结构</li><p>源程序是由一些段构成的我们可以在这些断种存放代码,数据或将某个段当做栈中的空间.</p><li style="color:black">程序返回</li><p>一个程序P2在可执行文件中,则必须有一个正在运行的程序P1,将P2从可执行文件中加载入内存后,将CPU的控制权交给P2,P2才能得以运行.P2开始运行后,P1暂停运行.而当P2运行完毕后,应该将CPU的控制权交还给使它得以运行的程序,我们称这个过程为:程序返回.<pre>mov ax,4c00h<br>int 21h</pre></p><li style="color:black">语法错误和逻辑错误</li></ol><h4>编辑源程序</h4><p>可以用任意的文本编辑器来编辑源程序,只要最终将其存储为.asm即可</p><h4>编译</h4><h4>连接</h4><h4>以简化的方式进行编译和连接</h4><h4>1.exe的执行</h4><h4>谁将可执行文件中的程序装载入内存并使它运行?</h4><p style="text-align:center">操作系统的外壳</p><p>操作系统是由多个功能模块组成的庞大,复杂的软件系统.任何通用的操作系统,都要提供一个称为shell(外壳)的程序,用户(操作人员)使用这个程序来操作计算机系统进行工作</p><p>DOS中有一个程序command.com,这个程序在DOS中称为命令解释器,也就是DOS系统的shell</p><p>DOS启动时,先完成其他重要的初始化工作,然后运行command.com,command.com运行后,执行完其他的相关任务后,在屏幕上显示出由当前盘符和当前路径组成的提示符,然后等待用户输入</p><p>用户可以输入所以执行的命令,比如,cd,dir,type等,这些命令由command执行,command执行完这些命令后,再次显示由当前盘符和当前路径组成的提示符,等待用户的输入</p><p>如果用户要执行一个程序,则输入该程序的可执行文件的名称,command首先根据文件名找到可执行文件,然后将这个可执行文件中的程序加载如内存,设置CS:IP指向程序的入口.此后,command暂停运行,CPU运行程序,程序运行结束后,返回到command中,command再次显示由当前盘符和当前路径组成的提示符,等待用户的输入</p><p>在DOS中,command处理各种输入:命令或要执行的程序的文件名.我们就是通过command来进行工作的</p><ol><li>在DOS中直接执行1.exe时,是正在运行的command,将1.exe中程序加载入内存;</li><li>command设置CPU的CS:IP指向程序的第一条指令(即程序的入口),从而使程序得以运行;</li><li>程序运行结束后,返回到command中,CPU继续运行command</li></ol><p style="text-align:center">汇编程序从写出到执行的过程</p><p>编程-&gt;1.asm-&gt;编译-&gt;1.obj-&gt;连接-&gt;1.exe-&gt;记载-&gt;内存中的程序-&gt;运行</p><h2>第五章[BX]和loop指令</h2><br><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/miku.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":false},"log":false,"pluginJsPath":"lib/","pluginRootPath":"live2dw/","tagMode":false});</script></body>]]></content>
    
    <summary type="html">
    
      
      
        &lt;body&gt;&lt;h1&gt;基础知识&lt;/h1&gt;&lt;h4&gt; 汇编语言的组成&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;汇编指令&lt;/li&gt;&lt;li&gt;伪指令&lt;/li&gt;&lt;li&gt;其他符号:如+,-,*,/等&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt; 存储器&lt;/h4&gt;&lt;p&gt;CPU所需要的指令和数据都在存储器中存放,也就是我们所说的内存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>KVO原理和自定义</title>
    <link href="https://blog.devvk.com/2019/01/07/KVO%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://blog.devvk.com/2019/01/07/KVO原理和自定义/</id>
    <published>2019-01-07T08:38:07.000Z</published>
    <updated>2019-01-07T08:51:12.392Z</updated>
    
    <content type="html"><![CDATA[<h1>KVO的自定义和原理分析</h1><p></p><h2>KVO的触发模式</h2><p></p><p>kvo的触发方式分为<b>手动</b>和<b>自动触发</b></p><br><p>自动触发:</p><br><p>添加观察,实现监听方法</p><br><pre><br>[_p addObserver:self forKeyPath:@”name” options:(NSKeyValueObservingOptionNew) context:nil];<br><br>- (void)observeValueForKeyPath:(NSString <em>)keyPath ofObject:(id)object change:(NSDictionary<nskeyvaluechangekey,id> </nskeyvaluechangekey,id></em>)change context:(void <em>)context {<br>    NSLog(@”%@,%@”,change,_p.name);<br>}<br></em></pre><br><p>手动观察</p><br><p>实现automaticallyNotifiesObserversForKey:(NSString )key 方法,判断key值是否开启手动观察</p><br><pre><br>@implementation Person<br><br>//返回一个bool值,该值指示所观察的对象是否支持对给定的键值自动观察<br>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString <em>)key {<br>    if ([key isEqualToString:@”name”]) {<br>        return NO;<br>    }<br>    return YES;<br>}<br>@end<br><br></em></pre><br><p>当开启手动观察后,如果需要监听值的改变,必须调用willChangeValueForKey:和didChangeValueForKey:</p><br><pre><br> [_p willChangeValueForKey:@”name”];<br> _p.name = [NSString stringWithFormat:@”%d”,a++];<br> [_p didChangeValueForKey:@”name”];<br></pre><br><br><h2>KVO的属性依赖</h2><br><pre><br>@interface Dog : NSObject<br>@property(nonatomic, assign) int age;<br>@property(nonatomic, assign) int level;<br>@end<br><br>@interface Person : NSObject<br>@property(nonatomic, copy) NSString name;<br>@property(nonatomic, strong)Dog <em>dog;<br>@end<br><br>+ (NSSet&lt;NSString </em>&gt; <em>)keyPathsForValuesAffectingValueForKey:(NSString </em>)key {<br>    NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];;<br>    if ([key isEqualToString:@”dog”]) {<br>        keyPaths = [[NSSet alloc] initWithObjects:@”_dog.age”,@”_dog._level”, nil];<br>    }<br>    return keyPaths;<br>}<br><br> _p = [[Person alloc] init];<br>[_p addObserver:self forKeyPath:@”dog” options:(NSKeyValueObservingOptionNew) context:nil];<br></pre><br><br><p>当我们需要监听属性的属性的变化,如果只有一个属性可以直接使用keypath,但是如果有多个属性时,我们要么添加多个addObserver,要不就是使用属性依赖</p><p></p><h2>KVO的原理</h2><p></p><ol><li>创建子类NSKVONotyfing_Person</li><li>重写setter方法</li><li>将isa指针指向子类</li><li>保存观察者</li><li>通知观察者,并调用父类的set方法</li></ol><p></p><h2>自定义KVO</h2><p></p><p>我在思考上面的步骤,并在完成时进行了扩展和封装,并取消掉了4和5的部分步骤,而是使用了imp的block的方法,使代码看起来更加简单和清晰</p><br><pre><br>- (void)WQ<em>addObserver:(NSObject <em>)observer forKeyPath:(NSString </em>)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void <em>)context {<br>    //子类名称<br>    NSString </em>className = [[@”WQ” stringByAppendingString:@”KVONotyfing</em>“] stringByAppendingString:NSStringFromClass([self class])];<br>    //创建子类<br>    Class myClass = objc_allocateClassPair([self class], [className UTF8String], 0);<br>    //注册子类<br>    objc_registerClassPair(myClass);<br>    //将keyPath的首字母大写<br>    NSString <em>propertyName = [keyPath capitalizedString];<br>    //完成setter方法名拼接<br>    NSString </em>methodName = [[@”set” stringByAppendingString:propertyName] stringByAppendingString:@”:”];<br>    //获取方法的SEL<br>    SEL methodSel = NSSelectorFromString(methodName);<br>    //添加方法实现<br>    IMP methodImp = imp_implementationWithBlock(^(id self, id value) {<br>    //创建objc_super结构体,结构体有两个成员变量,一个是receiver,一个是super<em>class,reciver是指定类的实例,在本利中就是Person类的实例,但是这个实例对象的类型经过更改isa指针指向时已经变为子类类型(WQ</em> KVONotyfing_ Person),第二个参数是父类,也就是Person类.<br>        struct objc_super * reciver = malloc(sizeof(struct objc_super));<br>        reciver-&gt;receiver = self;<br>        reciver-&gt;super_class = [self superclass];<br>        //调用objc_msgSendSuper,向父类发送消息,第一个参数就是objc_super结构体,第二个参数就是SEL,后面的参数就是sel的参数<br>        objc_msgSendSuper(reciver, methodSel,value);<br>        //判断observer是否存在,如果存在就调用objc_msgSend,告诉观察者,值发生了改变<br>        if (observer) {<br>          objc_msgSend(observer, @selector(observeValueForKeyPath:ofObject:change:context:),keyPath,nil,@{@”new:”:value,@”kind”:@1},context);<br>        }<br>    });<br> //为子类添加setter方法<br> class_addMethod(myClass,methodSel,methodImp,”v@:@”);<br> //将父类的isa指针,指向子类<br> object_setClass(self, myClass);<br>}<br><br></pre><br><p>在我研究的过程中,我本来也是创建了函数来实现setter方法,最后看到IMP的方法可以穿入block作为方法实现,如果是使用函数的话,函数默认有两个参数(id self,SEL _cmd).而使用imp的block的话(有一个默认参数id self,去除了SEL _cmd).</p><br><p>还有就是在调用父类的setter方法时,一只调用不了,我也一直在想到底是什么问题,检查了几次代码发现没有问题,然后在其他文件夹中找到了一个Person的分类,重写了setter方法,这个错误也让我明白了,如果分类重写了某个方法,如果一旦调用该方法,会执行分类的方法,而不会再调用类本身的方法(因为这个方法已经失效)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;KVO的自定义和原理分析&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;&lt;h2&gt;KVO的触发模式&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;kvo的触发方式分为&lt;b&gt;手动&lt;/b&gt;和&lt;b&gt;自动触发&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;自动触发:&lt;/p&gt;&lt;br&gt;&lt;p&gt;添加观察,实现监听方法&lt;/p&gt;&lt;br&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="KVO分析" scheme="https://blog.devvk.com/tags/KVO%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CFNetwork</title>
    <link href="https://blog.devvk.com/2018/12/19/CFNetwork/"/>
    <id>https://blog.devvk.com/2018/12/19/CFNetwork/</id>
    <published>2018-12-19T02:13:46.000Z</published>
    <updated>2018-12-19T08:19:37.282Z</updated>
    
    <content type="html"><![CDATA[<h1 style="text-align:center">CFNetwork</h1><h2>引言</h2><p style="text-indent:2em">在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有<a href="https://developer.apple.com/documentation/foundation/nsurlsession" target="_blank" rel="noopener">NSURLSession</a>,&nbsp;<a href="https://developer.apple.com/documentation/foundation/nsurlconnection" title="NSURLConnect在iOS9之后,已经被苹果废弃取而代之的是NSURLSession" target="_blank" rel="noopener">NSURLConnect</a>,和底层的<a href="https://developer.apple.com/documentation/cfnetwork" target="_blank" rel="noopener">CFNetwork</a></p><br><p style="text-indent:2em">在目前我做过的项目中一直在使用<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a>,这个框架在3.0版本时放弃了NSURLConnect,开始采用了苹果推荐的NSURLSession.主要使用提升了网络连接速度,Session采用了共享,而非每次新建.使用共享就是避免每次发送请求时都会进行tcp的三次握手,session共享就是复用这个tcp连接.</p><h2>使用CFNetwork进行网络请求</h2><br><p style="text-indent:2em">CFNetwork是基于C语言实现的一套网络请求框架,所以它的使用难度是比NSURLSession和NSURLConnect大的.示例代码如下</p><br><pre><br>//创建请求URL字符串<br>    NSURL <em>url = [NSURL URLWithString:URLString];<br>//创建HTTP消息<br>    CFHTTPMessageRef request = CFHTTPMessageCreateRequest(kCFAllocatorDefault, CFSTR(“GET”),(<strong>bridge CFURLRef)url, kCFHTTPVersion1_1);<br>//设置请求头content-type<br>    for (id object in self.networkResponseContentType) {<br>        if ([object isKindOfClass: [NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, CFSTR(“Content-type”), (</strong>bridge CFStringRef )object);<br>        }<br>        else {<br>            NSAssert([object isKindOfClass:[NSString class]], @”content-type value must be string”);<br>        }<br>    }<br> //设置请求头<br>    [self.allHttpHeaders enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL </em> _Nonnull stop) {<br>        if ([key isKindOfClass:[NSString class]] &amp;&amp; [obj isKindOfClass:[NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, (<strong>bridge CFStringRef)key, (</strong>bridge CFStringRef )obj);<br>        }<br>        else {<br>            NSAssert([obj isKindOfClass:[NSString class]] &amp;&amp; [key isKindOfClass:[NSString class]], @”http header key and value must be string”);<br>        }<br>    }];<br>   //HTTP返回消息<br>    CFHTTPMessageRef reponse = [self performHTTPRequest:request];<br>    NSData <em>data = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:nil];<br>    CFHTTPMessageSetBody(request, (__bridge CFDataRef)data);<br><br>    CFIndex statusCode;<br>    statusCode = CFHTTPMessageGetResponseStatusCode(reponse);<br>    if (statusCode == 200) {<br>        CFDataRef responseDataRef = CFHTTPMessageCopyBody(reponse);<br>        NSDictionary </em>dic = [NSJSONSerialization JSONObjectWithData:(<strong>bridge NSData <em>)responseDataRef options:NSJSONReadingAllowFragments error:nil];<br>        success(reponse,dic);<br>    }<br>    else {<br>        NSError </em>error = [NSError errorWithDomain:NSCocoaErrorDomain code:statusCode userInfo:@{@”url”:url.absoluteString,@”errorDesc”:(</strong>bridge NSString <em>)CFHTTPMessageCopyResponseStatusLine(reponse)}];<br>        failure(reponse,error);<br><br>    }<br></em></pre><br><p style="text-indemt:2em">下面的方法是接收到数据流后,然后将流数据拼接起来返回</p><br><pre><br>- (CFHTTPMessageRef)performHTTPRequest:(CFHTTPMessageRef)request<br>{<br>//从请求中读取流<br>    CFReadStreamRef requestStream = CFReadStreamCreateForHTTPRequest(NULL, request);<br>//打开流<br>    CFReadStreamOpen(requestStream);<br>//拼接流<br>    NSMutableData responseBytes = [NSMutableData data];<br><br>    CFIndex numBytesRead = 0;<br>    do {<br>        UInt8 buf[1024];<br>        numBytesRead = CFReadStreamRead(requestStream, buf, sizeof(buf));<br><br>        if (numBytesRead &gt; 0) {<br>            [responseBytes appendBytes:buf length:numBytesRead];<br>        }<br>    } while (numBytesRead &gt; 0);<br> //<br>    CFHTTPMessageRef response = (CFHTTPMessageRef) CFReadStreamCopyProperty(requestStream, kCFStreamPropertyHTTPResponseHeader);<br>    CFHTTPMessageSetBody(response, (__bridge CFDataRef)responseBytes);<br><br>    CFReadStreamClose(requestStream);<br>    CFRelease(requestStream);<br><br>    return ((CFHTTPMessageRef) CFAutorelease(response));<br>}<br><br></pre><br><br><h2>CFHTTPMessageRef详解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 style=&quot;text-align:center&quot;&gt;CFNetwork&lt;/h1&gt;

&lt;h2&gt;引言&lt;/h2&gt;

&lt;p style=&quot;text-indent:2em&quot;&gt;在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有&lt;a href=&quot;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c语言操作符</title>
    <link href="https://blog.devvk.com/2018/12/06/c%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://blog.devvk.com/2018/12/06/c语言操作符/</id>
    <published>2018-12-06T02:59:26.000Z</published>
    <updated>2018-12-06T05:18:28.988Z</updated>
    
    <content type="html"><![CDATA[<p>#####操作符</p><ol><li><p>算术操作符</p><p>+,  -,  *,  /,  %<br>除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作符魏整数的情况,返回值不是两个操作符的商而是两数进行整除后的余数.</p></li><li><p>移位操作符<br>(以下都是以8位二进制讨论10010110)<br>分为左移位和右移位,移位操作简单的理解就是将一个值向左或者向右移动指定的位数.</p></li></ol><p>左移位:将指定的数向左移动若干位,但是最左边的几位会被抛弃,右边不足的几位由0补齐.这样又可以形成一个完整的二进制.</p><p>右移位:将指定的数向右移动若干位,但是在右移位当中分为两种情况,一种是逻辑移位,一种是算术移位,逻辑移位是指将指定的数向右移动若干位,左边移入的位用0补齐.然后最右边的会被抛弃.算术移位是指,将指定的数移动若干位,左边移入的位不是用0来补齐而是用符号位来补齐.如果符号位为0就用0补齐,如果是1就用1补齐.</p><p>左移三位:10110000<br>右移三位:逻辑:00010010,算术:11110010</p><p>左移的操作符为&lt;&lt;,右移操作符为&gt;&gt;,左操作数的值将移动右操作数的位数,两个操作数都必须魏整型类型</p><p><strong>警告</strong></p><p>标准说明所有无符号的移位操作都是逻辑移位,但是有符号的移位操作到底是采用逻辑移位还是算术移位取决于编译器.</p><ol><li>位操作符<br>位操作符对他们的操作数的各个位执行AND.OR和XOR等逻辑操作.</li></ol><p>&amp; | ^<br>AND OR XOR</p><p>当两个位进行AND操作时,如果<strong>两个位都是1结果为1</strong>,否则都为0.当两个位进行OR操作时,如果<strong>两个位都是0,结果为0</strong>,否则结果为1.当两个位进行XOR操作时,如果<strong>两个位不同则为1</strong>,否则为0.</p><p>举例:<br>a 为00101110<br>b 为01011011</p><p>a &amp; b = 00001010<br>a | b = 01111111<br>a ^ b = 01110101</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####操作符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;算术操作符&lt;/p&gt;
&lt;p&gt;+,  -,  *,  /,  %&lt;br&gt;除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作
      
    
    </summary>
    
      <category term="C和指针" scheme="https://blog.devvk.com/categories/C%E5%92%8C%E6%8C%87%E9%92%88/"/>
    
    
      <category term="算术操作符" scheme="https://blog.devvk.com/tags/%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="移位操作符" scheme="https://blog.devvk.com/tags/%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="位操作符" scheme="https://blog.devvk.com/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="赋值" scheme="https://blog.devvk.com/tags/%E8%B5%8B%E5%80%BC/"/>
    
      <category term="单目运算" scheme="https://blog.devvk.com/tags/%E5%8D%95%E7%9B%AE%E8%BF%90%E7%AE%97/"/>
    
      <category term="关系操作符" scheme="https://blog.devvk.com/tags/%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逻辑操作符" scheme="https://blog.devvk.com/tags/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="条件操作符" scheme="https://blog.devvk.com/tags/%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逗号操作符" scheme="https://blog.devvk.com/tags/%E9%80%97%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="下标引用,函数调用和结构成员" scheme="https://blog.devvk.com/tags/%E4%B8%8B%E6%A0%87%E5%BC%95%E7%94%A8-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%92%8C%E7%BB%93%E6%9E%84%E6%88%90%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>调试</title>
    <link href="https://blog.devvk.com/2018/12/05/%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.devvk.com/2018/12/05/调试/</id>
    <published>2018-12-05T07:12:00.000Z</published>
    <updated>2019-02-12T03:44:46.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><h5 id="dSYM文件"><a href="#dSYM文件" class="headerlink" title="dSYM文件"></a>dSYM文件</h5><p>调试信息文件</p><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p>断点目前分为swift error ,exception,symbolic,opne gl error,constraint error,Test faliure error.</p><ol><li>异常断点</li></ol><p>首先介绍异常断点(在开发中也被称为全局断点),在代码运行过程中抛出异常后,断点会阻止程序运行,如果不设置异常断点,只看控制台也不知道到底发生了什么.设置了异常断点后,我们经常会看到程序会在抛出异常的瞬间,停止程序.然后在调用栈中我们可以找到导致程序抛出异常的代码.从而帮助我们解决问题,在这里我建议大家在创建完项目后,就打上异常断点,这样在抛出异常的时候就能快速查阅调用堆栈,方便解决问题.</p><ol><li>符号断点</li></ol><p>我们可以设置符号断点,符号可以使方法名,类方法名,c函数的方法名等.(不常用)</p><ol><li>open gl (没用过) </li><li>编辑断点</li></ol><p>我们滚动到需要添加断点的代码时,添加完断点,可以点击鼠标右键选择edit breakpoint,来编辑断点.这个在日常开发中也是很有用的.可以设置condition,来终止程序继续执行,也可以添加action(apple script,sound,shell,log,debug command,GPU frame)等.</p><ol><li>共享断点</li></ol><p>我们可以在断点导航面板,点击断点,然后鼠标右键,然后点击share,就可以将断点保存到工程文件包的xcshareddata中.然后提交到代码版本库中.</p><h5 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h5><p>我们在开发过程中经常会使用po和p来调试</p><p>p主要用来在控制台输出基础数据类型</p><p>po主要用来在控制要输出对象</p><p>还可以使用register read来查看寄存器信息,我们知道使用register关键字申明的变量不是保存在内存上的,而是保存在寄存器上的.所有不能使用取地址符来方法这些变量.因为取地址符是用来访问内存的.</p><p>如果你是一名python的开发者,或者说熟悉python,也可以在控制台输入script来引入python脚本来进行调试</p><h5 id="NSZombieEnabled"><a href="#NSZombieEnabled" class="headerlink" title="NSZombieEnabled"></a>NSZombieEnabled</h5><p>NSZombieEnabled,它会用一个僵尸实现来替换默认的dealloc实现.当引用计数降到0时,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LLDB&quot;&gt;&lt;a href=&quot;#LLDB&quot; class=&quot;headerlink&quot; title=&quot;LLDB&quot;&gt;&lt;/a&gt;LLDB&lt;/h3&gt;&lt;h5 id=&quot;dSYM文件&quot;&gt;&lt;a href=&quot;#dSYM文件&quot; class=&quot;headerlink&quot; title=&quot;dSYM文
      
    
    </summary>
    
    
      <category term="LLDB调试" scheme="https://blog.devvk.com/tags/LLDB%E8%B0%83%E8%AF%95/"/>
    
      <category term="断点" scheme="https://blog.devvk.com/tags/%E6%96%AD%E7%82%B9/"/>
    
      <category term="控制台" scheme="https://blog.devvk.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
      <category term="NSZombieEnabled" scheme="https://blog.devvk.com/tags/NSZombieEnabled/"/>
    
      <category term="崩溃类型" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="断言" scheme="https://blog.devvk.com/tags/%E6%96%AD%E8%A8%80/"/>
    
      <category term="异常" scheme="https://blog.devvk.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="崩溃报告收集" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%94%B6%E9%9B%86/"/>
    
      <category term="第三方崩溃报告服务" scheme="https://blog.devvk.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView/WKWebview</title>
    <link href="https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/"/>
    <id>https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/</id>
    <published>2018-12-04T02:34:26.000Z</published>
    <updated>2018-12-05T07:09:55.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebview-WKWebview"><a href="#UIWebview-WKWebview" class="headerlink" title="UIWebview/WKWebview"></a>UIWebview/WKWebview</h1><h2 id="事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决"><a href="#事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决" class="headerlink" title="事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决."></a>事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决.</h2><p>问题: 本来的项目是使用的UIWebview,但是苹果推荐在iOS8以后希望开发者使用WKWebview,不仅是在内存消耗释放等方面做出了优化,更是在其他性能发面做出了巨大的改变和优化.(具体哪些后面再说),所以在客户提出说要优化webview的加载速度时,首先想到的是将UIWebview替换成WKWebview.不换不知道,一换吓一跳.然后就是我和测试的锅了,没有进行全面的测试,因为有些链接会去下载利用企业证书签名的app.但是在点击时却下载不了,客户那边很着急,然后我连上测试机,打开safari开始调试,发现在js文件的下载方法中进行了判断,会对浏览器的标识进行判断.因为h5页面也不是我们公司写的.所以不能修改,只能自己换回UIWebview.没想到的是UIWebview是可以的.那么UIWeb和WKWeb到底什么地方不同啦?</p><h2 id="UIWebview"><a href="#UIWebview" class="headerlink" title="UIWebview"></a>UIWebview</h2><p>在官方文档中明确指出,当你的apps运行在iOS 8及以后的使用应该使用WKWeb来代替UIWeb.如果你不想呈现可以不运行js文件,可以设置WKPreferences的属性javaScriptEnabled为false.(只需要记住在iOS 8以后尽量使用WKWeb).</p><p>注意点:</p><p>一个iOSapp如果运行在iOS10以后必须在info.plist文件中使用 那些权限的描述key.如果没添加可能会出现crash的情况.例如NSPhotoLibraryUsageDescription 和 NSCameraUsageDescription.</p><p>loadHTMLString(<em>:baseURL:)这个方法被用来loading 本地的html 文件.<br>loadRequest(</em>:)则是用来加载web content<br>stopLoading() 可以停止加载<br>isLoading property可以查看web是否正在加载<br>goback(),可以返回到webpage history,<br>goForward(),可以前进到webpage history<br>canGoBack 和canGoForward属性判断是否可以回退和前进<br>UIDataDetectorTypes:<br>在默认情况下web view自动转换手机号码.当一个phone lonks出现在web conten中.当这个phone linkl 被点击.就会拨打电话.如果想关闭该默认的行为,可以设置dataDetectorTypes.让它不包含phone number flag</p><p>scalesPageToFit设置这个属性可以在web content显示在web view上时,调整大小.用户可以使用手势调整scale</p><p>delegate:代理(UIWebviewDelegate)</p><p>注意点:<br>你不应该将webview或者是tableview对象内嵌到scollview中,如果你这样做了.可能会在造成意想不到的结果</p><p>然后剩下的就是我们调试的问题,可以通过Safari调试webview的内容.</p><p>uiwebview还可有显示其他的内容例如:keynote,pdf,page doct .但是如果要显示富文本尽量使用UITextview</p><p>在iOS6以后,设置restorationIdentifier 属性可以尝试保存url 历史.当缩放和滑动到其他页面时.再恢复期间,驶入将恢复这些值.以便web的内容和之前的一样</p><p>看完文档再看UIWebview的头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UIKIT_EXTERN API_DEPRECATED(&quot;No longer supported; please adopt WKWebView.&quot;, ios(2.0, 12.0)) API_UNAVAILABLE(tvos, macos) @interface UIWebView : UIView &lt;NSCoding, UIScrollViewDelegate&gt;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus 在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line">#define UIKIT_EXTERNextern &quot;C&quot; __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#else</span><br><span class="line">#define UIKIT_EXTERN        extern __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line"></span><br><span class="line">__attribute__设置函数属性(变量,类型)</span><br><span class="line"></span><br><span class="line">visibility属性是否设置将本项目的函数作为库使用时的可见性,g++编译时, 加入-fvisibility=hidden参数, 会将所有默认public属性设为hidden, 导致库外文件不可见</span><br><span class="line">但是如果设置了__attribute__((visibility (&quot;default&quot;)))的函数, 其public属性仍能对外可见, 而不是hidden。可见编译指令 -fvisibility是对所有属性符号进行处理, 而__attribute__((visibility (&quot;default&quot;)))是对特定函数可见性进行设置, 避免冲突</span><br><span class="line"></span><br><span class="line">第二个就是说这个api废弃了.然后说让你使用WKWeb.然后他还是支持从iOS2.0到iOS12</span><br><span class="line">第三个宏定义就是说这个api不支持tvos,macos.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@property (nullable, nonatomic, assign) id &lt;UIWebViewDelegate&gt; delegate;</span><br><span class="line">//通过这个代理方法可以决定是否加在网页中的链接,也可以在该方法中拦截加载和完成与js交互</span><br><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 开始加载</span><br><span class="line">- (void)webViewDidStartLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 加载完成</span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//加载失败出现错误</span><br><span class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//我们创建一个满屏的webview时,发现它是可以拖动的,我们也知道能拖动的view在iOS开发中都是继承或者是内嵌了uiscollview.</span><br><span class="line">//第二点这里声明属性时,使用了只读属性,在我们以后的开发中,外部只是访问属性的值时,也可以参考苹果的这种做法,在.h声明为只读,在.m声明为可读写.这样可以防止外部写入,防止外部修改.</span><br><span class="line">@property (nonatomic, readonly, strong) UIScrollView *scrollView NS_AVAILABLE_IOS(5_0);</span><br><span class="line">//加载web content</span><br><span class="line">- (void)loadRequest:(NSURLRequest *)request;</span><br><span class="line">//加载本地html文件</span><br><span class="line">- (void)loadHTMLString:(NSString *)string baseURL:(nullable NSURL *)baseURL;</span><br><span class="line">//加载其他类型的文件.例如keynote,pdf等</span><br><span class="line">- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;</span><br><span class="line">//当我们在调试webview时,经常会webview.request.url.发现这个url是会变的.所以在uiwebview的内部.当没加载一个新的页面时,这个request会被重新赋值.</span><br><span class="line">@property (nullable, nonatomic, readonly, strong) NSURLRequest *request;</span><br><span class="line">//刷新</span><br><span class="line">- (void)reload;</span><br><span class="line">//停止加载</span><br><span class="line">- (void)stopLoading;</span><br><span class="line">//返回</span><br><span class="line">- (void)goBack;</span><br><span class="line">//前进</span><br><span class="line">- (void)goForward;</span><br><span class="line">//能否后退</span><br><span class="line">@property (nonatomic, readonly, getter=canGoBack) BOOL canGoBack;</span><br><span class="line">//能否前进</span><br><span class="line">@property (nonatomic, readonly, getter=canGoForward) BOOL canGoForward;</span><br><span class="line">//是否正在加载</span><br><span class="line">@property (nonatomic, readonly, getter=isLoading) BOOL loading;</span><br><span class="line">//注入js的方法(交互方法)</span><br><span class="line">- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</span><br><span class="line">//调整页面首次加载时的规模,后期可以通过手势修改比例</span><br><span class="line">@property (nonatomic) BOOL scalesPageToFit;</span><br><span class="line"></span><br><span class="line">//NS_DEPRECATED_IOS(2_0, 3_0),3.0就废弃了,跳过</span><br><span class="line">@property (nonatomic) BOOL detectsPhoneNumbers NS_DEPRECATED_IOS(2_0, 3_0);</span><br><span class="line">//从3.0开始可用(这是就是设置当web content中出现手机号,邮箱等信息时,如果点击这些会自动进行打电话和发邮件等,可以通过设置该属性进行修改)</span><br><span class="line">@property (nonatomic) UIDataDetectorTypes dataDetectorTypes NS_AVAILABLE_IOS(3_0);</span><br><span class="line"></span><br><span class="line">//下面这三个是媒体播放的相关设置</span><br><span class="line">@property (nonatomic) BOOL allowsInlineMediaPlayback NS_AVAILABLE_IOS(4_0); // iPhone Safari defaults to NO. iPad Safari defaults to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackRequiresUserAction NS_AVAILABLE_IOS(4_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay NS_AVAILABLE_IOS(5_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">//增量</span><br><span class="line">@property (nonatomic) BOOL suppressesIncrementalRendering NS_AVAILABLE_IOS(6_0); // iPhone and iPad Safari both default to NO</span><br><span class="line">//键盘的显示设置</span><br><span class="line">@property (nonatomic) BOOL keyboardDisplayRequiresUserAction NS_AVAILABLE_IOS(6_0); // default is YES</span><br><span class="line">//编页码方式</span><br><span class="line">@property (nonatomic) UIWebPaginationMode paginationMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//分页模式</span><br><span class="line">@property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页长</span><br><span class="line">@property (nonatomic) CGFloat pageLength NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页间距</span><br><span class="line">@property (nonatomic) CGFloat gapBetweenPages NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页数</span><br><span class="line">@property (nonatomic, readonly) NSUInteger pageCount NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//图片在媒体中播放</span><br><span class="line">@property (nonatomic) BOOL allowsPictureInPictureMediaPlayback NS_AVAILABLE_IOS(9_0);</span><br><span class="line">//允许链接预览</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL allowsLinkPreview NS_AVAILABLE_IOS(9_0); // default is NO</span><br></pre></td></tr></table></figure><p>头文件也看完了.现在就说一下平时可能遇到的问题.</p><p>1.由于h5页面不只是放在app中的webview,也有可能在多个app中使用,那么怎么区分到底是哪个app的流量带入更大啦.我们可以设置user-agent.可以拼接上每个app的名称来进行区分.还可以进行拦截.比如说你的h5页面有下载,或者是其他需要保证流量正确性的时候,可以判断非该user-agent的不能进行该操作.<br>2.返回退出和进入,内存持续增长.得不到有效释放.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UIWebview-WKWebview&quot;&gt;&lt;a href=&quot;#UIWebview-WKWebview&quot; class=&quot;headerlink&quot; title=&quot;UIWebview/WKWebview&quot;&gt;&lt;/a&gt;UIWebview/WKWebview&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="UIWebview" scheme="https://blog.devvk.com/tags/UIWebview/"/>
    
      <category term="WKWebview" scheme="https://blog.devvk.com/tags/WKWebview/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理三</title>
    <link href="https://blog.devvk.com/2018/10/17/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%89/"/>
    <id>https://blog.devvk.com/2018/10/17/iOS内存管理三/</id>
    <published>2018-10-17T07:34:53.000Z</published>
    <updated>2019-01-29T08:39:40.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-内存管理的思考方式"><a href="#3-1-内存管理的思考方式" class="headerlink" title="3.1 内存管理的思考方式"></a>3.1 内存管理的思考方式</h2><p>自己生成的对象,自己持有<br>非自己生成的对象,自己也能持有<br>不再需要自己持有的对象时释放<br>非自己持有的对象不能释放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-内存管理的思考方式&quot;&gt;&lt;a href=&quot;#3-1-内存管理的思考方式&quot; class=&quot;headerlink&quot; title=&quot;3.1 内存管理的思考方式&quot;&gt;&lt;/a&gt;3.1 内存管理的思考方式&lt;/h2&gt;&lt;p&gt;自己生成的对象,自己持有&lt;br&gt;非自己生成的对象,自
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="内存管理的思考方式" scheme="https://blog.devvk.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/"/>
    
      <category term="所有权修饰符" scheme="https://blog.devvk.com/tags/%E6%89%80%E6%9C%89%E6%9D%83%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
      <category term="规则" scheme="https://blog.devvk.com/tags/%E8%A7%84%E5%88%99/"/>
    
      <category term="属性" scheme="https://blog.devvk.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="数组" scheme="https://blog.devvk.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>rxswift学习(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/rxswift%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.devvk.com/2018/10/12/rxswift学习/</id>
    <published>2018-10-12T06:49:10.000Z</published>
    <updated>2018-10-15T08:17:48.724Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="swift" scheme="https://blog.devvk.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>React(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/react%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>https://blog.devvk.com/2018/10/12/react第一节/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:14:58.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置React开发环境"><a href="#配置React开发环境" class="headerlink" title="配置React开发环境"></a>配置React开发环境</h2><p>我们选择使用HomeBrew来安装node</p><ul><li>安装homebrew</li></ul><pre><code class="Ruby">ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre><ul><li>更新brew</li></ul><pre><code class="Ruby">brew update</code></pre><ul><li>配置环境变量</li></ul><pre><code class="Ruby">vim ./bash.profileexport PATH=<span class="string">"/usr/local/bin:$PATH"</span>esc,shift+wq退出并保存</code></pre><ul><li>为了保证你的环境中没有node的参与文件,可以通过以下命令完全删除node</li></ul><pre><code class="sudo">sudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}</code></pre><ul><li>安装node</li></ul><pre><code class="node">brew link nodebrew uninstall nodebrew install node</code></pre><ul><li>测试安装是否成功</li></ul><pre><code class="node">npm install -g grunt-cli</code></pre><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code class="mkdir">mkdir react-democd react-demonpm install -g create-react-appcreate-react-app my-appcd my-appnpm start</code></pre><p>这样就可以看到运行起来的react项目</p><h2 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h2><p>删除APP.js,App.css,App.test.js,index.css,logo.svg,registerServiceWorker.js 文件<br>修改index.js文件</p><pre><code class="react">import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;ReactDOM.render(    &lt;h1&gt;Hello world&lt;/h1&gt;,     document.getElementById(&apos;root&apos;));npm start 运行</code></pre><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>上面的这段代码会渲染一个id叫做root的dom元素,所以在index.html中我们会看到</p><pre><code class="react">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></pre><p>因为我是iOS的开发工作者,我的理解是,html文件向我们提供了一个父视图View也就是这里的div,然后我们根据设置这个View的id来让外界访问.然后在index.js文件中我们创建了一个子视图,并添加到div这个父视图上.就显示到了html页面上.</p><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>本人从未开发过react项目一切都是从零开始,选择编辑器开发react的工具有很多,有IDEA,WebStrom,SublimeText等.具体安装什么插件,网上都有教程,这里不做详细说明,可以按照个人喜好安装.</p><p>我选择是idea来编辑项目,因为公司的前端小伙伴都是使用这个编辑器,方便学习和交流,我也推荐大家按照公司小伙伴的喜好来使用编辑器,这样有什么不懂的更方便询问和学习.</p><h2 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h2><p>我对jsx    的理解就是JavaScript + XML组成JSX<br>第一步使用JSX语法修改刚才的项目</p><pre><code class="react">const element = &lt;h1&gt;Hello world!&lt;/h1&gt;;ReactDOM.render(    element,    document.getElementById(&apos;root&apos;));</code></pre><p>第一行的代码看起来既不是字符串也不是html,而他正式这个react的主角:JSX,也就是js的语法扩展,在OC中也有很多语法扩展.说到这里我就说一下iOS中的语法扩展GCC扩展语法,为什么这样写,这样写有什么好处</p><p>优点:<br>1.如果不是通过XIB来定义控件我们经常会看到大量的定义UI界面的代码,如果开发这的代码规范有很大的纰漏,那样我相信你们会很发燥,因为可能要到处找代码,例如这个控件的颜色到底在哪里设置的.但是通过这样的语法我们就可以将代码放在大括号内部,是代码更加清晰整洁.<br>2.如果你看到这样的代码,是不是也会认为这样的代码逼格会高一点啦.</p><pre><code class="Objective-C">UIButton *secondButton = ({        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];        button.frame = CGRectMake(100, 100, 100, 100);        button;    });</code></pre><p>回到JSX的话题.</p><pre><code class="React">let fommat = (user)=&gt; user.firstName + &apos;&apos; + user.lastName;const  user = {    firstName:&apos;wei&apos;,    lastName:&apos;qi&apos;};const  element = (    &lt;h1&gt;        Hello {fommat(user)}!    &lt;/h1&gt;);ReactDOM.render(    element,    document.getElementById(&apos;root&apos;));</code></pre><p>划重点:第一行代码使用了箭头函数,后面的就是JSX的基础使用</p><p>这次是我学习react的第一课,希望大家多多谅解!如果有志同道合者希望加入我的队列.谢谢!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置React开发环境&quot;&gt;&lt;a href=&quot;#配置React开发环境&quot; class=&quot;headerlink&quot; title=&quot;配置React开发环境&quot;&gt;&lt;/a&gt;配置React开发环境&lt;/h2&gt;&lt;p&gt;我们选择使用HomeBrew来安装node&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="react" scheme="https://blog.devvk.com/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS内存分析(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://blog.devvk.com/2018/10/12/iOS内存管理/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-17T02:35:01.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动引用计数"><a href="#自动引用计数" class="headerlink" title="自动引用计数"></a>自动引用计数</h1><h2 id="1-1-什么是自动引用计数"><a href="#1-1-什么是自动引用计数" class="headerlink" title="1.1 什么是自动引用计数"></a>1.1 什么是自动引用计数</h2><p>自动引用计数就是指在内存管理上不需要程序员再次键入retain和release等内存管理语句.而是由系统自动对引用进行计数</p><p>目前我们所创建的项目都是ARC的,它不仅减少了程序员的开发工作,而且也降低了程序的崩溃,内存泄漏等风险.</p><h2 id="1-2内存管理-引用计数"><a href="#1-2内存管理-引用计数" class="headerlink" title="1.2内存管理/引用计数"></a>1.2内存管理/引用计数</h2><h3 id="1-2-1-概要"><a href="#1-2-1-概要" class="headerlink" title="1.2.1 概要"></a>1.2.1 概要</h3><p>书中的举例非常经典,利用办公室开关灯的实际情况对内存管理进行了详细的分析.</p><ul><li>当第一个人进入办公室时需要照明,所以开灯 (引用计数1)</li><li>当第二个人进入办公室时也需要照明,持有对象 (引用计数2)</li><li>当第一个人离开办公室时不需要照明,但是别人还需要照明,所以不能关闭灯,只能释放自己的持有 (引用计数1)</li><li>当最后一个人离开时,不需要灯光了,然后关闭灯光,释放自己持有.对象释放 (引用计数0)</li></ul><h2 id="1-2-2-内存管理的思考方式"><a href="#1-2-2-内存管理的思考方式" class="headerlink" title="1.2.2 内存管理的思考方式"></a>1.2.2 内存管理的思考方式</h2><ul><li>自己生成的对象,自己持有</li><li>非自己生成的对象,自己也能持有</li><li>不在需要自己持有的对象时,需要自己释放</li><li>不能释放自己不持有的对象</li></ul><table><tr><th>对象操作</th><th>Objective-C方法</th></tr><tr><th>生成并持有对象</th><th>alloc/new/copy/mutableCopy等</th></tr><tr><th>持有对象</th><th>retain</th></tr><tr><th>释放对象</th><th>release</th></tr><tr><th>废弃对象</th><th>dealloc</th></tr></table><h3 id="自己生成并持有对象"><a href="#自己生成并持有对象" class="headerlink" title="自己生成并持有对象"></a>自己生成并持有对象</h3><ul><li>alloc</li><li>new</li><li>copy</li><li>mutableCopy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 自己生成并持有对象</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">id obj = [[NSObject alloc] init];</span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line">* 自己持有对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>alloc方法生成的对象自己持有(自己生成并持有对象),并将指向生成持有对象的指针赋给了变量obj.new方法与alloc方法完全一致,copy和mutableCopy方法基于NSCopying和NSMutableCopying协议约定,利用copyWithZ    one:方法生成并持有对象的副本</p><p>##1.2.3 alloc的调用过程</p><p>1.首先调用NSObject的alloc方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (id)alloc &#123;</span><br><span class="line">    return _objc_rootAlloc(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.调用_objc_rootAlloc()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.调用了callAlloc()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">callAlloc(Class cls, bool checkNil, bool allocWithZone=false)</span><br><span class="line">&#123;</span><br><span class="line">//判断是否为Nil和cls是否存在,不存在直接返回</span><br><span class="line">    if (checkNil &amp;&amp; !cls) return nil;</span><br><span class="line"></span><br><span class="line">#if __OBJC2__</span><br><span class="line">//判断是否自定义实现的allocwithzone方法</span><br><span class="line">    if (! cls-&gt;ISA()-&gt;hasCustomAWZ()) &#123;</span><br><span class="line">        // No alloc/allocWithZone implementation. Go straight to the allocator.</span><br><span class="line">        // fixme store hasCustomAWZ in the non-meta class and </span><br><span class="line">        // add it to canAllocFast&apos;s summary</span><br><span class="line">        //还需要再次判断当前的class是否支持快速alloc。如果支持，直接调用calloc函数，申请</span><br><span class="line">        bits.fastInstanceSize()大小的内存空间，如果创建失败，会调用callBadAllocHandler函数，如</span><br><span class="line">        果不支持快速alloc则调用class_createInstance</span><br><span class="line">        if (cls-&gt;canAllocFast()) &#123;</span><br><span class="line">            // No ctors, raw isa, etc. Go straight to the metal.</span><br><span class="line">            bool dtor = cls-&gt;hasCxxDtor();</span><br><span class="line">            id obj = (id)calloc(1, cls-&gt;bits.fastInstanceSize());</span><br><span class="line">            if (!obj) return callBadAllocHandler(cls);</span><br><span class="line">            obj-&gt;initInstanceIsa(cls, dtor);</span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Has ctor or raw isa or something. Use the slower path.</span><br><span class="line">            id obj = class_createInstance(cls, 0);</span><br><span class="line">            if (!obj) return callBadAllocHandler(cls);</span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    // No shortcuts available.</span><br><span class="line">    if (allocWithZone) return [cls allocWithZone:nil];</span><br><span class="line">    return [cls alloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.调用allocWithZone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (id)allocWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    return _objc_rootAllocWithZone(self, (malloc_zone_t *)zone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.调用_objc_rootAllocWithZone()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone)</span><br><span class="line">&#123;</span><br><span class="line">    id obj;</span><br><span class="line"></span><br><span class="line">#if __OBJC2__ //如果是oc代码使用class_createInstance()</span><br><span class="line">    // allocWithZone under __OBJC2__ ignores the zone parameter</span><br><span class="line">    (void)zone;</span><br><span class="line">    obj = class_createInstance(cls, 0);</span><br><span class="line">#else</span><br><span class="line">//如果不存在zone或者是使用了GC使用class_createInstance(),如果不是使用class_createInstanceFromZone()</span><br><span class="line">    if (!zone || UseGC) &#123;</span><br><span class="line">        obj = class_createInstance(cls, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        obj = class_createInstanceFromZone(cls, 0, zone);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    if (!obj) obj = callBadAllocHandler(cls);</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.调用class_createInstance()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id </span><br><span class="line">class_createInstance(Class cls, size_t extraBytes)</span><br><span class="line">&#123;</span><br><span class="line">    return _class_createInstanceFromZone(cls, extraBytes, nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.调用_class_createInstanceFromZone()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, </span><br><span class="line">                              bool cxxConstruct = true, </span><br><span class="line">                              size_t *outAllocatedSize = nil)</span><br><span class="line">&#123;</span><br><span class="line">//cls是否存在</span><br><span class="line">    if (!cls) return nil;</span><br><span class="line">//判断该类是否已经做过realize,realize主要是一些数据的拷贝和整理对齐。???(具体做什么)</span><br><span class="line">    assert(cls-&gt;isRealized());</span><br><span class="line"></span><br><span class="line">    // Read class&apos;s info bits all at once for performance</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">    判断是否支持hasCxxCtor 和 hasCxxDtor还有canAllocNonpointer，hasCxxCtor 和 hasCxxDtor是对</span><br><span class="line">     Objective-C++ 的支持，表示这个类是否有 C++ 类构造函数和析构函数，如果有的话，需要进行额外的工</span><br><span class="line">     作。canAllocNonpointer我们不用太关心，这里OC 2.0以上基本上返回的都是true。</span><br><span class="line">    */</span><br><span class="line">    bool hasCxxCtor = cls-&gt;hasCxxCtor();</span><br><span class="line">    bool hasCxxDtor = cls-&gt;hasCxxDtor();</span><br><span class="line">    bool fast = cls-&gt;canAllocIndexed();</span><br><span class="line"></span><br><span class="line">//计算instance大小</span><br><span class="line">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    //if outAllocatedSize存在 *outAllocatedSize的大小 = size</span><br><span class="line">    if (outAllocatedSize) *outAllocatedSize = size;</span><br><span class="line"></span><br><span class="line">    id obj;</span><br><span class="line">    //如果不是用gc,不存在zone,???</span><br><span class="line">    if (!UseGC  &amp;&amp;  !zone  &amp;&amp;  fast) &#123;</span><br><span class="line">    //分配objc内存大小</span><br><span class="line">        obj = (id)calloc(1, size);</span><br><span class="line">        //如果obj不存在,return nil</span><br><span class="line">        </span><br><span class="line">        if (!obj) return nil;</span><br><span class="line">        //初始化函数</span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">#if SUPPORT_GC</span><br><span class="line">        if (UseGC) &#123;</span><br><span class="line">            obj = (id)auto_zone_allocate_object(gc_zone, size,</span><br><span class="line">                                                AUTO_OBJECT_SCANNED, 0, 1);</span><br><span class="line">        &#125; else </span><br><span class="line">#endif</span><br><span class="line">        if (zone) &#123;</span><br><span class="line">            obj = (id)malloc_zone_calloc ((malloc_zone_t *)zone, 1, size);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            obj = (id)calloc(1, size);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!obj) return nil;</span><br><span class="line"></span><br><span class="line">        // Use non-indexed isa on the assumption that they might be </span><br><span class="line">        // doing something weird with the zone or RR.</span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 不懂</span><br><span class="line">    if (cxxConstruct &amp;&amp; hasCxxCtor) &#123;</span><br><span class="line">        obj = _objc_constructOrFree(obj, cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道alloc的作用是开辟足够的内存空间,并<b style="color:red">初始化</b>.然后使obj指针指向对象的内存地址</p><p>##1.2.4 initInstanceIsa与init</p><h3 id="initInstanceIsa"><a href="#initInstanceIsa" class="headerlink" title="initInstanceIsa"></a>initInstanceIsa</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">inline void </span><br><span class="line">objc_object::initInstanceIsa(Class cls, bool hasCxxDtor)</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);//是否使用GC</span><br><span class="line">    assert(!cls-&gt;requiresRawIsa());//是否具有原始的isa</span><br><span class="line">    assert(hasCxxDtor == cls-&gt;hasCxxDtor());//是否有析构函数</span><br><span class="line"></span><br><span class="line">    initIsa(cls, true, hasCxxDtor);</span><br><span class="line">&#125;</span><br><span class="line">inline void </span><br><span class="line">objc_object::initIsa(Class cls, bool indexed, bool hasCxxDtor) </span><br><span class="line">&#123; </span><br><span class="line">//非TaggedPointer</span><br><span class="line">    assert(!isTaggedPointer()); </span><br><span class="line">    </span><br><span class="line">    if (!indexed) &#123;</span><br><span class="line">        isa.cls = cls;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    </span><br><span class="line">        assert(!DisableIndexedIsa);</span><br><span class="line">        //设置bits的值为define ISA_MAGIC_VALUE 0x001d800000000001ULL</span><br><span class="line">        isa.bits = ISA_MAGIC_VALUE;</span><br><span class="line">        // isa.magic is part of ISA_MAGIC_VALUE</span><br><span class="line">        // isa.indexed is part of ISA_MAGIC_VALUE</span><br><span class="line">        //设置isa构造韩式</span><br><span class="line">        isa.has_cxx_dtor = hasCxxDtor;</span><br><span class="line">        </span><br><span class="line">        isa.shiftcls = (uintptr_t)cls &gt;&gt; 3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到initInstanceIsa与isa有巨大关系和对象本身没有多大关系,所以上面的韩式是初始化isa的操作</p><h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (id)init &#123;</span><br><span class="line">    return _objc_rootInit(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id</span><br><span class="line">_objc_rootInit(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    // In practice, it will be hard to rely on this function.</span><br><span class="line">    // Many classes do not properly chain -init calls.</span><br><span class="line">    //返回对象本身</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以当我们不自定义实现init方法时,系统默认只是返回对象本身,我们可以再自定义的init方法中设置属性的值</p><p>##1.2.5 非自己生成的对象,自己也能持有</p><p>在我们学习OC的时候我们只有对象的生成方法有两种,一种是使用alloc方法,还有一种是使用便利构造器也就是常见的例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id obj = [NSArray array];</span><br></pre></td></tr></table></figure><p>分析:<br>这个对象是由自己生成,但并非自己持有.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+(instancetype)array &#123; </span><br><span class="line"> __autoreleasing NSArray *array = [[NSArray alloc] init];</span><br><span class="line">    </span><br><span class="line">    return array;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从上面第一条自己生成并持有.我们可以得到array只是将自己生成并持有对象的指针赋给了array变量.我们拿到的只是这个变量指针.</p><p>那么如何取得这个对象的所有权啦???<em>**</em></p><p>然后就用到了retain方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id obj = [NSArray array];</span><br><span class="line"></span><br><span class="line">[obj retain];</span><br></pre></td></tr></table></figure><p>通过retain函数持有非自己生成对象</p><h4 id="retain方法调用过程"><a href="#retain方法调用过程" class="headerlink" title="retain方法调用过程"></a>retain方法调用过程</h4><p>我们通过查询runtime源代码可以找到retain的调用顺序<br>1.首先是NSObject的retain方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)retain &#123;</span><br><span class="line">    return ((id)self)-&gt;rootRetain();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在retain方法内部调用了rootRetain()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootRetain(id obj)</span><br><span class="line">&#123;</span><br><span class="line">//判断当前的obj对象是否为空</span><br><span class="line">    assert(obj);</span><br><span class="line"></span><br><span class="line">    return obj-&gt;rootRetain();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在rootRetain方法内部调用了objc_object::rootRetain()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inline id </span><br><span class="line">objc_object::rootRetain()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line">    //如果是TaggedPointer直接返回对象本身</span><br><span class="line">    if (isTaggedPointer()) return (id)this;</span><br><span class="line">    //如果不是调用sidetable_retain()</span><br><span class="line">    return sidetable_retain();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.调用sidetable_retain()函数,首先获取对象的引用技术管理结构体SideTable,在SideTable中有三个重要的成员(spinlock_t slock,RefcountMap refcnts,weak_table_t weak_table).其中引用计数是保存到refcnts.weak_table弱引用表.第一个是一个自旋锁,保证在多线程中操作.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">objc_object::sidetable_retain()</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.nonpointer);</span><br><span class="line">#endif</span><br><span class="line">    SideTable&amp; table = SideTables()[this];</span><br><span class="line"></span><br><span class="line">    table.lock();</span><br><span class="line">    size_t&amp; refcntStorage = table.refcnts[this];</span><br><span class="line">    if (! (refcntStorage &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">        refcntStorage += SIDE_TABLE_RC_ONE;</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line"></span><br><span class="line">    return (id)this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再看引用计数每次加SIDE_TABLE_RC_ONE到底是什么东西?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define SIDE_TABLE_WEAKLY_REFERENCED (1UL&lt;&lt;0)</span><br><span class="line">#define SIDE_TABLE_DEALLOCATING      (1UL&lt;&lt;1)  // MSB-ward of weak bit</span><br><span class="line">#define SIDE_TABLE_RC_ONE            (1UL&lt;&lt;2)  // MSB-ward of deallocating bit</span><br><span class="line">#define SIDE_TABLE_RC_PINNED         (1UL&lt;WORD_BITS-1))</span><br><span class="line"></span><br><span class="line">#define SIDE_TABLE_RC_SHIFT 2</span><br><span class="line">#define SIDE_TABLE_FLAG_MASK (SIDE_TABLE_RC_ONE-1)</span><br></pre></td></tr></table></figure><p>这里使用了一个位操作,在二进制下将1向左移动2位,就是100.然后100代表的数字是4.所以实际上retain加的引用计数是4.<br>SIDE_TABLE_WEAKLY_REFERENCED （内存的第1位）标识该对象是否有过weak对象；<br>SIDE_TABLE_DEALLOCATING（内存的第2位），标识该对象是否正在dealloc。<br>SIDE_TABLE_RC_ONE （内存的第3位），存放引用计数数值（三位之后都用来存放引用计数数值）。<br>SIDE_TABLE_RC_PINNED, 标识引用计数的溢出<br>所以每次我们引用计数加一时，真正加的是4,在取出真正的引用计数时需要右移两位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uintptr_t</span><br><span class="line">objc_object::sidetable_retainCount()</span><br><span class="line">&#123;</span><br><span class="line">    SideTable&amp; table = SideTables()[this];</span><br><span class="line"></span><br><span class="line">    size_t refcnt_result = 1;</span><br><span class="line">    </span><br><span class="line">    table.lock();</span><br><span class="line">    RefcountMap::iterator it = table.refcnts.find(this);</span><br><span class="line">    if (it != table.refcnts.end()) &#123;</span><br><span class="line">        // this is valid for SIDE_TABLE_RC_PINNED too</span><br><span class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line">    return refcnt_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码的代码可以看出refcnt_result+=引用计数总计.而refcnt_result = 1.所以我们访问时都是1而不是0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">objc_object::sidetable_retain()</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.indexed);</span><br><span class="line">#endif</span><br><span class="line">//获取管理引用计数的结构体SideTable</span><br><span class="line">    SideTable&amp; table = SideTables()[this];</span><br><span class="line"></span><br><span class="line">    if (table.trylock()) &#123;</span><br><span class="line">    //获取当前对象的引用计数散列表,使用散列表可以将对象持有者的内存地址和引用计数保存在散列表中.就算在出现异常情况时,也能定位到地址信息</span><br><span class="line">        size_t&amp; refcntStorage = table.refcnts[this];</span><br><span class="line">        //判断当前的引用计数是否越界</span><br><span class="line">        if (! (refcntStorage &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">        //如果引用计数没有越界,引用计数加1</span><br><span class="line">            refcntStorage += SIDE_TABLE_RC_ONE;</span><br><span class="line">        &#125;</span><br><span class="line">        table.unlock();</span><br><span class="line">        return (id)this;</span><br><span class="line">    &#125;</span><br><span class="line">    return sidetable_retain_slow(table);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.调用sidetable_retain_slow()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">objc_object::sidetable_retain_slow(SideTable&amp; table)</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.indexed);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    table.lock();</span><br><span class="line">    size_t&amp; refcntStorage = table.refcnts[this];</span><br><span class="line">    if (! (refcntStorage &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">        refcntStorage += SIDE_TABLE_RC_ONE;</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line"></span><br><span class="line">    return (id)this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码也是引用计数进行加一的一个函数</p><p>上面的所有的过程就是在我们调用retain的函数调用过程.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动引用计数&quot;&gt;&lt;a href=&quot;#自动引用计数&quot; class=&quot;headerlink&quot; title=&quot;自动引用计数&quot;&gt;&lt;/a&gt;自动引用计数&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是自动引用计数&quot;&gt;&lt;a href=&quot;#1-1-什么是自动引用计数&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="引用计数" scheme="https://blog.devvk.com/tags/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
    
      <category term="alloc/new/copy/mutableCopy" scheme="https://blog.devvk.com/tags/alloc-new-copy-mutableCopy/"/>
    
      <category term="retain" scheme="https://blog.devvk.com/tags/retain/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C对象的构造模式</title>
    <link href="https://blog.devvk.com/2018/10/12/Objective-C%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.devvk.com/2018/10/12/Objective-C的对象构造模式/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:46:44.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈对象的构造模式"><a href="#谈对象的构造模式" class="headerlink" title="谈对象的构造模式"></a>谈对象的构造模式</h1><p>Objective-C语言在创建对象的时候需要先调用alloc,然后实例对象调用init方法完成初始化.</p><h1 id="alloc究竟干了什么"><a href="#alloc究竟干了什么" class="headerlink" title="alloc究竟干了什么"></a>alloc究竟干了什么</h1><p>为了能够看到alloc到底干了什么,我们可以下载GNUStep开源的libs-base工程然后找到NSObject.m文件.<br>为什么用GNUStep来查看源码?</p><p>GNUstep，GNU计划的项目之一。它将Cocoa（前身为NeXT的OpenStep）Objective-C软件库，部件工具箱（widget toolkits）以及其上的应用软件，以自由软件方式重新实现。它能够运行在类Unix操作系统上，也能运作在Microsoft Windows上。<a href="https://zh.wikipedia.org/wiki/GNUstep" target="_blank" rel="noopener">GNUStep</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (id) alloc</span><br><span class="line">&#123;</span><br><span class="line">  return [self allocWithZone: NSDefaultMallocZone()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它调用了allocWithZone方法,具体作用就是给当前创建的实例对象开辟内存空间.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSZone*</span><br><span class="line">NSDefaultMallocZone (void)</span><br><span class="line">&#123;</span><br><span class="line">  return &amp;default_zone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道oc对象的本质其实就是结构体,在开辟内存空间函数内部,他会遍历当前结构体的所有成员变量,然后根据成员变量的数据类型计算内存大小.</p><p>当alloc函数调用完成后会返回一个未初始化的实例,在这里cocoa不仅为这个实例申请了足够大的内存空间还做了以下几件事:<br>1.将该对象的引用计数加1<br>2.将该对象的isa指针指向类<br>3.为成员变量初始化值nil/0</p><h1 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h1><p>init方法是该对象的初始化方法,目的是初始化该对象的成员变量.</p><h1 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h1><p>类方法new的出现是苹果对java等程序员的照顾,而new方法的内部和调用alloc、init是一致的。可以从GNUStep的源代码中得出结论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (id) new</span><br><span class="line">&#123;</span><br><span class="line">  return [[self alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>alloc和init的定位不同：</p><p><strong>alloc旨在为实例对象在虚拟内存上申请足够大的内存空间。而且将对象的retainCount+1.帮助系统完成内存管理。将isa指针指向该类，是为了在运行时环境中完成对该类的检查。</strong></p><p><strong>init方法旨在完成该对象成员变量的初始化。在内存方面并没有什么处理。</strong></p><p>这样设计的结果可以使苹果开发者更加清晰的了解这两个函数的作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;谈对象的构造模式&quot;&gt;&lt;a href=&quot;#谈对象的构造模式&quot; class=&quot;headerlink&quot; title=&quot;谈对象的构造模式&quot;&gt;&lt;/a&gt;谈对象的构造模式&lt;/h1&gt;&lt;p&gt;Objective-C语言在创建对象的时候需要先调用alloc,然后实例对象调用init方法
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="alloc" scheme="https://blog.devvk.com/tags/alloc/"/>
    
      <category term="构造模式" scheme="https://blog.devvk.com/tags/%E6%9E%84%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="init" scheme="https://blog.devvk.com/tags/init/"/>
    
      <category term="设计原则" scheme="https://blog.devvk.com/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
      <category term="new" scheme="https://blog.devvk.com/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>HTTP/DNS解析与DNS劫持</title>
    <link href="https://blog.devvk.com/2018/10/12/HTTP-DNS%E8%A7%A3%E6%9E%90-DNS%E5%8A%AB%E6%8C%81/"/>
    <id>https://blog.devvk.com/2018/10/12/HTTP-DNS解析-DNS劫持/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:06:41.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-DNS解析-DNS劫持"><a href="#HTTP-DNS解析-DNS劫持" class="headerlink" title="HTTP/DNS解析/DNS劫持"></a>HTTP/DNS解析/DNS劫持</h1><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>HTTP全名超文本传输协议，是一种用于分布式，协作式的超媒体信息系统的应用层协议。</p><p>HTTP请求行：请求地址和协议版本</p><p>HTTP请求头：</p><p>请求头中包含：Accept(能够接受的回应内容类型)，Accept-Charset(能够接受的字符集)，Cache-Control(缓存机制)，Connenct(连接类型)，Cookie，Content-Length(请求体的长度)，Content-Type（请求体的多媒体类型），Host(端口)等</p><p>HTTP请求体：</p><ul><li>任意类型：服务器不会解析请求体，请求体的处理需要后台同学自己处理解析</li><li>application/json 使得请求体结构化，序列化可以方便提交复杂的数据结构，也适合在调试接口阶段进行抓包等行为。</li><li>text/xml：以XML的方式提交，因为XML支持各种语言使用广泛。但是XML相对于JSON较为臃肿。目前大多数场景都是使用JSON提交</li><li>表单提交：application/x-www-form-urlencoded，使得参数必须以键值对的形式并用&amp;链接。</li><li>文件提交：multipart/form-data 在上传图片时或者其他类型文件时，都是将文件分成多个部分。每一个部分都是以boundary分割</li></ul><p>HTTP请求方法：</p><ul><li>POST 向指定资源提交数据，数据放在请求本文中，这个请求可以修改现有资源也可以创建新资源</li><li>GET  获取指定资源，使用GET请求只用于读取数据。</li><li>HEAD 向服务器放出指定资源的请求(目前我还没用到)</li><li>DELETE 删除服务器上Request-URL标记的资源</li><li>PUT 向服务器指定资源位置上传最新内容</li><li>TRACE (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li><li>OPTIONS (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li><li>CONNECT (没用到)<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">HTTP维基百科</a></li></ul><p>HTTP请求过程：<br>当我们手机，pc等网络设备请求<a href="www.baidu.com">百度</a>的域名时分为三步：</p><h5 id="1-请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址"><a href="#1-请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址" class="headerlink" title="1.请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址"></a>1.请求到达运营商DNS服务器并解析这个域名，查找对应的IP地址</h5><h5 id="2-根据IP地址查找对应的服务器，向服务器发起一个HTTP请求"><a href="#2-根据IP地址查找对应的服务器，向服务器发起一个HTTP请求" class="headerlink" title="2.根据IP地址查找对应的服务器，向服务器发起一个HTTP请求"></a>2.根据IP地址查找对应的服务器，向服务器发起一个HTTP请求</h5><h5 id="3-服务器收到请求后，将所需资源包装后原路返回给网络设备"><a href="#3-服务器收到请求后，将所需资源包装后原路返回给网络设备" class="headerlink" title="3.服务器收到请求后，将所需资源包装后原路返回给网络设备"></a>3.服务器收到请求后，将所需资源包装后原路返回给网络设备</h5><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>就在前一段时间我刚自己买了一个VPS服务器，然后自己买了域名，目的就是为了搭建属于自己的博客，买完服务器后，服务器有对应的IP地址，我为了使用我买的域名访问我的博客，我就必须将服务器的IP和域名进行映射(DNS解析)</p><p>DNS解析：就是讲域名指向网站空间的IP上，让用户可以通过域名访问到网站的一种服务。域名解析就是域名到IP地址的转换过程。这个过程由DNS服务器完成。</p><p>DNS解析的过程：</p><h5 id="1-用户主机上运行着DNS的客户端"><a href="#1-用户主机上运行着DNS的客户端" class="headerlink" title="1.用户主机上运行着DNS的客户端"></a>1.用户主机上运行着DNS的客户端</h5><h5 id="2-浏览器将输入的URL中抽出域名字段"><a href="#2-浏览器将输入的URL中抽出域名字段" class="headerlink" title="2.浏览器将输入的URL中抽出域名字段"></a>2.浏览器将输入的URL中抽出域名字段</h5><h5 id="3-DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。"><a href="#3-DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。" class="headerlink" title="3.DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。"></a>3.DNS客户端会向DNS服务器端发送一个查询报文，报文中包含域名字段。</h5><h5 id="4-DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。"><a href="#4-DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。" class="headerlink" title="4.DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。"></a>4.DNS服务器端响应DNS客户端报文，找到域名对应的IP地址。</h5><h5 id="5-DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址"><a href="#5-DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址" class="headerlink" title="5.DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址"></a>5.DNS客户端收到DNS服务器的响应报文，其中包含主机名和IP地址</h5><h5 id="6-浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。"><a href="#6-浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。" class="headerlink" title="6.浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。"></a>6.浏览器拿到IP地址后，就是向该IP地址定位到的HTTP服务器发起请求进行TCP连接。</h5><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><p>在发生请求时，当运营商收到用户主机请求后，获取到域名，然后通过DNS服务器进行解析，在解析的过程中可能DNS服务器受到第三方攻击。就是第三方攻击解析服务器，使得服务器无法正常解析，然后修改解析后的IP地址指向一个虚假的服务器。如图所示<br><img src="/2018/10/12/HTTP-DNS解析-DNS劫持/http.png" title="This is an image"></p><p>解决办法：可以使用自己的解析服务器自行解析，或者在APP内部使用解析好的域名以IP的形式访问。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-DNS解析-DNS劫持&quot;&gt;&lt;a href=&quot;#HTTP-DNS解析-DNS劫持&quot; class=&quot;headerlink&quot; title=&quot;HTTP/DNS解析/DNS劫持&quot;&gt;&lt;/a&gt;HTTP/DNS解析/DNS劫持&lt;/h1&gt;&lt;h2 id=&quot;HTTP请求&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="网络基础" scheme="https://blog.devvk.com/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="HTTP/DNS解析" scheme="https://blog.devvk.com/tags/HTTP-DNS%E8%A7%A3%E6%9E%90/"/>
    
      <category term="DNS劫持" scheme="https://blog.devvk.com/tags/DNS%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>HomeBrew VS Wegt</title>
    <link href="https://blog.devvk.com/2018/10/12/HomeBrew%E4%B8%8ERuby%E6%9B%B4%E6%96%B0/"/>
    <id>https://blog.devvk.com/2018/10/12/HomeBrew与Ruby更新/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:05:33.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeBrew-与-wegt"><a href="#HomeBrew-与-wegt" class="headerlink" title="HomeBrew 与 wegt"></a>HomeBrew 与 wegt</h1><p>HomeBrew 是一款自由及开放源代码的软件包管理系统,用以简化Mac OS X系统上的软件安装过程.它使用Ruby语言写成,针对Mac OS X操作系统自带的Ruby版本,默认安装在/usr/local下.由一个核心的git版本库构成,以使用户能更新HomeBrew.包管理器使用一种称为”公式”的DSL脚本来管理依赖,下载源代码及配置和编译软件,从源代码中构建软件</p><p>安装需求</p><p>Xcode</p><p>安装方式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><p>相关指令</p><p>搜索:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search 套件名称</span><br></pre></td></tr></table></figure><p>查询套件信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info 套件名称</span><br></pre></td></tr></table></figure><p>安装套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install 套件名称</span><br></pre></td></tr></table></figure><p>查询目前已经安装的套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>更新HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>卸载HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd <span class="string">`brew --prefix`</span></span><br><span class="line">$ rm -rf Cellar$ brew prune</span><br><span class="line">$ rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew</span><br><span class="line">$ rm -rf ~<span class="regexp">/Library/</span>Caches/Homebrew</span><br></pre></td></tr></table></figure><p>wegt 是linux的一个命令用来下载文件的工具<br>我只有在虚拟机上使用过这个命令,主要作用是用来下载文件.比如说做后台的同学想下载tomcat,就可以通过这个来下载,过多的内容接不介绍了</p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>Mac OS X 系统自带了ruby环境,所以我们一般是不需要管理ruby环境的,今天说这个问题是在过年期间我在更新mac系统时出错了缺少系统启动文件,然后我就恢复系统了,知道今天才发现我pod install执行不了,提示ruby的版本过低,而我的pod版本是最新版,所以我就想通过更新ruby来解决问题,但是更新ruby时又发现brew出错了.所以很生气,后果很严重.下载brew,更新ruby,pod就好了<br>卸载和安装上面都有讲述.更新ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade ruby</span><br></pre></td></tr></table></figure><h1 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h1><p>对于iOS开发的同学,使用cocoapods是在所难免的,所以不再过多讲述,网上的文章一搜一大堆.<br><a href="https://www.jianshu.com/p/edd9dbd35576" target="_blank" rel="noopener">pod入门到放弃</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HomeBrew-与-wegt&quot;&gt;&lt;a href=&quot;#HomeBrew-与-wegt&quot; class=&quot;headerlink&quot; title=&quot;HomeBrew 与 wegt&quot;&gt;&lt;/a&gt;HomeBrew 与 wegt&lt;/h1&gt;&lt;p&gt;HomeBrew 是一款自由及开放源
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="HomeBrew" scheme="https://blog.devvk.com/tags/HomeBrew/"/>
    
      <category term="wegt" scheme="https://blog.devvk.com/tags/wegt/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用攻防实战(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    <id>https://blog.devvk.com/2018/10/12/iOS应用安全攻防实战/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:10:32.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="误解1-认证因为这设备是安全可信任的"><a href="#误解1-认证因为这设备是安全可信任的" class="headerlink" title="误解1: 认证因为这设备是安全可信任的"></a>误解1: 认证因为这设备是安全可信任的</h1><p>设备和产品的认证,只是认证机构对于设备和产品的概念性功能和实现能力的合规性认证,在认证的过程中并没有对设备和产品进行渗透性测试.并不能保证设备和程序不被黑客攻破.</p><h1 id="误解2-单一性安全机制"><a href="#误解2-单一性安全机制" class="headerlink" title="误解2: 单一性安全机制"></a>误解2: 单一性安全机制</h1><p>单一性安全机制的问题,就存在与单一性上,他简化了攻破所需要分析的代码.如果一旦单一的安全机制被攻破,所有基于这个单一安全机制的设备和程序都将被攻破.</p><h1 id="iOS安全模型"><a href="#iOS安全模型" class="headerlink" title="iOS安全模型"></a>iOS安全模型</h1><p>1.设备安全:防止未授权的人使用设备</p><p>2.数据安全:存储在设备上的数据得到保护</p><p>3.网络安全:当通过网络传输时的加密工具</p><p>4.应用软件安全:加固操作系统并隔离运行时应用软件的机制</p><h1 id="设备安全"><a href="#设备安全" class="headerlink" title="设备安全"></a>设备安全</h1><p>对于设备安全,苹果做出的应对是设置密码和PIN锁.苹果允许企业在安全策略中强制设置这些锁,或个人用户手动设置.</p><h1 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h1><p>苹果的数据加密是很值得一提的,采用硬件加密加速器来加密选定的应用软件数据.通过将这些存储在设备上的特定加密密钥与用户设置的密码结合,该系统可以保证只有在用户输入密码后文件系统中这些被保护的文件才会解密.所以用户输入的密码的安全性就是关键.所以密码的复杂度就决定破解的难度.</p><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><p>苹果使用了很多方法来加密网络包括VPN,SSL,TLS传输层协议,WEP,WPA,WPA2无线网络加密和认证,和2017年一月份提出的HTTPS强制要求都是为了网络安全.</p><h1 id="应用软件的安全"><a href="#应用软件的安全" class="headerlink" title="应用软件的安全"></a>应用软件的安全</h1><p>应用软件的安全,完全依赖于苹果的沙盒技术.拼过系统将自身可被访问的API作为接口放出.应用软件本身不可以访问系统组件,和其他应用软件.沙盒机制限制了一个应用的内存和CPU使用的总量,当超出限制时,出现崩溃闪退现象.他只可以对自己文件目录访问.</p><p>为了限制应用软件访问设备资源,苹果使用代码签名的方式,所有运行在设备上的二进制代码,必须经过苹果签名或者使用苹果办法的证书签名.这样做可以保证自身无法修改二进制文件.苹果也可以检测其应用软件的完整性.确保没有被签名的代码注入.</p><p>钥匙串技术,可以将一些网络凭证,其他信息保存在钥匙串中,还提供了低级别的加密解密方法.</p><p>苹果还提供了基础的加密解密算法(common crypto),开发者可以使用加密算法,对数据机型加密.</p><h1 id="误解三-iOS文件系统加密可以防止设备上的数据失窃-直到iOS5"><a href="#误解三-iOS文件系统加密可以防止设备上的数据失窃-直到iOS5" class="headerlink" title="误解三:iOS文件系统加密可以防止设备上的数据失窃(直到iOS5)"></a>误解三:iOS文件系统加密可以防止设备上的数据失窃(直到iOS5)</h1><p>iOS的文件系统加密使用了将秘钥he数据存储在同一设备上的加密系统(直到iOS5)攻击者只需要活的在设备上执行代码的权限,就可以计算出密钥来破解数据.密钥是数字形态的,谁拥有设备的数字拥有权,谁就能同时拿到锁和钥匙</p><h1 id="密码等于弱安全"><a href="#密码等于弱安全" class="headerlink" title="密码等于弱安全"></a>密码等于弱安全</h1><p>相比于PC，移动设备的安全性和用户体验之间的取舍就很严重了。<br>举一个例子：我们在使用完手机后，时不时会把放进口袋里。每一次使用手机都要进行解锁。所以手机厂商在设计这个安全锁时，就必须考虑密码的简单性。要不然用户体验就会很差（vicky_12@.qq.com）。这样的密码在pc上输入还可以，在每次解锁手机屏幕时，用户可能会取消这个设备锁。因为太过于麻烦。所以厂商的设计一般都是某种图形或者是4位或者6位数字。所以密码是弱安全。</p><h1 id="误解四：关心安全的用户会设置复杂的密码"><a href="#误解四：关心安全的用户会设置复杂的密码" class="headerlink" title="误解四：关心安全的用户会设置复杂的密码"></a>误解四：关心安全的用户会设置复杂的密码</h1><p>大多数用户任然选择PIN码和简单的密码保护自己的设备。这样做是因为他们不知道密码的复杂度与设备加密强度的关系。他们自认为，我设置密码就可以赶跑那些坏人。如果坏人足够坏，你设置的密码是远远不够的。所以假设你的用户一般都只会使用简单PIN码和密码来保护设备。</p><h1 id="误解五：强密码依然不能保证设备安全"><a href="#误解五：强密码依然不能保证设备安全" class="headerlink" title="误解五：强密码依然不能保证设备安全"></a>误解五：强密码依然不能保证设备安全</h1><p>我们所指出的强弱密码并不能完全保证你设备的安全，因为在强的东西也有破绽，只是击破它的复杂度上升了，并没有说完全安全性。在互联网方面，没有完全的安全。</p><h1 id="数字取证击败加密"><a href="#数字取证击败加密" class="headerlink" title="数字取证击败加密"></a>数字取证击败加密</h1><p>可能你编写的代码是很安全的，你的应用软件是很安全的。按时操作系统会不断削减你的安全性。操作系统会不断缓存你所产生的操作（键盘操作）web缓存。文件操作等。操作系统都可以缓存到磁盘中。而且操作系统还可以恢复你删除掉的私密文件。私密文件的加密秘钥只要还存在，私密文件就可能被恢复。而且更加恐怖的是连私密文件的密钥都可以被恢复。</p><h1 id="误解六：-如果应用软件安全的实现了加密，数据就无法从设备中被恢复"><a href="#误解六：-如果应用软件安全的实现了加密，数据就无法从设备中被恢复" class="headerlink" title="误解六： 如果应用软件安全的实现了加密，数据就无法从设备中被恢复"></a>误解六： 如果应用软件安全的实现了加密，数据就无法从设备中被恢复</h1><p>首先你错了。上面已经说过了操作系统会不断削弱你的安全性，会缓存你的操作和文件。就连你私密文件的密钥都能操作，你还认为应用软件安全吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;误解1-认证因为这设备是安全可信任的&quot;&gt;&lt;a href=&quot;#误解1-认证因为这设备是安全可信任的&quot; class=&quot;headerlink&quot; title=&quot;误解1: 认证因为这设备是安全可信任的&quot;&gt;&lt;/a&gt;误解1: 认证因为这设备是安全可信任的&lt;/h1&gt;&lt;p&gt;设备和产
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="安全" scheme="https://blog.devvk.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="攻防" scheme="https://blog.devvk.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>instrument使用</title>
    <link href="https://blog.devvk.com/2018/10/12/instrument%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.devvk.com/2018/10/12/instrument的使用/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:08:15.489Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="内存分析" scheme="https://blog.devvk.com/tags/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
      <category term="时间复杂度分析" scheme="https://blog.devvk.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
      <category term="CPU占用分析" scheme="https://blog.devvk.com/tags/CPU%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>国际化本地化</title>
    <link href="https://blog.devvk.com/2018/10/12/localizable-strings%E5%9B%BD%E9%99%85%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%A4%84%E7%90%86/"/>
    <id>https://blog.devvk.com/2018/10/12/localizable-strings国际化和本地化处理/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:11:00.124Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章我在简书上已经写过直接跳转简书查看<br><a href="https://www.jianshu.com/p/7a5495dbff3f" target="_blank" rel="noopener">利用Localizable.strings做本地化和国际化处理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章我在简书上已经写过直接跳转简书查看&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/7a5495dbff3f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用Localizable.strings做本地化和国际化处理&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="Localizable.strings" scheme="https://blog.devvk.com/tags/Localizable-strings/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://blog.devvk.com/2018/10/12/mysql%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.devvk.com/2018/10/12/mysql安装/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:11:38.811Z</updated>
    
    <content type="html"><![CDATA[<p>mac 安装mysql</p><p>1.安装<a href="http://blog.vicky.org.cn/2018/02/24/HomeBrew与Ruby更新/" target="_blank" rel="noopener">homebrew</a></p><p>2.brew uninstall mysql</p><p>3.brew install mysql</p><p>4.mysql -u root -p</p><p>5.如果出现报错执行</p><p><code>unset TMPDIR</code></p><p><code>bash mysql_install_db --verbose --user=root --basedir=&quot;$(brew --prefix mysql)&quot;--datadir=/usr/local/var/mysql --tmpdir=/tmp</code></p><p><code>bash mysql.server start</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mac 安装mysql&lt;/p&gt;
&lt;p&gt;1.安装&lt;a href=&quot;http://blog.vicky.org.cn/2018/02/24/HomeBrew与Ruby更新/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;homebrew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="安装" scheme="https://blog.devvk.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="使用" scheme="https://blog.devvk.com/tags/%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理(二)</title>
    <link href="https://blog.devvk.com/2018/10/12/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-1/"/>
    <id>https://blog.devvk.com/2018/10/12/iOS内存管理-1/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-17T08:39:43.814Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.vicky.org.cn/2018/10/12/iOS内存管理/" target="_blank" rel="noopener">iOS内存管理(一)</a></p><h2 id="2-1-release"><a href="#2-1-release" class="headerlink" title="2.1 release"></a>2.1 release</h2><h3 id="2-1-1-release的作用"><a href="#2-1-1-release的作用" class="headerlink" title="2.1.1 release的作用"></a>2.1.1 release的作用</h3><p>我们都知道release的作用是引用计数-1.当我们不需要持有对象的引用时需要进行release.</p><h3 id="2-1-2-release的调用过程"><a href="#2-1-2-release的调用过程" class="headerlink" title="2.1.2 release的调用过程"></a>2.1.2 release的调用过程</h3><ol><li>首先调用对象的release方法</li><li>在release方法中调用rootRelease(),在rootRelease()中断言是否使用的GC,判断是否是<b style="color:blue">TaggedPointer</b>,如果是返回false,否则调用sidetable_release(true)</li><li>在sidetable_release()方法中首先获取对象保存引用计数的数据结构SideTable,定义局部变量do_dealloc是否进行dealloc.然后SideTable开锁.然后获取到对象的引用计数散列表.如果引用计数值==table.refcnts.end(). do_dealloc = true,将对象的引用计数标识为SIDE_TABLE_DEALLOCATING.如果不等于end.判断it-&gt;second  &lt; 小于SIDE_TABLE_DEALLOCATING(判断引用计数是否为0),do_dealloc = true,it-&gt;second = it-&gt;second | SIDE_TABLE_DEALLOCATING.然后如果it-&gt;second &amp; SIDE_TABLE_RC_PINNED(溢出标识).引用计数-1.如果do_dealloc和performDealloc都为true调用dealloc方法.否则调用sidetable_release_slow()</li><li>sidetable_release_slow()的内部实现和sidetable_release大致类似.</li></ol><p><b style="color : red">欠缺点:</b></p><p><b style="color : red">??? it-&gt;second是什么?</b></p><p><b style="color : red">??? 按位与和按位或</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">- (oneway void)release &#123;</span><br><span class="line">    ((id)self)-&gt;rootRelease();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool </span><br><span class="line">objc_object::rootRelease()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line"></span><br><span class="line">    if (isTaggedPointer()) return false;</span><br><span class="line">    return sidetable_release(true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uintptr_t </span><br><span class="line">objc_object::sidetable_release(bool performDealloc)</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.indexed);</span><br><span class="line">#endif</span><br><span class="line">    SideTable&amp; table = SideTables()[this];</span><br><span class="line"></span><br><span class="line">    bool do_dealloc = false;</span><br><span class="line"></span><br><span class="line">    if (table.trylock()) &#123;</span><br><span class="line">        RefcountMap::iterator it = table.refcnts.find(this);</span><br><span class="line">        if (it == table.refcnts.end()) &#123;</span><br><span class="line">            do_dealloc = true;</span><br><span class="line">            table.refcnts[this] = SIDE_TABLE_DEALLOCATING;</span><br><span class="line">        &#125; else if (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</span><br><span class="line">            // SIDE_TABLE_WEAKLY_REFERENCED may be set. Don&apos;t change it.</span><br><span class="line">            do_dealloc = true;</span><br><span class="line">            it-&gt;second |= SIDE_TABLE_DEALLOCATING;</span><br><span class="line">        &#125; else if (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">            it-&gt;second -= SIDE_TABLE_RC_ONE;</span><br><span class="line">        &#125;</span><br><span class="line">        table.unlock();</span><br><span class="line">        if (do_dealloc  &amp;&amp;  performDealloc) &#123;</span><br><span class="line">            ((void(*)(objc_object *, SEL))objc_msgSend)(this, SEL_dealloc);</span><br><span class="line">        &#125;</span><br><span class="line">        return do_dealloc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return sidetable_release_slow(table, performDealloc);</span><br><span class="line">&#125;</span><br><span class="line">uintptr_t</span><br><span class="line">objc_object::sidetable_release_slow(SideTable&amp; table, bool performDealloc)</span><br><span class="line">&#123;</span><br><span class="line">#if SUPPORT_NONPOINTER_ISA</span><br><span class="line">    assert(!isa.indexed);</span><br><span class="line">#endif</span><br><span class="line">    bool do_dealloc = false;</span><br><span class="line"></span><br><span class="line">    table.lock();</span><br><span class="line">    RefcountMap::iterator it = table.refcnts.find(this);</span><br><span class="line">    if (it == table.refcnts.end()) &#123;</span><br><span class="line">        do_dealloc = true;</span><br><span class="line">        table.refcnts[this] = SIDE_TABLE_DEALLOCATING;</span><br><span class="line">    &#125; else if (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</span><br><span class="line">        // SIDE_TABLE_WEAKLY_REFERENCED may be set. Don&apos;t change it.</span><br><span class="line">        do_dealloc = true;</span><br><span class="line">        it-&gt;second |= SIDE_TABLE_DEALLOCATING;</span><br><span class="line">    &#125; else if (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</span><br><span class="line">        it-&gt;second -= SIDE_TABLE_RC_ONE;</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line">    if (do_dealloc  &amp;&amp;  performDealloc) &#123;</span><br><span class="line">        ((void(*)(objc_object *, SEL))objc_msgSend)(this, SEL_dealloc);</span><br><span class="line">    &#125;</span><br><span class="line">    return do_dealloc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-autorelease"><a href="#2-2-autorelease" class="headerlink" title="2.2 autorelease"></a>2.2 autorelease</h2><h3 id="2-2-1-autorelease的作用"><a href="#2-2-1-autorelease的作用" class="headerlink" title="2.2.1 autorelease的作用"></a>2.2.1 autorelease的作用</h3><p>autorelease的目的是为了让内存能够延迟释放.那么到底它的释放时机什么时候?那么我们先看autorelease的调用过程</p><ol><li>调用NSObject的autorelease方法</li><li>调用rootAutorelease()方法.在方法内部首先断言是否使用GC,然后就会判断对象是否为<b style="color:blue">TaggedPointer</b>如果是返回当前对象本身,继续判断prepareOptimizedReturn(ReturnAtPlus1),如果为true,返回当前对象,否则调用rootAutorelease2()</li><li>在rootAutorelease2()方法中首先判断是否为<b style="color:blue">TaggedPointer</b>.然后调用AutoreleasePoolPage::autorelease((id)this)</li><li>在AutoreleasePoolPage::autorelease((id)this)方法中首先断言对象obj是否存在,在判断是否为<b style="color:blue">TaggedPointer</b>.然后会定义一个id类型的变量接受autoreleaseFast(obj)的返回值.在autoreleaseFast(obj)方法中首先获取AutoreleasePoolPage对象.如果page存在并且page没有被塞满,就将obj对象加到page中.否则page存在,但是page已经塞满会重新new一个page,然后在添加进去.如果没有page就回调用autoreleaseNoPage,也会new一个然后把obj添加进去.然后返回对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">1.- (id)autorelease &#123;</span><br><span class="line">    return ((id)self)-&gt;rootAutorelease();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.inline id </span><br><span class="line">objc_object::rootAutorelease()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line"></span><br><span class="line">    if (isTaggedPointer()) return (id)this;</span><br><span class="line">    if (prepareOptimizedReturn(ReturnAtPlus1)) return (id)this;</span><br><span class="line"></span><br><span class="line">    return rootAutorelease2();</span><br><span class="line">&#125;</span><br><span class="line">3.id </span><br><span class="line">objc_object::rootAutorelease2()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!isTaggedPointer());</span><br><span class="line">    return AutoreleasePoolPage::autorelease((id)this);</span><br><span class="line">&#125;</span><br><span class="line">4.static inline id autorelease(id obj)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(obj);</span><br><span class="line">        assert(!obj-&gt;isTaggedPointer());</span><br><span class="line">        id *dest __unused = autoreleaseFast(obj);</span><br><span class="line">        assert(!dest  ||  *dest == obj);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"> 5. static inline id *autoreleaseFast(id obj)</span><br><span class="line">    &#123;</span><br><span class="line">        AutoreleasePoolPage *page = hotPage();</span><br><span class="line">        if (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class="line">            return page-&gt;add(obj);</span><br><span class="line">        &#125; else if (page) &#123;</span><br><span class="line">            return autoreleaseFullPage(obj, page);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return autoreleaseNoPage(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  6.static __attribute__((noinline))</span><br><span class="line">    id *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)</span><br><span class="line">    &#123;</span><br><span class="line">        // The hot page is full. </span><br><span class="line">        // Step to the next non-full page, adding a new page if necessary.</span><br><span class="line">        // Then add the object to that page.</span><br><span class="line">        assert(page == hotPage());</span><br><span class="line">        assert(page-&gt;full()  ||  DebugPoolAllocation);</span><br><span class="line"></span><br><span class="line">        do &#123;</span><br><span class="line">            if (page-&gt;child) page = page-&gt;child;</span><br><span class="line">            else page = new AutoreleasePoolPage(page);</span><br><span class="line">        &#125; while (page-&gt;full());</span><br><span class="line"></span><br><span class="line">        setHotPage(page);</span><br><span class="line">        return page-&gt;add(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static __attribute__((noinline))</span><br><span class="line">    id *autoreleaseNoPage(id obj)</span><br><span class="line">    &#123;</span><br><span class="line">        // No pool in place.</span><br><span class="line">        assert(!hotPage());</span><br><span class="line"></span><br><span class="line">        if (obj != POOL_SENTINEL  &amp;&amp;  DebugMissingPools) &#123;</span><br><span class="line">            // We are pushing an object with no pool in place, </span><br><span class="line">            // and no-pool debugging was requested by environment.</span><br><span class="line">            _objc_inform(&quot;MISSING POOLS: Object %p of class %s &quot;</span><br><span class="line">                         &quot;autoreleased with no pool in place - &quot;</span><br><span class="line">                         &quot;just leaking - break on &quot;</span><br><span class="line">                         &quot;objc_autoreleaseNoPool() to debug&quot;, </span><br><span class="line">                         (void*)obj, object_getClassName(obj));</span><br><span class="line">            objc_autoreleaseNoPool(obj);</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Install the first page.</span><br><span class="line">        AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);</span><br><span class="line">        setHotPage(page);</span><br><span class="line"></span><br><span class="line">        // Push an autorelease pool boundary if it wasn&apos;t already requested.</span><br><span class="line">        if (obj != POOL_SENTINEL) &#123;</span><br><span class="line">            page-&gt;add(POOL_SENTINEL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Push the requested object.</span><br><span class="line">        return page-&gt;add(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样就完成了将一个对象的延迟释放.但是autorelease的对象什么时机会释放啦.我们的猜想肯定是和AutoreleasePoolPage有关.我们看class AutoreleasePoolPage 的代码会发现,它有push和pop方法.释放肯定和pop有关,push肯定和入栈有关.<br>我们先看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">    static inline void pop(void *token) </span><br><span class="line">    &#123;</span><br><span class="line">    //定义局部变量AutoreleasePoolPage *page</span><br><span class="line">        AutoreleasePoolPage *page;</span><br><span class="line">        //定义stop变量</span><br><span class="line">        id *stop;</span><br><span class="line">        //根据token获取page</span><br><span class="line">        page = pageForPointer(token);</span><br><span class="line">        //然后将token赋值给stop</span><br><span class="line">        stop = (id *)token;</span><br><span class="line">        DebugPoolAllocation:halt when autorelease pools are popped out of order, and allow heap debuggers to track autorelease pools大致的意思就是当自动释放池出现故障或停止时,允许堆调试器跟踪自动释放池</span><br><span class="line">        *stop != POOL_SENTINEL : stop不为nil</span><br><span class="line">        无效的自动释放池</span><br><span class="line">        </span><br><span class="line">        if (DebugPoolAllocation  &amp;&amp;  *stop != POOL_SENTINEL) &#123;</span><br><span class="line">            // This check is not valid with DebugPoolAllocation off</span><br><span class="line">            // after an autorelease with a pool page but no pool in place.</span><br><span class="line">            _objc_fatal(&quot;invalid or prematurely-freed autorelease pool %p; &quot;, </span><br><span class="line">                        token);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果自动释放池的高位置标记存在,就打印高位置标记</span><br><span class="line">        if (PrintPoolHiwat) printHiwat();</span><br><span class="line">        </span><br><span class="line">        //page调用releaseUntil()方法</span><br><span class="line">        page-&gt;releaseUntil(stop);</span><br><span class="line">        </span><br><span class="line">        /*</span><br><span class="line">      void releaseUntil(id *stop) </span><br><span class="line">    &#123;</span><br><span class="line">        // Not recursive: we don&apos;t want to blow out the stack </span><br><span class="line">        // if a thread accumulates a stupendous amount of garbage</span><br><span class="line">        //当page-&gt;next = stop时停止,否则进行循环</span><br><span class="line">        while (this-&gt;next != stop) &#123;</span><br><span class="line">            // Restart from hotPage() every time, in case -release </span><br><span class="line">            // autoreleased more objects</span><br><span class="line">            //获取AutoreleasePoolPage</span><br><span class="line">            AutoreleasePoolPage *page = hotPage();</span><br><span class="line"></span><br><span class="line">            // fixme I think this `while` can be `if`, but I can&apos;t prove it</span><br><span class="line">            while循环如果page为空,就找parent,然后赋值给page.当page不为空时停止循环</span><br><span class="line">            </span><br><span class="line">            while (page-&gt;empty()) &#123;</span><br><span class="line">                page = page-&gt;parent;</span><br><span class="line">                setHotPage(page);</span><br><span class="line">            &#125;</span><br><span class="line">            //修改page的内存区域保护属性 (mprotect()函数可以用来修改一段指定内存区域的保护属性)</span><br><span class="line">            page-&gt;unprotect();</span><br><span class="line">            ??? 从下面的段代码可以看出将obj添加进page时也是通过next的++操作,然后通过--操作可以获取到当前对象.</span><br><span class="line">            /*</span><br><span class="line">             id *add(id obj)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(!full());</span><br><span class="line">        unprotect();</span><br><span class="line">        id *ret = next;  // faster than `return next-1` because of aliasing</span><br><span class="line">        *next++ = obj;</span><br><span class="line">        protect();</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">            */</span><br><span class="line">            id obj = *--page-&gt;next;</span><br><span class="line">            //将page-&gt;next的内存重置为0xA3</span><br><span class="line">            memset((void*)page-&gt;next, SCRIBBLE, sizeof(*page-&gt;next));</span><br><span class="line">            修改page的内存区域保护属性</span><br><span class="line">            page-&gt;protect();</span><br><span class="line">            //如果obj不为nil,就会release</span><br><span class="line">            if (obj != POOL_SENTINEL) &#123;</span><br><span class="line">            //和上面的release调用过程同</span><br><span class="line">                objc_release(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setHotPage(this);</span><br><span class="line"></span><br><span class="line">#if DEBUG</span><br><span class="line">        // we expect any children to be completely empty</span><br><span class="line">        for (AutoreleasePoolPage *page = child; page; page = page-&gt;child) &#123;</span><br><span class="line">            assert(page-&gt;empty());</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        // memory: delete empty children</span><br><span class="line">        if (DebugPoolAllocation  &amp;&amp;  page-&gt;empty()) &#123;</span><br><span class="line">            // special case: delete everything during page-per-pool debugging</span><br><span class="line">            AutoreleasePoolPage *parent = page-&gt;parent;</span><br><span class="line">            page-&gt;kill();</span><br><span class="line">            setHotPage(parent);</span><br><span class="line">        &#125; else if (DebugMissingPools  &amp;&amp;  page-&gt;empty()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">            // special case: delete everything for pop(top) </span><br><span class="line">            // when debugging missing autorelease pools</span><br><span class="line">            page-&gt;kill();</span><br><span class="line">            setHotPage(nil);</span><br><span class="line">        &#125; </span><br><span class="line">        else if (page-&gt;child) &#123;</span><br><span class="line">            // hysteresis: keep one empty child if page is more than half full</span><br><span class="line">            if (page-&gt;lessThanHalfFull()) &#123;</span><br><span class="line">                page-&gt;child-&gt;kill();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (page-&gt;child-&gt;child) &#123;</span><br><span class="line">                page-&gt;child-&gt;child-&gt;kill();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后我们根据autoreleasePoolPage的pop方法一直向上寻找,终于找到以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">1. loadimages方法</span><br><span class="line"></span><br><span class="line">const char *</span><br><span class="line">load_images(enum dyld_image_states state, uint32_t infoCount,</span><br><span class="line">            const struct dyld_image_info infoList[])</span><br><span class="line">&#123;</span><br><span class="line">    bool found;</span><br><span class="line"></span><br><span class="line">    // Return without taking locks if there are no +load methods here.</span><br><span class="line">    found = false;</span><br><span class="line">    for (uint32_t i = 0; i &lt; infoCount; i++) &#123;</span><br><span class="line">        if (hasLoadMethods((const headerType *)infoList[i].imageLoadAddress)) &#123;</span><br><span class="line">            found = true;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!found) return nil;</span><br><span class="line"></span><br><span class="line">    recursive_mutex_locker_t lock(loadMethodLock);</span><br><span class="line"></span><br><span class="line">    // Discover load methods</span><br><span class="line">    &#123;</span><br><span class="line">        rwlock_writer_t lock2(runtimeLock);</span><br><span class="line">        found = load_images_nolock(state, infoCount, infoList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Call +load methods (without runtimeLock - re-entrant)</span><br><span class="line">    if (found) &#123;</span><br><span class="line">        call_load_methods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. call_load_methods方法</span><br><span class="line"></span><br><span class="line">void call_load_methods(void)</span><br><span class="line">&#123;</span><br><span class="line">    static bool loading = NO;</span><br><span class="line">    bool more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    // Re-entrant calls do nothing; the outermost call will finish the job.</span><br><span class="line">    if (loading) return;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    void *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        // 1. Repeatedly call class +loads until there aren&apos;t any more</span><br><span class="line">        while (loadable_classes_used &gt; 0) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2. Call category +loads ONCE</span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        // 3. Run more +loads if there are classes OR more untried categories</span><br><span class="line">    &#125; while (loadable_classes_used &gt; 0  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.objc_autoreleasePoolPop方法</span><br><span class="line">void</span><br><span class="line">objc_autoreleasePoolPop(void *ctxt)</span><br><span class="line">&#123;</span><br><span class="line">    if (UseGC) return;</span><br><span class="line">    AutoreleasePoolPage::pop(ctxt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4._objc_load_image 也有调用call_load_methods</span><br><span class="line">OBJC_EXPORT void _objc_load_image(HMODULE image, header_info *hinfo)</span><br><span class="line">&#123;</span><br><span class="line">    prepare_load_methods(hinfo);</span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们看到了AutoreleasePoolPage调用了pop方法.而loadiamges方法以前应该也见过,就是在使用method swwizing的时候,重写load方法时,打上断点看到调用栈时看到过,还有就是framework有问题时,程序已启动就会在控制台上显示loadimages报错等.<br>这个不是这个文章的研究重点,只是简单提一下.xnu内核加载mach-o-&gt;从xnu内核态将控制权转移到dyld-&gt;_dyld_start-&gt;加载系统的framework和dylib到内存,然后runtime开始初始化和注册-&gt;当每次有心的镜像加入运行时会回调loadinages</p><p>然后就是在每次runloop进入休眠期时会调用pop和push释放旧的,创建新的,所以在runloop的每次进入休眠时会释放一次.</p><p><b style="color : red">篇幅已经过长,先进入下面的内容,下次再详细介绍runloop的内容和autoreleasepool</b></p><h2 id="2-3-dealloc"><a href="#2-3-dealloc" class="headerlink" title="2.3 dealloc"></a>2.3 dealloc</h2><p>作用:销毁对象</p><h3 id="2-3-1-调用过程"><a href="#2-3-1-调用过程" class="headerlink" title="2.3.1 调用过程"></a>2.3.1 调用过程</h3><ol><li>NSObject的dealloc方法</li><li>_objc_rootDealloc()方法</li><li>调用objc_object::rootDealloc()</li><li>调用object_dispose(id obj)方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">1.dealloc</span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    _objc_rootDealloc(self);</span><br><span class="line">&#125;</span><br><span class="line">2. _objc_rootDealloc</span><br><span class="line">void</span><br><span class="line">_objc_rootDealloc(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    assert(obj);</span><br><span class="line"></span><br><span class="line">    obj-&gt;rootDealloc();</span><br><span class="line">&#125;</span><br><span class="line">3.objc_object::rootDealloc()</span><br><span class="line">inline void</span><br><span class="line">objc_object::rootDealloc()</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return;</span><br><span class="line">    object_dispose((id)this);</span><br><span class="line">&#125;</span><br><span class="line">4.object_dispose()</span><br><span class="line">id </span><br><span class="line">object_dispose(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (!obj) return nil;</span><br><span class="line"></span><br><span class="line">    objc_destructInstance(obj);</span><br><span class="line">    </span><br><span class="line">#if SUPPORT_GC</span><br><span class="line">    if (UseGC) &#123;</span><br><span class="line">        auto_zone_retain(gc_zone, obj); // gc free expects rc==1</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    free(obj);</span><br><span class="line"></span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void *objc_destructInstance(id obj) </span><br><span class="line">&#123;</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        // Read all of the flags at once for performance.</span><br><span class="line">        //对象是否有析构函数</span><br><span class="line">        bool cxx = obj-&gt;hasCxxDtor();</span><br><span class="line">        //对象是否有动态绑定和关联引用</span><br><span class="line">        bool assoc = !UseGC &amp;&amp; obj-&gt;hasAssociatedObjects();</span><br><span class="line">        //是否使用gc</span><br><span class="line">        bool dealloc = !UseGC;</span><br><span class="line"></span><br><span class="line">        // This order is important.</span><br><span class="line">        //如果存在使用析构函数</span><br><span class="line">        if (cxx) object_cxxDestruct(obj);</span><br><span class="line">        //如果存在动态属性,移除动态绑定和关联应用</span><br><span class="line">        if (assoc) _object_remove_assocations(obj);</span><br><span class="line">        //</span><br><span class="line">        if (dealloc) obj-&gt;clearDeallocating();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-retainCount"><a href="#2-4-retainCount" class="headerlink" title="2.4 retainCount"></a>2.4 retainCount</h2><p>作用:查看对象的引用计数</p><h3 id="2-4-1-调用"><a href="#2-4-1-调用" class="headerlink" title="2.4.1 调用"></a>2.4.1 调用</h3><ol><li>retainCount</li><li>rootRetainCount</li><li>sidetable_retainCount()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1. retainCount</span><br><span class="line">- (NSUInteger)retainCount &#123;</span><br><span class="line">    return ((id)self)-&gt;rootRetainCount();</span><br><span class="line">&#125;</span><br><span class="line">2. rootRetainCount</span><br><span class="line">inline uintptr_t </span><br><span class="line">objc_object::rootRetainCount()</span><br><span class="line">&#123;</span><br><span class="line">    assert(!UseGC);</span><br><span class="line"></span><br><span class="line">    if (isTaggedPointer()) return (uintptr_t)this;</span><br><span class="line">    return sidetable_retainCount();</span><br><span class="line">&#125;</span><br><span class="line">3.sidetable_retainCount</span><br><span class="line">uintptr_t</span><br><span class="line">objc_object::sidetable_retainCount()</span><br><span class="line">&#123;</span><br><span class="line">//获取对象保存引用计数的数据结构</span><br><span class="line">    SideTable&amp; table = SideTables()[this];</span><br><span class="line">    //定义局部变量refcnt_result</span><br><span class="line">    size_t refcnt_result = 1;</span><br><span class="line">    </span><br><span class="line">    table.lock();</span><br><span class="line">    //获取对象的引用计数表</span><br><span class="line">    RefcountMap::iterator it = table.refcnts.find(this);</span><br><span class="line">    //如果引用计数 != end(引用计数散列表未填充满)</span><br><span class="line">    if (it != table.refcnts.end()) &#123;</span><br><span class="line">        // this is valid for SIDE_TABLE_RC_PINNED too</span><br><span class="line">        然后引用计数 = </span><br><span class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line">    return refcnt_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.vicky.org.cn/2018/10/12/iOS内存管理/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS内存管理(一)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-1-release&quot;&gt;&lt;a href=&quot;#2
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="release" scheme="https://blog.devvk.com/tags/release/"/>
    
      <category term="autorelease" scheme="https://blog.devvk.com/tags/autorelease/"/>
    
      <category term="dealloc" scheme="https://blog.devvk.com/tags/dealloc/"/>
    
      <category term="retainCount" scheme="https://blog.devvk.com/tags/retainCount/"/>
    
  </entry>
  
</feed>
