<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vicky的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.devvk.com/"/>
  <updated>2019-01-07T08:39:13.456Z</updated>
  <id>https://blog.devvk.com/</id>
  
  <author>
    <name>Vicky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVO原理和自定义</title>
    <link href="https://blog.devvk.com/2019/01/07/KVO%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://blog.devvk.com/2019/01/07/KVO原理和自定义/</id>
    <published>2019-01-07T08:38:07.000Z</published>
    <updated>2019-01-07T08:39:13.456Z</updated>
    
    <content type="html"><![CDATA[<h1>KVO的自定义和原理分析</h1><h2>KVO的触发模式</h2><br><p>kvo的触发方式分为<b>手动</b>和<b>自动触发</b></p><br><p>自动触发:</p><br><p>添加观察,实现监听方法</p><br><pre><br>[_p addObserver:self forKeyPath:@”name” options:(NSKeyValueObservingOptionNew) context:nil];<br><br>- (void)observeValueForKeyPath:(NSString <em>)keyPath ofObject:(id)object change:(NSDictionary<nskeyvaluechangekey,id> </nskeyvaluechangekey,id></em>)change context:(void <em>)context {<br>    NSLog(@”%@,%@”,change,_p.name);<br>}<br></em></pre><br><p>手动观察</p><br><p>实现automaticallyNotifiesObserversForKey:(NSString )key 方法,判断key值是否开启手动观察</p><br><pre><br>@implementation Person<br><br>//返回一个bool值,该值指示所观察的对象是否支持对给定的键值自动观察<br>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key {<br>    if ([key isEqualToString:@”name”]) {<br>        return NO;<br>    }<br>    return YES;<br>}<br>@end<br><br></pre><br><p>当开启手动观察后,如果需要监听值的改变,必须调用willChangeValueForKey:和didChangeValueForKey:</p><br><pre><br> [_p willChangeValueForKey:@”name”];<br> _p.name = [NSString stringWithFormat:@”%d”,a++];<br> [_p didChangeValueForKey:@”name”];<br></pre><br><br><h2>KVO的属性依赖</h2><p><pre><br>@interface Dog : NSObject<br>@property(nonatomic, assign) int age;<br>@property(nonatomic, assign) int level;<br>@end</pre></p><p>@interface Person : NSObject<br>@property(nonatomic, copy) NSString <em>name;<br>@property(nonatomic, strong)Dog </em>dog;<br>@end</p><ul><li><p>(NSSet<nsstring *=""> <em>)keyPathsForValuesAffectingValueForKey:(NSString </em>)key {<br>  NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];;<br>  if ([key isEqualToString:@”dog”]) {</nsstring></p><pre><code>keyPaths = [[NSSet alloc] initWithObjects:@&quot;_dog.age&quot;,@&quot;_dog._level&quot;, nil];</code></pre><p>  }<br>  return keyPaths;<br>}</p><p>_p = [[Person alloc] init];<br>  [_p addObserver:self forKeyPath:@”dog” options:(NSKeyValueObservingOptionNew) context:nil];<br></p><p>当我们需要监听属性的属性的变化,如果只有一个属性可以直接使用keypath,但是如果有多个属性时,我们要么添加多个addObserver,要不就是使用属性依赖</p></li></ul><p></p><h2>KVO的原理</h2><p></p><ol><li>创建子类NSKVONotyfing_Person</li><li>重写setter方法</li><li>将isa指针指向子类</li><li>保存观察者</li><li>通知观察者,并调用父类的set方法</li></ol><p></p><h2>自定义KVO</h2><p></p><p>我在思考上面的步骤,并在完成时进行了扩展和封装,并取消掉了4和5的部分步骤,而是使用了imp的block的方法,使代码看起来更加简单和清晰</p><br><pre><br>- (void)WQ<em>addObserver:(NSObject <em>)observer forKeyPath:(NSString </em>)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void <em>)context {<br>    //子类名称<br>    NSString </em>className = [[@”WQ” stringByAppendingString:@”KVONotyfing</em>“] stringByAppendingString:NSStringFromClass([self class])];<br>    //创建子类<br>    Class myClass = objc_allocateClassPair([self class], [className UTF8String], 0);<br>    //注册子类<br>    objc_registerClassPair(myClass);<br>    //将keyPath的首字母大写<br>    NSString <em>propertyName = [keyPath capitalizedString];<br>    //完成setter方法名拼接<br>    NSString </em>methodName = [[@”set” stringByAppendingString:propertyName] stringByAppendingString:@”:”];<br>    //获取方法的SEL<br>    SEL methodSel = NSSelectorFromString(methodName);<br>    //添加方法实现<br>    IMP methodImp = imp_implementationWithBlock(^(id self, id value) {<br>    //创建objc_super结构体,结构体有两个成员变量,一个是receiver,一个是super<em>class,reciver是指定类的实例,在本利中就是Person类的实例,但是这个实例对象的类型经过更改isa指针指向时已经变为子类类型(WQ</em> KVONotyfing_ Person),第二个参数是父类,也就是Person类.<br>        struct objc_super * reciver = malloc(sizeof(struct objc_super));<br>        reciver-&gt;receiver = self;<br>        reciver-&gt;super_class = [self superclass];<br>        //调用objc_msgSendSuper,向父类发送消息,第一个参数就是objc_super结构体,第二个参数就是SEL,后面的参数就是sel的参数<br>        objc_msgSendSuper(reciver, methodSel,value);<br>        //判断observer是否存在,如果存在就调用objc_msgSend,告诉观察者,值发生了改变<br>        if (observer) {<br>          objc_msgSend(observer, @selector(observeValueForKeyPath:ofObject:change:context:),keyPath,nil,@{@”new:”:value,@”kind”:@1},context);<br>        }<br>    });<br> //为子类添加setter方法<br> class_addMethod(myClass,methodSel,methodImp,”v@:@”);<br> //将父类的isa指针,指向子类<br> object_setClass(self, myClass);<br>}<br><br></pre><br><p>在我研究的过程中,我本来也是创建了函数来实现setter方法,最后看到IMP的方法可以穿入block作为方法实现,如果是使用函数的话,函数默认有两个参数(id self,SEL _cmd).而使用imp的block的话(有一个默认参数id self,去除了SEL _cmd).</p><br><p>还有就是在调用父类的setter方法时,一只调用不了,我也一直在想到底是什么问题,检查了几次代码发现没有问题,然后在其他文件夹中找到了一个Person的分类,重写了setter方法,这个错误也让我明白了,如果分类重写了某个方法,如果一旦调用该方法,会执行分类的方法,而不会再调用类本身的方法(因为这个方法已经失效)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;KVO的自定义和原理分析&lt;/h1&gt;

&lt;h2&gt;KVO的触发模式&lt;/h2&gt;&lt;br&gt;&lt;p&gt;kvo的触发方式分为&lt;b&gt;手动&lt;/b&gt;和&lt;b&gt;自动触发&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;自动触发:&lt;/p&gt;&lt;br&gt;&lt;p&gt;添加观察,实现监听方法&lt;/p&gt;&lt;br&gt;&lt;pre&gt;&lt;br&gt;[_p add
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="KVO分析" scheme="https://blog.devvk.com/tags/KVO%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CFNetwork</title>
    <link href="https://blog.devvk.com/2018/12/19/CFNetwork/"/>
    <id>https://blog.devvk.com/2018/12/19/CFNetwork/</id>
    <published>2018-12-19T02:13:46.000Z</published>
    <updated>2018-12-19T08:19:37.282Z</updated>
    
    <content type="html"><![CDATA[<h1 style="text-align:center">CFNetwork</h1><h2>引言</h2><p style="text-indent:2em">在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有<a href="https://developer.apple.com/documentation/foundation/nsurlsession" target="_blank" rel="noopener">NSURLSession</a>,&nbsp;<a href="https://developer.apple.com/documentation/foundation/nsurlconnection" title="NSURLConnect在iOS9之后,已经被苹果废弃取而代之的是NSURLSession" target="_blank" rel="noopener">NSURLConnect</a>,和底层的<a href="https://developer.apple.com/documentation/cfnetwork" target="_blank" rel="noopener">CFNetwork</a></p><br><p style="text-indent:2em">在目前我做过的项目中一直在使用<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a>,这个框架在3.0版本时放弃了NSURLConnect,开始采用了苹果推荐的NSURLSession.主要使用提升了网络连接速度,Session采用了共享,而非每次新建.使用共享就是避免每次发送请求时都会进行tcp的三次握手,session共享就是复用这个tcp连接.</p><h2>使用CFNetwork进行网络请求</h2><br><p style="text-indent:2em">CFNetwork是基于C语言实现的一套网络请求框架,所以它的使用难度是比NSURLSession和NSURLConnect大的.示例代码如下</p><br><pre><br>//创建请求URL字符串<br>    NSURL <em>url = [NSURL URLWithString:URLString];<br>//创建HTTP消息<br>    CFHTTPMessageRef request = CFHTTPMessageCreateRequest(kCFAllocatorDefault, CFSTR(“GET”),(<strong>bridge CFURLRef)url, kCFHTTPVersion1_1);<br>//设置请求头content-type<br>    for (id object in self.networkResponseContentType) {<br>        if ([object isKindOfClass: [NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, CFSTR(“Content-type”), (</strong>bridge CFStringRef )object);<br>        }<br>        else {<br>            NSAssert([object isKindOfClass:[NSString class]], @”content-type value must be string”);<br>        }<br>    }<br> //设置请求头<br>    [self.allHttpHeaders enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL </em> _Nonnull stop) {<br>        if ([key isKindOfClass:[NSString class]] &amp;&amp; [obj isKindOfClass:[NSString class]]) {<br>            CFHTTPMessageSetHeaderFieldValue(request, (<strong>bridge CFStringRef)key, (</strong>bridge CFStringRef )obj);<br>        }<br>        else {<br>            NSAssert([obj isKindOfClass:[NSString class]] &amp;&amp; [key isKindOfClass:[NSString class]], @”http header key and value must be string”);<br>        }<br>    }];<br>   //HTTP返回消息<br>    CFHTTPMessageRef reponse = [self performHTTPRequest:request];<br>    NSData <em>data = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:nil];<br>    CFHTTPMessageSetBody(request, (__bridge CFDataRef)data);<br><br>    CFIndex statusCode;<br>    statusCode = CFHTTPMessageGetResponseStatusCode(reponse);<br>    if (statusCode == 200) {<br>        CFDataRef responseDataRef = CFHTTPMessageCopyBody(reponse);<br>        NSDictionary </em>dic = [NSJSONSerialization JSONObjectWithData:(<strong>bridge NSData <em>)responseDataRef options:NSJSONReadingAllowFragments error:nil];<br>        success(reponse,dic);<br>    }<br>    else {<br>        NSError </em>error = [NSError errorWithDomain:NSCocoaErrorDomain code:statusCode userInfo:@{@”url”:url.absoluteString,@”errorDesc”:(</strong>bridge NSString <em>)CFHTTPMessageCopyResponseStatusLine(reponse)}];<br>        failure(reponse,error);<br><br>    }<br></em></pre><br><p style="text-indemt:2em">下面的方法是接收到数据流后,然后将流数据拼接起来返回</p><br><pre><br>- (CFHTTPMessageRef)performHTTPRequest:(CFHTTPMessageRef)request<br>{<br>//从请求中读取流<br>    CFReadStreamRef requestStream = CFReadStreamCreateForHTTPRequest(NULL, request);<br>//打开流<br>    CFReadStreamOpen(requestStream);<br>//拼接流<br>    NSMutableData responseBytes = [NSMutableData data];<br><br>    CFIndex numBytesRead = 0;<br>    do {<br>        UInt8 buf[1024];<br>        numBytesRead = CFReadStreamRead(requestStream, buf, sizeof(buf));<br><br>        if (numBytesRead &gt; 0) {<br>            [responseBytes appendBytes:buf length:numBytesRead];<br>        }<br>    } while (numBytesRead &gt; 0);<br> //<br>    CFHTTPMessageRef response = (CFHTTPMessageRef) CFReadStreamCopyProperty(requestStream, kCFStreamPropertyHTTPResponseHeader);<br>    CFHTTPMessageSetBody(response, (__bridge CFDataRef)responseBytes);<br><br>    CFReadStreamClose(requestStream);<br>    CFRelease(requestStream);<br><br>    return ((CFHTTPMessageRef) CFAutorelease(response));<br>}<br><br></pre><br><br><h2>CFHTTPMessageRef详解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 style=&quot;text-align:center&quot;&gt;CFNetwork&lt;/h1&gt;

&lt;h2&gt;引言&lt;/h2&gt;

&lt;p style=&quot;text-indent:2em&quot;&gt;在iOS应用开发中,CFNetwork框架其实并不是非常常用的,我们常用的网络框架有&lt;a href=&quot;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>c语言操作符</title>
    <link href="https://blog.devvk.com/2018/12/06/c%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://blog.devvk.com/2018/12/06/c语言操作符/</id>
    <published>2018-12-06T02:59:26.000Z</published>
    <updated>2018-12-06T05:18:28.988Z</updated>
    
    <content type="html"><![CDATA[<p>#####操作符</p><ol><li><p>算术操作符</p><p>+,  -,  *,  /,  %<br>除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作符魏整数的情况,返回值不是两个操作符的商而是两数进行整除后的余数.</p></li><li><p>移位操作符<br>(以下都是以8位二进制讨论10010110)<br>分为左移位和右移位,移位操作简单的理解就是将一个值向左或者向右移动指定的位数.</p></li></ol><p>左移位:将指定的数向左移动若干位,但是最左边的几位会被抛弃,右边不足的几位由0补齐.这样又可以形成一个完整的二进制.</p><p>右移位:将指定的数向右移动若干位,但是在右移位当中分为两种情况,一种是逻辑移位,一种是算术移位,逻辑移位是指将指定的数向右移动若干位,左边移入的位用0补齐.然后最右边的会被抛弃.算术移位是指,将指定的数移动若干位,左边移入的位不是用0来补齐而是用符号位来补齐.如果符号位为0就用0补齐,如果是1就用1补齐.</p><p>左移三位:10110000<br>右移三位:逻辑:00010010,算术:11110010</p><p>左移的操作符为&lt;&lt;,右移操作符为&gt;&gt;,左操作数的值将移动右操作数的位数,两个操作数都必须魏整型类型</p><p><strong>警告</strong></p><p>标准说明所有无符号的移位操作都是逻辑移位,但是有符号的移位操作到底是采用逻辑移位还是算术移位取决于编译器.</p><ol><li>位操作符<br>位操作符对他们的操作数的各个位执行AND.OR和XOR等逻辑操作.</li></ol><p>&amp; | ^<br>AND OR XOR</p><p>当两个位进行AND操作时,如果<strong>两个位都是1结果为1</strong>,否则都为0.当两个位进行OR操作时,如果<strong>两个位都是0,结果为0</strong>,否则结果为1.当两个位进行XOR操作时,如果<strong>两个位不同则为1</strong>,否则为0.</p><p>举例:<br>a 为00101110<br>b 为01011011</p><p>a &amp; b = 00001010<br>a | b = 01111111<br>a ^ b = 01110101</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####操作符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;算术操作符&lt;/p&gt;
&lt;p&gt;+,  -,  *,  /,  %&lt;br&gt;除了%操作符,其他算术操作符均可用于浮点数和整数算术运算当中.当/的两个操作数为整数时,进行整除,如果是浮点数则运行浮点数除法.%取模操作符只能用于两个操作
      
    
    </summary>
    
      <category term="C和指针" scheme="https://blog.devvk.com/categories/C%E5%92%8C%E6%8C%87%E9%92%88/"/>
    
    
      <category term="算术操作符" scheme="https://blog.devvk.com/tags/%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="移位操作符" scheme="https://blog.devvk.com/tags/%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="位操作符" scheme="https://blog.devvk.com/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="赋值" scheme="https://blog.devvk.com/tags/%E8%B5%8B%E5%80%BC/"/>
    
      <category term="单目运算" scheme="https://blog.devvk.com/tags/%E5%8D%95%E7%9B%AE%E8%BF%90%E7%AE%97/"/>
    
      <category term="关系操作符" scheme="https://blog.devvk.com/tags/%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逻辑操作符" scheme="https://blog.devvk.com/tags/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="条件操作符" scheme="https://blog.devvk.com/tags/%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="逗号操作符" scheme="https://blog.devvk.com/tags/%E9%80%97%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
      <category term="下标引用,函数调用和结构成员" scheme="https://blog.devvk.com/tags/%E4%B8%8B%E6%A0%87%E5%BC%95%E7%94%A8-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%92%8C%E7%BB%93%E6%9E%84%E6%88%90%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>调试</title>
    <link href="https://blog.devvk.com/2018/12/05/%E8%B0%83%E8%AF%95/"/>
    <id>https://blog.devvk.com/2018/12/05/调试/</id>
    <published>2018-12-05T07:12:00.000Z</published>
    <updated>2018-12-05T07:49:15.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><h5 id="dSYM文件"><a href="#dSYM文件" class="headerlink" title="dSYM文件"></a>dSYM文件</h5><p>调试信息文件</p><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><p>断点目前分为swift error ,exception,symbolic,opne gl error,constraint error,Test faliure error.</p><ol><li>异常断点</li></ol><p>首先介绍异常断点(在开发中也被称为全局断点),在代码运行过程中抛出异常后,断点会组织程序运行,如果不设置异常断点,只看控制台也不知道到底发生了什么.设置了异常断点后,我们经常会看到程序会在抛出异常的瞬间,停止程序.然后在调用栈中我们可以找到导致程序抛出异常的代码.从而帮助我们解决问题,在这里我建议大家在创建完项目后,就打上异常断点,这样在抛出异常的时候就能快速查阅调用堆栈,方便解决问题.</p><ol><li>符号断点</li></ol><p>我们可以设置符号断点,符号可以使方法名,类方法名,c函数的方法名等.(不常用)</p><ol><li>open gl (没用过) </li><li>编辑断点</li></ol><p>我们滚动到需要添加断点的代码时,添加完断点,可以点击鼠标右键选择edit breakpoint,来编辑断点.这个在日常开法中也是很有用的.可以设置condition,来终止程序继续执行,也可以添加action(apple script,sound,shell,log,debug command,GPU frame)等.</p><ol><li>共享断点</li></ol><p>我们可以再断点导航面板,点击断点,然后鼠标右键,然后点击share,就可以将断点保存到工程文件包的xcshareddata中.然后提交到代码版本库中.</p><h5 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h5><p>我们在开发过程中经常会使用po和p来调试</p><p>p主要用来在控制台输出整型和结构体类型</p><p>po主要用来在控制要输出对象</p><p>还可以使用register read来查看寄存器信息,我们知道使用register关键字申明的变量不是保存在内存上的,而是保存在寄存器上的.所有不能使用取地址符来方法这些变量.因为取地址符是用来访问内存的.</p><p>如果你是一名python的开发者,或者说熟悉python,也可以在控制台输入script来引入python脚本来进行调试</p><h5 id="NSZombieEnabled"><a href="#NSZombieEnabled" class="headerlink" title="NSZombieEnabled"></a>NSZombieEnabled</h5><p>NSZombieEnabled,它会用一个僵尸实现来替换默认的dealloc实现.当引用计数降到0时,</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LLDB&quot;&gt;&lt;a href=&quot;#LLDB&quot; class=&quot;headerlink&quot; title=&quot;LLDB&quot;&gt;&lt;/a&gt;LLDB&lt;/h3&gt;&lt;h5 id=&quot;dSYM文件&quot;&gt;&lt;a href=&quot;#dSYM文件&quot; class=&quot;headerlink&quot; title=&quot;dSYM文
      
    
    </summary>
    
    
      <category term="LLDB调试" scheme="https://blog.devvk.com/tags/LLDB%E8%B0%83%E8%AF%95/"/>
    
      <category term="断点" scheme="https://blog.devvk.com/tags/%E6%96%AD%E7%82%B9/"/>
    
      <category term="控制台" scheme="https://blog.devvk.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
      <category term="NSZombieEnabled" scheme="https://blog.devvk.com/tags/NSZombieEnabled/"/>
    
      <category term="崩溃类型" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="断言" scheme="https://blog.devvk.com/tags/%E6%96%AD%E8%A8%80/"/>
    
      <category term="异常" scheme="https://blog.devvk.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="崩溃报告收集" scheme="https://blog.devvk.com/tags/%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%94%B6%E9%9B%86/"/>
    
      <category term="第三方崩溃报告服务" scheme="https://blog.devvk.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView/WKWebview</title>
    <link href="https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/"/>
    <id>https://blog.devvk.com/2018/12/04/UIWebView-WKWebview/</id>
    <published>2018-12-04T02:34:26.000Z</published>
    <updated>2018-12-05T07:09:55.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebview-WKWebview"><a href="#UIWebview-WKWebview" class="headerlink" title="UIWebview/WKWebview"></a>UIWebview/WKWebview</h1><h2 id="事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决"><a href="#事情并非突然-并不是一时的兴趣-只是遇到的问题-才想着去解决" class="headerlink" title="事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决."></a>事情并非突然,并不是一时的兴趣.只是遇到的问题,才想着去解决.</h2><p>问题: 本来的项目是使用的UIWebview,但是苹果推荐在iOS8以后希望开发者使用WKWebview,不仅是在内存消耗释放等方面做出了优化,更是在其他性能发面做出了巨大的改变和优化.(具体哪些后面再说),所以在客户提出说要优化webview的加载速度时,首先想到的是将UIWebview替换成WKWebview.不换不知道,一换吓一跳.然后就是我和测试的锅了,没有进行全面的测试,因为有些链接会去下载利用企业证书签名的app.但是在点击时却下载不了,客户那边很着急,然后我连上测试机,打开safari开始调试,发现在js文件的下载方法中进行了判断,会对浏览器的标识进行判断.因为h5页面也不是我们公司写的.所以不能修改,只能自己换回UIWebview.没想到的是UIWebview是可以的.那么UIWeb和WKWeb到底什么地方不同啦?</p><h2 id="UIWebview"><a href="#UIWebview" class="headerlink" title="UIWebview"></a>UIWebview</h2><p>在官方文档中明确指出,当你的apps运行在iOS 8及以后的使用应该使用WKWeb来代替UIWeb.如果你不想呈现可以不运行js文件,可以设置WKPreferences的属性javaScriptEnabled为false.(只需要记住在iOS 8以后尽量使用WKWeb).</p><p>注意点:</p><p>一个iOSapp如果运行在iOS10以后必须在info.plist文件中使用 那些权限的描述key.如果没添加可能会出现crash的情况.例如NSPhotoLibraryUsageDescription 和 NSCameraUsageDescription.</p><p>loadHTMLString(<em>:baseURL:)这个方法被用来loading 本地的html 文件.<br>loadRequest(</em>:)则是用来加载web content<br>stopLoading() 可以停止加载<br>isLoading property可以查看web是否正在加载<br>goback(),可以返回到webpage history,<br>goForward(),可以前进到webpage history<br>canGoBack 和canGoForward属性判断是否可以回退和前进<br>UIDataDetectorTypes:<br>在默认情况下web view自动转换手机号码.当一个phone lonks出现在web conten中.当这个phone linkl 被点击.就会拨打电话.如果想关闭该默认的行为,可以设置dataDetectorTypes.让它不包含phone number flag</p><p>scalesPageToFit设置这个属性可以在web content显示在web view上时,调整大小.用户可以使用手势调整scale</p><p>delegate:代理(UIWebviewDelegate)</p><p>注意点:<br>你不应该将webview或者是tableview对象内嵌到scollview中,如果你这样做了.可能会在造成意想不到的结果</p><p>然后剩下的就是我们调试的问题,可以通过Safari调试webview的内容.</p><p>uiwebview还可有显示其他的内容例如:keynote,pdf,page doct .但是如果要显示富文本尽量使用UITextview</p><p>在iOS6以后,设置restorationIdentifier 属性可以尝试保存url 历史.当缩放和滑动到其他页面时.再恢复期间,驶入将恢复这些值.以便web的内容和之前的一样</p><p>看完文档再看UIWebview的头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UIKIT_EXTERN API_DEPRECATED(&quot;No longer supported; please adopt WKWebView.&quot;, ios(2.0, 12.0)) API_UNAVAILABLE(tvos, macos) @interface UIWebView : UIView &lt;NSCoding, UIScrollViewDelegate&gt;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus 在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line">#define UIKIT_EXTERNextern &quot;C&quot; __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#else</span><br><span class="line">#define UIKIT_EXTERN        extern __attribute__((visibility (&quot;default&quot;)))</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">在c++.  extern &quot;C&quot; 是为了兼容以前的C程序.告诉编译器按照以前C编译方式对(全局)函数或变量进行编译.否则按照C++的方式进行编译</span><br><span class="line"></span><br><span class="line">__attribute__设置函数属性(变量,类型)</span><br><span class="line"></span><br><span class="line">visibility属性是否设置将本项目的函数作为库使用时的可见性,g++编译时, 加入-fvisibility=hidden参数, 会将所有默认public属性设为hidden, 导致库外文件不可见</span><br><span class="line">但是如果设置了__attribute__((visibility (&quot;default&quot;)))的函数, 其public属性仍能对外可见, 而不是hidden。可见编译指令 -fvisibility是对所有属性符号进行处理, 而__attribute__((visibility (&quot;default&quot;)))是对特定函数可见性进行设置, 避免冲突</span><br><span class="line"></span><br><span class="line">第二个就是说这个api废弃了.然后说让你使用WKWeb.然后他还是支持从iOS2.0到iOS12</span><br><span class="line">第三个宏定义就是说这个api不支持tvos,macos.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@property (nullable, nonatomic, assign) id &lt;UIWebViewDelegate&gt; delegate;</span><br><span class="line">//通过这个代理方法可以决定是否加在网页中的链接,也可以在该方法中拦截加载和完成与js交互</span><br><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 开始加载</span><br><span class="line">- (void)webViewDidStartLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//web content 加载完成</span><br><span class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br><span class="line">//加载失败出现错误</span><br><span class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error API_DEPRECATED(&quot;No longer supported.&quot;, ios(2.0, 12.0));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//我们创建一个满屏的webview时,发现它是可以拖动的,我们也知道能拖动的view在iOS开发中都是继承或者是内嵌了uiscollview.</span><br><span class="line">//第二点这里声明属性时,使用了只读属性,在我们以后的开发中,外部只是访问属性的值时,也可以参考苹果的这种做法,在.h声明为只读,在.m声明为可读写.这样可以防止外部写入,防止外部修改.</span><br><span class="line">@property (nonatomic, readonly, strong) UIScrollView *scrollView NS_AVAILABLE_IOS(5_0);</span><br><span class="line">//加载web content</span><br><span class="line">- (void)loadRequest:(NSURLRequest *)request;</span><br><span class="line">//加载本地html文件</span><br><span class="line">- (void)loadHTMLString:(NSString *)string baseURL:(nullable NSURL *)baseURL;</span><br><span class="line">//加载其他类型的文件.例如keynote,pdf等</span><br><span class="line">- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;</span><br><span class="line">//当我们在调试webview时,经常会webview.request.url.发现这个url是会变的.所以在uiwebview的内部.当没加载一个新的页面时,这个request会被重新赋值.</span><br><span class="line">@property (nullable, nonatomic, readonly, strong) NSURLRequest *request;</span><br><span class="line">//刷新</span><br><span class="line">- (void)reload;</span><br><span class="line">//停止加载</span><br><span class="line">- (void)stopLoading;</span><br><span class="line">//返回</span><br><span class="line">- (void)goBack;</span><br><span class="line">//前进</span><br><span class="line">- (void)goForward;</span><br><span class="line">//能否后退</span><br><span class="line">@property (nonatomic, readonly, getter=canGoBack) BOOL canGoBack;</span><br><span class="line">//能否前进</span><br><span class="line">@property (nonatomic, readonly, getter=canGoForward) BOOL canGoForward;</span><br><span class="line">//是否正在加载</span><br><span class="line">@property (nonatomic, readonly, getter=isLoading) BOOL loading;</span><br><span class="line">//注入js的方法(交互方法)</span><br><span class="line">- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</span><br><span class="line">//调整页面首次加载时的规模,后期可以通过手势修改比例</span><br><span class="line">@property (nonatomic) BOOL scalesPageToFit;</span><br><span class="line"></span><br><span class="line">//NS_DEPRECATED_IOS(2_0, 3_0),3.0就废弃了,跳过</span><br><span class="line">@property (nonatomic) BOOL detectsPhoneNumbers NS_DEPRECATED_IOS(2_0, 3_0);</span><br><span class="line">//从3.0开始可用(这是就是设置当web content中出现手机号,邮箱等信息时,如果点击这些会自动进行打电话和发邮件等,可以通过设置该属性进行修改)</span><br><span class="line">@property (nonatomic) UIDataDetectorTypes dataDetectorTypes NS_AVAILABLE_IOS(3_0);</span><br><span class="line"></span><br><span class="line">//下面这三个是媒体播放的相关设置</span><br><span class="line">@property (nonatomic) BOOL allowsInlineMediaPlayback NS_AVAILABLE_IOS(4_0); // iPhone Safari defaults to NO. iPad Safari defaults to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackRequiresUserAction NS_AVAILABLE_IOS(4_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay NS_AVAILABLE_IOS(5_0); // iPhone and iPad Safari both default to YES</span><br><span class="line"></span><br><span class="line">//增量</span><br><span class="line">@property (nonatomic) BOOL suppressesIncrementalRendering NS_AVAILABLE_IOS(6_0); // iPhone and iPad Safari both default to NO</span><br><span class="line">//键盘的显示设置</span><br><span class="line">@property (nonatomic) BOOL keyboardDisplayRequiresUserAction NS_AVAILABLE_IOS(6_0); // default is YES</span><br><span class="line">//编页码方式</span><br><span class="line">@property (nonatomic) UIWebPaginationMode paginationMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//分页模式</span><br><span class="line">@property (nonatomic) UIWebPaginationBreakingMode paginationBreakingMode NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页长</span><br><span class="line">@property (nonatomic) CGFloat pageLength NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页间距</span><br><span class="line">@property (nonatomic) CGFloat gapBetweenPages NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//页数</span><br><span class="line">@property (nonatomic, readonly) NSUInteger pageCount NS_AVAILABLE_IOS(7_0);</span><br><span class="line">//图片在媒体中播放</span><br><span class="line">@property (nonatomic) BOOL allowsPictureInPictureMediaPlayback NS_AVAILABLE_IOS(9_0);</span><br><span class="line">//允许链接预览</span><br><span class="line"></span><br><span class="line">@property (nonatomic) BOOL allowsLinkPreview NS_AVAILABLE_IOS(9_0); // default is NO</span><br></pre></td></tr></table></figure><p>头文件也看完了.现在就说一下平时可能遇到的问题.</p><p>1.由于h5页面不只是放在app中的webview,也有可能在多个app中使用,那么怎么区分到底是哪个app的流量带入更大啦.我们可以设置user-agent.可以拼接上每个app的名称来进行区分.还可以进行拦截.比如说你的h5页面有下载,或者是其他需要保证流量正确性的时候,可以判断非该user-agent的不能进行该操作.<br>2.返回退出和进入,内存持续增长.得不到有效释放.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UIWebview-WKWebview&quot;&gt;&lt;a href=&quot;#UIWebview-WKWebview&quot; class=&quot;headerlink&quot; title=&quot;UIWebview/WKWebview&quot;&gt;&lt;/a&gt;UIWebview/WKWebview&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="UIWebview" scheme="https://blog.devvk.com/tags/UIWebview/"/>
    
      <category term="WKWebview" scheme="https://blog.devvk.com/tags/WKWebview/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理三</title>
    <link href="https://blog.devvk.com/2018/10/17/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%89/"/>
    <id>https://blog.devvk.com/2018/10/17/iOS内存管理三/</id>
    <published>2018-10-17T07:34:53.000Z</published>
    <updated>2018-10-18T02:07:09.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-内存管理的思考方式"><a href="#3-1-内存管理的思考方式" class="headerlink" title="3.1 内存管理的思考方式"></a>3.1 内存管理的思考方式</h2><p>自己生成的对象,自己持有<br>非自己生成的对象,自己也能持有<br>不再需要自己持有的对象时释放<br>非自己持有的对象不能释放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-内存管理的思考方式&quot;&gt;&lt;a href=&quot;#3-1-内存管理的思考方式&quot; class=&quot;headerlink&quot; title=&quot;3.1 内存管理的思考方式&quot;&gt;&lt;/a&gt;3.1 内存管理的思考方式&lt;/h2&gt;&lt;p&gt;自己生成的对象,自己持有&lt;br&gt;非自己生成的对象,自
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="内存管理的思考方式" scheme="https://blog.devvk.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F/"/>
    
      <category term="所有权修饰符" scheme="https://blog.devvk.com/tags/%E6%89%80%E6%9C%89%E6%9D%83%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
      <category term="规则" scheme="https://blog.devvk.com/tags/%E8%A7%84%E5%88%99/"/>
    
      <category term="属性" scheme="https://blog.devvk.com/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="数组" scheme="https://blog.devvk.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>rxswift学习(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/rxswift%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.devvk.com/2018/10/12/rxswift学习/</id>
    <published>2018-10-12T06:49:10.000Z</published>
    <updated>2018-10-15T08:17:48.724Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="swift" scheme="https://blog.devvk.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>国际化本地化</title>
    <link href="https://blog.devvk.com/2018/10/12/localizable-strings%E5%9B%BD%E9%99%85%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%A4%84%E7%90%86/"/>
    <id>https://blog.devvk.com/2018/10/12/localizable-strings国际化和本地化处理/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:11:00.124Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章我在简书上已经写过直接跳转简书查看<br><a href="https://www.jianshu.com/p/7a5495dbff3f" target="_blank" rel="noopener">利用Localizable.strings做本地化和国际化处理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章我在简书上已经写过直接跳转简书查看&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/7a5495dbff3f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用Localizable.strings做本地化和国际化处理&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="Localizable.strings" scheme="https://blog.devvk.com/tags/Localizable-strings/"/>
    
  </entry>
  
  <entry>
    <title>SDWebImage源码阅读(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/SDWebImage%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://blog.devvk.com/2018/10/12/SDWebImage源码阅读/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:16:29.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDWebImage的目录层级"><a href="#SDWebImage的目录层级" class="headerlink" title="SDWebImage的目录层级"></a>SDWebImage的目录层级</h1><p>都说技术的成长要不断的学习和不断的练习.学习可以有很多方法<br>For example 读书,阅读博客,阅读源代码,还有就是我们观看一些技术讨论会,分享会和开发者大会.而我们今天要讲的是从阅读源码开始.从事iOS开发三年来,有读过源码,但是都不完整.所以我目前的长进还只是停留在某个层面.所以从现在开始养成阅读源码的习惯.但是好的源码有很多,到底该如何入手.那么先从加载图片框架开始!</p><p>我们要阅读一份源码,首先会看到这份源码的层级结构,包含哪些文件根据文件名判断其主要功能和作用.SD目录层级如下:</p><img src="/2018/10/12/SDWebImage源码阅读/sdwebimage.gif" title="This is an image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SDWebImage的目录层级&quot;&gt;&lt;a href=&quot;#SDWebImage的目录层级&quot; class=&quot;headerlink&quot; title=&quot;SDWebImage的目录层级&quot;&gt;&lt;/a&gt;SDWebImage的目录层级&lt;/h1&gt;&lt;p&gt;都说技术的成长要不断的学习和不断的练
      
    
    </summary>
    
      <category term="源码阅读" scheme="https://blog.devvk.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="sdwebimage" scheme="https://blog.devvk.com/tags/sdwebimage/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习资源</title>
    <link href="https://blog.devvk.com/2018/10/12/Swift%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%92%8C%E5%A4%A7%E7%A5%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.devvk.com/2018/10/12/Swift学习资源和大神博客/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:17:41.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift学习资源"><a href="#Swift学习资源" class="headerlink" title="Swift学习资源"></a>Swift学习资源</h1><p>因为iOS的开发者Objective-C和Swift不分家，所以下面的有关资源既包含Swift资源也包含Objective-C 资源，博主并没有细分内容还请各位看官见谅。</p><h3 id="视频教程-英文"><a href="#视频教程-英文" class="headerlink" title="视频教程(英文)"></a>视频教程(英文)</h3><ul><li><a href="https://www.lynda.com/search?q=ios" target="_blank" rel="noopener">Lynda</a> Lynda上面iOS和Objective-C的学习资料比较丰富，从初级到高级都涉及，无论你目前处于什么层次，都有你适合的视频教学。</li><li><a href="https://www.udemy.com/courses/development/mobile-apps/learn-objective-c/all-courses/" target="_blank" rel="noopener">Udemy</a> Udemy帮助初学者规划视频学习路线，从新手到高级分的很详尽。</li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li><a href="https://www.amazon.com/dp/032194206X/ref=cm_sw_r_tw_dp_fWrPub0BGRHJ3" target="_blank" rel="noopener">Objective-C Programming</a> 内容不多, 却都是精华, 有了一点 C 语言基础可以快速阅读此书, 大概一天时间就可以看完, 看完后对 iOS 开发能够有个基本的印象。</li><li><a href="https://book.douban.com/subject/24538384/" target="_blank" rel="noopener">iOS Programming</a> 这本书在 Quora 上被评为 iOS 入门最佳书籍, 具体评价可见豆瓣下方该书籍的评论</li><li><a href="https://book.douban.com/subject/3688896/" target="_blank" rel="noopener">Cocoa Design Patterns</a> 适合打算深入了解 Cocoa 的人看</li><li><a href="http://cocoadevcentral.com/d/learn_objectivec/" target="_blank" rel="noopener">Learn Objective-C</a> 短小精练, 适合有编程基础的人在半小时内对 Objective-C 有个一定了解</li><li><a href="https://www.amazon.cn/dp/B00COG40Y0/ref=cm_sw_r_qz_2_dp_l2OPub0N45R0Q" target="_blank" rel="noopener">Objective-C 基础教程</a> 该书作者 Scott Knaster 是 Mac 开发界的传奇人物, 目前在 Google 出过多数书籍都广受许多程序员好评, 此书适合从初级跳到中级的 iOS 开发者阅读</li><li><a href="https://www.amazon.cn/dp/B00R43XG9S/ref=cm_sw_r_qz_pi_T2A_jdp_fCPPub0VBF67T" target="_blank" rel="noopener">iOS 开发进阶</a> 该书作者唐巧是国内 iOS 开发界的名人, 曾参与多个知名软件的开发, 目前该书作者已经不再推荐本书，因为内容已经比较老了，但是在学习的过程中还是可以翻阅一下的, 书本内容由浅入深, 将读者一步一步引入到 iOS 中去, 同样适合初级跳到中级的 iOS 开发者阅读</li><li><a href="https://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/0321967607" target="_blank" rel="noopener">Programming in Objective-C</a>  Programming in Objective-C   这本书在亚马逊上面深受欢迎, 有关 Objective-C 的东西讲得非常详细</li><li><a href="https://www.amazon.cn/dp/B00JPVNFKM/ref=cm_sw_r_qz_4_dp_tdPPub14X59PV" target="_blank" rel="noopener">iOS 测试指南</a> 该书作者是豆瓣的员工, 书中写的多数内容都是作者在平时的工作实践当中提炼出来的测试经验, 重点讲述了各个测试阶段的具体实践方法, 并且通过持续集成串联了各个测试阶段的活动。</li><li><a href="https://book.douban.com/subject/6920082/" target="_blank" rel="noopener">Objective-C 编程之道</a> 解析 iOS 的开山之作, 详细介绍了 MVC 在 Cocoa Touch 上的运作过程, 该书适用于 iOS 中级开发者阅读</li><li><a href="https://www.amazon.cn/dp/B00DE60G3S/ref=cm_sw_r_qz_2_dp_hdPPub11MFE6G" target="_blank" rel="noopener">Objective-C 高级编程</a> 本书主要介绍 iOS 与 OS X 多线程和内存管理, 深入破析了苹果官方公布的源代码, 告诉你一些苹果公司官方文档中不会出现的知识, 适合中级以上 iOS 开发人员阅读</li><li><a href="https://www.amazon.cn/dp/B00IDSGY06/ref=cm_sw_r_qz_2_dp_A2OPub0CH96YH" target="_blank" rel="noopener">Effective Objective C 2.0</a> 书里写了编写高质量 iOS 与 OS X 代码的 52 个有效方法, 适合 iOS 开发的进阶使用</li><li><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html" target="_blank" rel="noopener">The Swift Programming Language 中文版</a> 学习Swift基础的中文文档，目前更新到Swift3.0文档</li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="https://onevcat.com/#blog" target="_blank" rel="noopener">OneV’s Den</a></li><li><a href="http://blog.devtang.com/" target="_blank" rel="noopener">唐巧的技术博客</a></li><li><a href="https://blog.ibireme.com" target="_blank" rel="noopener">ibireme</a></li><li><a href="http://blog.cnbang.net" target="_blank" rel="noopener">bang</a></li><li><a href="http://blog.sunnyxx.com" target="_blank" rel="noopener">孙源的技术博客</a></li><li><a href="http://beyondvincent.com/" target="_blank" rel="noopener">破船之家</a></li><li><a href="http://nshipster.cn/" target="_blank" rel="noopener">NSHipster</a></li><li><a href="http://limboy.me/" target="_blank" rel="noopener">Limboy 无网不剩</a></li><li><a href="http://zhowkev.in/" target="_blank" rel="noopener">Kevin Blog</a></li><li><a href="https://imtx.me/" target="_blank" rel="noopener">IMTX</a></li><li><a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰</a></li><li><a href="http://www.iosxxx.com" target="_blank" rel="noopener">向晨宇的技术博客</a></li><li><a href="http://blog.leichunfeng.com" target="_blank" rel="noopener">雷纯锋的技术博客</a></li><li><a href="http://www.tanhao.me" target="_blank" rel="noopener">老谭笔记</a></li><li><a href="http://www.cnblogs.com/kenshincui/" target="_blank" rel="noopener">Kenshin Cui’s Blog</a></li><li><a href="https://casatwy.com" target="_blank" rel="noopener">Casa Taloyum</a></li><li><a href="http://www.olinone.com" target="_blank" rel="noopener">庞海礁的个人空间</a></li><li><a href="http://tutuge.me" target="_blank" rel="noopener">土土哥的技术blog</a></li><li><a href="http://yulingtianxia.com" target="_blank" rel="noopener">玉令天下的博客</a></li><li><a href="http://www.iiiyu.com" target="_blank" rel="noopener">萧宸宇</a></li><li><a href="http://www.cnblogs.com/biosli" target="_blank" rel="noopener">摇滚诗人</a></li><li><a href="http://foggry.com" target="_blank" rel="noopener">王中周的技术博客</a></li><li><a href="https://blog.nswebfrog.com" target="_blank" rel="noopener">Blog | nswebfrog</a></li><li><a href="http://limboy.me" target="_blank" rel="noopener">limboy</a></li></ul><h3 id="社区论坛"><a href="#社区论坛" class="headerlink" title="社区论坛"></a>社区论坛</h3><ul><li><a href="https://objccn.io/" target="_blank" rel="noopener">objc中国</a></li><li><a href="http://www.cocoachina.com/" target="_blank" rel="noopener">cocoachina</a></li><li><a href="https://www.objc.io/" target="_blank" rel="noopener">objc</a></li><li><a href="http://www.code4app.com/" target="_blank" rel="noopener">code4App</a></li><li><a href="http://discuss.cocos2d-x.org/" target="_blank" rel="noopener">Cocos2d-x</a></li><li><a href="http://iphonedevsdk.com/" target="_blank" rel="noopener">iPhone Dev SDK</a></li></ul><h3 id="国内知名程序员开发日报"><a href="#国内知名程序员开发日报" class="headerlink" title="国内知名程序员开发日报"></a>国内知名程序员开发日报</h3><ul><li><a href="https://juejin.im/#/tag/iOS" target="_blank" rel="noopener">掘金</a></li><li><a href="http://geek.csdn.net/" target="_blank" rel="noopener">极客头条</a></li><li><a href="https://toutiao.io/" target="_blank" rel="noopener">开发者头条</a></li><li><a href="http://weekly.manong.io/" target="_blank" rel="noopener">码农周刊</a></li><li><a href="http://top.jobbole.com/" target="_blank" rel="noopener">伯乐头条</a></li><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a></li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift学习资源&quot;&gt;&lt;a href=&quot;#Swift学习资源&quot; class=&quot;headerlink&quot; title=&quot;Swift学习资源&quot;&gt;&lt;/a&gt;Swift学习资源&lt;/h1&gt;&lt;p&gt;因为iOS的开发者Objective-C和Swift不分家，所以下面的有关资源既包含
      
    
    </summary>
    
      <category term="资源" scheme="https://blog.devvk.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="swift" scheme="https://blog.devvk.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Architectures</title>
    <link href="https://blog.devvk.com/2018/10/12/Xcode%E4%B9%8BArchitectures%E8%AE%BE%E7%BD%AE/"/>
    <id>https://blog.devvk.com/2018/10/12/Xcode之Architectures设置/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:19:09.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xcode设置项之Architectures和Valid-Architectures"><a href="#Xcode设置项之Architectures和Valid-Architectures" class="headerlink" title="Xcode设置项之Architectures和Valid Architectures"></a>Xcode设置项之Architectures和Valid Architectures</h1><p>为什么会聊到这个话题,我今天早上刚到公司,说我们App晚上要发版,但是我周六对电脑的Xcode中的缓存文件进行了大规模的清理.然后打开项目跑代码的时候,发现怎么运行不起来了,一直报错library not found for -lafnetworking<br>然后我开始不断的尝试各种方法,最终还是没有解决,大约在14年左右吧,这个项目当时还是使用cocoapods的,最后经过岁月的摧残,当我拿到项目的时候,交接的人说cocoapods不能用,我当时心里就感觉到,这他妈要凉啊.那我导入第三方还要手动拖进去,这也太尴尬了吧.最后我实在忍不住了,就执行了pod install,然后应用程序就有问题了,找到问题-&gt;修改问题-&gt;测试-&gt;成功-&gt;倍儿爽!.但是这次我不知道为什么前几天还好好的工程,为什么在我删除Xcode的一些过大文件后就报错了啦.原因目前可能是将某个配置文件删除了,重新编译的过程中,使用了一个有问题的编译配置.知道是配置的问题,那就开始找问题,我找到以前的代码对比配置,尤其是pod的配置,因为错误很明显afnetworking.我发现在Build Active Architecture only这里以前Debug和Release都是No,但是现在却是Yes,当我改成No之后编译就成功了,虽然可能会在调试的时候编译会慢,但是问题还得慢慢找,先解决发版在说.虽然很懵逼,但是很开心.终于可以赶上发版了.要是出问题了,就又得加班了,关键是这个周末我没有休息,来公司做其他项目了.眼睛也不知道为什么会肿.所以看到问题就很难受.言归正传</p><p>介绍上面的两个名词</p><h1 id="Valid-Architectures"><a href="#Valid-Architectures" class="headerlink" title="Valid Architectures"></a>Valid Architectures</h1><p>您的App需要支持的指令集,最终生成的二进制文件所支持的指令集</p><p>如果你设置Valid Architectures支出armv7/armv7s/arm64,<br>Architectures设置的支持arm指令集版本有：armv7s，这时Xcode只会生成一个armv7s指令集的二进制包。<br>到底armv7什么含义可以自己去看一下,简单的理解就是arm处理器的指令集,也就是你支持设备版本.</p><h1 id="Build-Active-Architecture-Only"><a href="#Build-Active-Architecture-Only" class="headerlink" title="Build Active Architecture Only"></a>Build Active Architecture Only</h1><p>该编译项用于设置是否只编译当前使用的设备对应的arm指令集。<br>就是你用什么设备调试,就是用对应的指令集去进行编译.<br>当该选项设置成YES时，你连上一个armv7指令集的设备，就算你的Valid Architectures和Architectures都设置成armv7/armv7s/arm64，还是依然只会生成一个armv7指令集的二进制包.<br>当选择NO,那就是你设置了几种,它就会编译几种,最终产生的二进制文件较大,而且编译过程会慢.</p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ul><li>指令集都是可以向下兼容的</li></ul><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>如果你想较小包的大小,就可以设置这个来减少编译不同指令的包.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xcode设置项之Architectures和Valid-Architectures&quot;&gt;&lt;a href=&quot;#Xcode设置项之Architectures和Valid-Architectures&quot; class=&quot;headerlink&quot; title=&quot;Xcode设置项
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode常用命令</title>
    <link href="https://blog.devvk.com/2018/10/12/Xcode%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E5%92%8C%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://blog.devvk.com/2018/10/12/Xcode调试技巧和常用快捷键/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:18:22.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xcode常用命令"><a href="#Xcode常用命令" class="headerlink" title="Xcode常用命令"></a>Xcode常用命令</h1><p>p :常用来输出基础数据类型</p><p>po :常用来输出oc对象类型</p><p>expr :可以在调试时动态的执行表达式，同时打印出结果。常用来动态修改变量的值。</p><p>call :常用来动态调用函数</p><p>image: image命令可以列出当前App中的所有模块</p><p>po [view recursiveDescription] 查看view的层级关系</p><h1 id="Xcode常用快捷键"><a href="#Xcode常用快捷键" class="headerlink" title="Xcode常用快捷键"></a>Xcode常用快捷键</h1><p>shift+command+o :快速打开文件</p><p>Command+1~9:导航面版切换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xcode常用命令&quot;&gt;&lt;a href=&quot;#Xcode常用命令&quot; class=&quot;headerlink&quot; title=&quot;Xcode常用命令&quot;&gt;&lt;/a&gt;Xcode常用命令&lt;/h1&gt;&lt;p&gt;p :常用来输出基础数据类型&lt;/p&gt;
&lt;p&gt;po :常用来输出oc对象类型&lt;/p&gt;

      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="常用命令" scheme="https://blog.devvk.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 52个方法</title>
    <link href="https://blog.devvk.com/2018/10/12/52%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.devvk.com/2018/10/12/52个方法/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T06:21:03.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一条-了解Objective-C的语言的起源"><a href="#第一条-了解Objective-C的语言的起源" class="headerlink" title="第一条:了解Objective-C的语言的起源?"></a>第一条:了解Objective-C的语言的起源?</h1><p>Objective-C和C++、Java 等都是面向对象的语言。但是在面向对象的语言中Objective-C采用的是消息结构语言，而其他的面向语言采用的还是函数调用的方式。消息结构语言来自于SmallTalk。</p><p>消息结构和函数调用的区别</p><p>消息结构决定其运行过程中所需要执行的代码由运行时环境决定，而其他面向对象语言则是由编译器决定。我们都知道 OC 是在运行时才会确定对象类型。而调用方法亦是如此，在运行时才回去查找到底该执行哪个方法。而且在 OC 中接收消息的对象可以为 nil 这是其他面向对象语言所不具有的。其他的语言都会先进行判断。</p><p>OC 作为 C 的超集在很多方面还是沿用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一条-了解Objective-C的语言的起源&quot;&gt;&lt;a href=&quot;#第一条-了解Objective-C的语言的起源&quot; class=&quot;headerlink&quot; title=&quot;第一条:了解Objective-C的语言的起源?&quot;&gt;&lt;/a&gt;第一条:了解Objective-
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="52个方法" scheme="https://blog.devvk.com/tags/52%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>版本控制</title>
    <link href="https://blog.devvk.com/2018/10/12/git%E4%BB%8E0%E5%88%B01/"/>
    <id>https://blog.devvk.com/2018/10/12/git从0到1/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-22T09:11:26.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h1><p>版本控制是帮助我们记录文件内容发生变化,方便后面查阅每个版本不同的修订情况.还可以通过版本控制回溯到某个版本的状态.还可以比较文件的变化细节.</p><h1 id="git的工作状态"><a href="#git的工作状态" class="headerlink" title="git的工作状态"></a>git的工作状态</h1><ol><li>工作目录</li><li>暂存区域</li><li>git仓库</li></ol><p>工作目录是在本地计算机上拉取远程仓库某个版本的内容和数据,然后我们进行修改和使用.</p><p>暂存区域是一个文件,它会保存下次即将要提交的文件列表信息,一般会在git仓库的目录中.</p><p>git仓库:是用来保存项目元数据和对象数据库的地方.每次我们提交的更新通过快照也保存在git仓库中.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于版本控制&quot;&gt;&lt;a href=&quot;#关于版本控制&quot; class=&quot;headerlink&quot; title=&quot;关于版本控制&quot;&gt;&lt;/a&gt;关于版本控制&lt;/h1&gt;&lt;p&gt;版本控制是帮助我们记录文件内容发生变化,方便后面查阅每个版本不同的修订情况.还可以通过版本控制回溯到某个版本
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="版本控制" scheme="https://blog.devvk.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="git" scheme="https://blog.devvk.com/tags/git/"/>
    
      <category term="svn" scheme="https://blog.devvk.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>HomeBrew VS Wegt</title>
    <link href="https://blog.devvk.com/2018/10/12/HomeBrew%E4%B8%8ERuby%E6%9B%B4%E6%96%B0/"/>
    <id>https://blog.devvk.com/2018/10/12/HomeBrew与Ruby更新/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:05:33.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeBrew-与-wegt"><a href="#HomeBrew-与-wegt" class="headerlink" title="HomeBrew 与 wegt"></a>HomeBrew 与 wegt</h1><p>HomeBrew 是一款自由及开放源代码的软件包管理系统,用以简化Mac OS X系统上的软件安装过程.它使用Ruby语言写成,针对Mac OS X操作系统自带的Ruby版本,默认安装在/usr/local下.由一个核心的git版本库构成,以使用户能更新HomeBrew.包管理器使用一种称为”公式”的DSL脚本来管理依赖,下载源代码及配置和编译软件,从源代码中构建软件</p><p>安装需求</p><p>Xcode</p><p>安装方式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure><p>相关指令</p><p>搜索:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search 套件名称</span><br></pre></td></tr></table></figure><p>查询套件信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info 套件名称</span><br></pre></td></tr></table></figure><p>安装套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install 套件名称</span><br></pre></td></tr></table></figure><p>查询目前已经安装的套件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>更新HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><p>卸载HomeBrew</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd <span class="string">`brew --prefix`</span></span><br><span class="line">$ rm -rf Cellar$ brew prune</span><br><span class="line">$ rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew</span><br><span class="line">$ rm -rf ~<span class="regexp">/Library/</span>Caches/Homebrew</span><br></pre></td></tr></table></figure><p>wegt 是linux的一个命令用来下载文件的工具<br>我只有在虚拟机上使用过这个命令,主要作用是用来下载文件.比如说做后台的同学想下载tomcat,就可以通过这个来下载,过多的内容接不介绍了</p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>Mac OS X 系统自带了ruby环境,所以我们一般是不需要管理ruby环境的,今天说这个问题是在过年期间我在更新mac系统时出错了缺少系统启动文件,然后我就恢复系统了,知道今天才发现我pod install执行不了,提示ruby的版本过低,而我的pod版本是最新版,所以我就想通过更新ruby来解决问题,但是更新ruby时又发现brew出错了.所以很生气,后果很严重.下载brew,更新ruby,pod就好了<br>卸载和安装上面都有讲述.更新ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade ruby</span><br></pre></td></tr></table></figure><h1 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h1><p>对于iOS开发的同学,使用cocoapods是在所难免的,所以不再过多讲述,网上的文章一搜一大堆.<br><a href="https://www.jianshu.com/p/edd9dbd35576" target="_blank" rel="noopener">pod入门到放弃</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HomeBrew-与-wegt&quot;&gt;&lt;a href=&quot;#HomeBrew-与-wegt&quot; class=&quot;headerlink&quot; title=&quot;HomeBrew 与 wegt&quot;&gt;&lt;/a&gt;HomeBrew 与 wegt&lt;/h1&gt;&lt;p&gt;HomeBrew 是一款自由及开放源
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="HomeBrew" scheme="https://blog.devvk.com/tags/HomeBrew/"/>
    
      <category term="wegt" scheme="https://blog.devvk.com/tags/wegt/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用攻防实战(一)</title>
    <link href="https://blog.devvk.com/2018/10/12/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    <id>https://blog.devvk.com/2018/10/12/iOS应用安全攻防实战/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:10:32.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="误解1-认证因为这设备是安全可信任的"><a href="#误解1-认证因为这设备是安全可信任的" class="headerlink" title="误解1: 认证因为这设备是安全可信任的"></a>误解1: 认证因为这设备是安全可信任的</h1><p>设备和产品的认证,只是认证机构对于设备和产品的概念性功能和实现能力的合规性认证,在认证的过程中并没有对设备和产品进行渗透性测试.并不能保证设备和程序不被黑客攻破.</p><h1 id="误解2-单一性安全机制"><a href="#误解2-单一性安全机制" class="headerlink" title="误解2: 单一性安全机制"></a>误解2: 单一性安全机制</h1><p>单一性安全机制的问题,就存在与单一性上,他简化了攻破所需要分析的代码.如果一旦单一的安全机制被攻破,所有基于这个单一安全机制的设备和程序都将被攻破.</p><h1 id="iOS安全模型"><a href="#iOS安全模型" class="headerlink" title="iOS安全模型"></a>iOS安全模型</h1><p>1.设备安全:防止未授权的人使用设备</p><p>2.数据安全:存储在设备上的数据得到保护</p><p>3.网络安全:当通过网络传输时的加密工具</p><p>4.应用软件安全:加固操作系统并隔离运行时应用软件的机制</p><h1 id="设备安全"><a href="#设备安全" class="headerlink" title="设备安全"></a>设备安全</h1><p>对于设备安全,苹果做出的应对是设置密码和PIN锁.苹果允许企业在安全策略中强制设置这些锁,或个人用户手动设置.</p><h1 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h1><p>苹果的数据加密是很值得一提的,采用硬件加密加速器来加密选定的应用软件数据.通过将这些存储在设备上的特定加密密钥与用户设置的密码结合,该系统可以保证只有在用户输入密码后文件系统中这些被保护的文件才会解密.所以用户输入的密码的安全性就是关键.所以密码的复杂度就决定破解的难度.</p><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><p>苹果使用了很多方法来加密网络包括VPN,SSL,TLS传输层协议,WEP,WPA,WPA2无线网络加密和认证,和2017年一月份提出的HTTPS强制要求都是为了网络安全.</p><h1 id="应用软件的安全"><a href="#应用软件的安全" class="headerlink" title="应用软件的安全"></a>应用软件的安全</h1><p>应用软件的安全,完全依赖于苹果的沙盒技术.拼过系统将自身可被访问的API作为接口放出.应用软件本身不可以访问系统组件,和其他应用软件.沙盒机制限制了一个应用的内存和CPU使用的总量,当超出限制时,出现崩溃闪退现象.他只可以对自己文件目录访问.</p><p>为了限制应用软件访问设备资源,苹果使用代码签名的方式,所有运行在设备上的二进制代码,必须经过苹果签名或者使用苹果办法的证书签名.这样做可以保证自身无法修改二进制文件.苹果也可以检测其应用软件的完整性.确保没有被签名的代码注入.</p><p>钥匙串技术,可以将一些网络凭证,其他信息保存在钥匙串中,还提供了低级别的加密解密方法.</p><p>苹果还提供了基础的加密解密算法(common crypto),开发者可以使用加密算法,对数据机型加密.</p><h1 id="误解三-iOS文件系统加密可以防止设备上的数据失窃-直到iOS5"><a href="#误解三-iOS文件系统加密可以防止设备上的数据失窃-直到iOS5" class="headerlink" title="误解三:iOS文件系统加密可以防止设备上的数据失窃(直到iOS5)"></a>误解三:iOS文件系统加密可以防止设备上的数据失窃(直到iOS5)</h1><p>iOS的文件系统加密使用了将秘钥he数据存储在同一设备上的加密系统(直到iOS5)攻击者只需要活的在设备上执行代码的权限,就可以计算出密钥来破解数据.密钥是数字形态的,谁拥有设备的数字拥有权,谁就能同时拿到锁和钥匙</p><h1 id="密码等于弱安全"><a href="#密码等于弱安全" class="headerlink" title="密码等于弱安全"></a>密码等于弱安全</h1><p>相比于PC，移动设备的安全性和用户体验之间的取舍就很严重了。<br>举一个例子：我们在使用完手机后，时不时会把放进口袋里。每一次使用手机都要进行解锁。所以手机厂商在设计这个安全锁时，就必须考虑密码的简单性。要不然用户体验就会很差（vicky_12@.qq.com）。这样的密码在pc上输入还可以，在每次解锁手机屏幕时，用户可能会取消这个设备锁。因为太过于麻烦。所以厂商的设计一般都是某种图形或者是4位或者6位数字。所以密码是弱安全。</p><h1 id="误解四：关心安全的用户会设置复杂的密码"><a href="#误解四：关心安全的用户会设置复杂的密码" class="headerlink" title="误解四：关心安全的用户会设置复杂的密码"></a>误解四：关心安全的用户会设置复杂的密码</h1><p>大多数用户任然选择PIN码和简单的密码保护自己的设备。这样做是因为他们不知道密码的复杂度与设备加密强度的关系。他们自认为，我设置密码就可以赶跑那些坏人。如果坏人足够坏，你设置的密码是远远不够的。所以假设你的用户一般都只会使用简单PIN码和密码来保护设备。</p><h1 id="误解五：强密码依然不能保证设备安全"><a href="#误解五：强密码依然不能保证设备安全" class="headerlink" title="误解五：强密码依然不能保证设备安全"></a>误解五：强密码依然不能保证设备安全</h1><p>我们所指出的强弱密码并不能完全保证你设备的安全，因为在强的东西也有破绽，只是击破它的复杂度上升了，并没有说完全安全性。在互联网方面，没有完全的安全。</p><h1 id="数字取证击败加密"><a href="#数字取证击败加密" class="headerlink" title="数字取证击败加密"></a>数字取证击败加密</h1><p>可能你编写的代码是很安全的，你的应用软件是很安全的。按时操作系统会不断削减你的安全性。操作系统会不断缓存你所产生的操作（键盘操作）web缓存。文件操作等。操作系统都可以缓存到磁盘中。而且操作系统还可以恢复你删除掉的私密文件。私密文件的加密秘钥只要还存在，私密文件就可能被恢复。而且更加恐怖的是连私密文件的密钥都可以被恢复。</p><h1 id="误解六：-如果应用软件安全的实现了加密，数据就无法从设备中被恢复"><a href="#误解六：-如果应用软件安全的实现了加密，数据就无法从设备中被恢复" class="headerlink" title="误解六： 如果应用软件安全的实现了加密，数据就无法从设备中被恢复"></a>误解六： 如果应用软件安全的实现了加密，数据就无法从设备中被恢复</h1><p>首先你错了。上面已经说过了操作系统会不断削弱你的安全性，会缓存你的操作和文件。就连你私密文件的密钥都能操作，你还认为应用软件安全吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;误解1-认证因为这设备是安全可信任的&quot;&gt;&lt;a href=&quot;#误解1-认证因为这设备是安全可信任的&quot; class=&quot;headerlink&quot; title=&quot;误解1: 认证因为这设备是安全可信任的&quot;&gt;&lt;/a&gt;误解1: 认证因为这设备是安全可信任的&lt;/h1&gt;&lt;p&gt;设备和产
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="安全" scheme="https://blog.devvk.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="攻防" scheme="https://blog.devvk.com/tags/%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发小记</title>
    <link href="https://blog.devvk.com/2018/10/12/iOS%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/"/>
    <id>https://blog.devvk.com/2018/10/12/iOS开发小记/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:08:36.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h1&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>细说IBoutlet</title>
    <link href="https://blog.devvk.com/2018/10/12/IBoutlet%E6%9D%82%E8%B0%88/"/>
    <id>https://blog.devvk.com/2018/10/12/IBoutlet杂谈/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:07:18.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="细说IBoutlet"><a href="#细说IBoutlet" class="headerlink" title="细说IBoutlet"></a>细说IBoutlet</h1><p>当我们在XIb文件或者SB文件中添加空间后,需要与对应属性关联时就会产生</p><pre><code>@property(nonatomic,weak) IBoutlet UIbutton *button</code></pre><p>那么 IBoutlet到底有什么作用啦.<br>首先IBoutlet不是系统关键字,只是位于系统头文件中的一组预处理命令</p><pre><code>#ifdef IBoutlet#define IBoutlet#endif</code></pre><p>对于编译器来说,它没有任何作用.它只是告诉Xcode,它和Xib文件中的对象关联.</p><p>在古老的OC语言中.我们声明属性是,都需要声明相对应的实例变量</p><pre><code>@interface ViewController : UIViewController {    IBoutlet UIbutton *button;}@property(nonatomic,weak) IBoutlet UIbutton *button;@end</code></pre><p>那为什么要这么做,因为当时采用GCC的编译器.最后苹果开发出了自己的编译器LLVM.在声明属性时,就不需要声明实例变量了.因为LLVM在编译过程中如果没有找到对应属性的实例变量,会自己创建.所以就不需要声明了.就将IBoutlet迁移到了属性声明上.区别于自己声明的属性和与XIB文件中对象关联的属性.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;细说IBoutlet&quot;&gt;&lt;a href=&quot;#细说IBoutlet&quot; class=&quot;headerlink&quot; title=&quot;细说IBoutlet&quot;&gt;&lt;/a&gt;细说IBoutlet&lt;/h1&gt;&lt;p&gt;当我们在XIb文件或者SB文件中添加空间后,需要与对应属性关联时就会产生&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devvk.com/categories/iOS/"/>
    
    
      <category term="IBoutlet" scheme="https://blog.devvk.com/tags/IBoutlet/"/>
    
  </entry>
  
  <entry>
    <title>instrument使用</title>
    <link href="https://blog.devvk.com/2018/10/12/instrument%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.devvk.com/2018/10/12/instrument的使用/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:08:15.489Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="内存分析" scheme="https://blog.devvk.com/tags/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
      <category term="时间复杂度分析" scheme="https://blog.devvk.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    
      <category term="CPU占用分析" scheme="https://blog.devvk.com/tags/CPU%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://blog.devvk.com/2018/10/12/mysql%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.devvk.com/2018/10/12/mysql安装/</id>
    <published>2018-10-12T02:22:10.000Z</published>
    <updated>2018-10-12T03:11:38.811Z</updated>
    
    <content type="html"><![CDATA[<p>mac 安装mysql</p><p>1.安装<a href="http://blog.vicky.org.cn/2018/02/24/HomeBrew与Ruby更新/" target="_blank" rel="noopener">homebrew</a></p><p>2.brew uninstall mysql</p><p>3.brew install mysql</p><p>4.mysql -u root -p</p><p>5.如果出现报错执行</p><p><code>unset TMPDIR</code></p><p><code>bash mysql_install_db --verbose --user=root --basedir=&quot;$(brew --prefix mysql)&quot;--datadir=/usr/local/var/mysql --tmpdir=/tmp</code></p><p><code>bash mysql.server start</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mac 安装mysql&lt;/p&gt;
&lt;p&gt;1.安装&lt;a href=&quot;http://blog.vicky.org.cn/2018/02/24/HomeBrew与Ruby更新/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;homebrew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://blog.devvk.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="安装" scheme="https://blog.devvk.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="使用" scheme="https://blog.devvk.com/tags/%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
